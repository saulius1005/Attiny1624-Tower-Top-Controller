
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000012f3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001104  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  00009104  00001104  00001198  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  000012f3  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00001390  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000398c  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023c0  00000000  00000000  00004e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd1  00000000  00000000  00007254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00008228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d3e  00000000  00000000  000084e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000744  00000000  00000000  0000a226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000a96a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a3 31       	cpi	r26, 0x13	; 19
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
      98:	0c 94 80 08 	jmp	0x1100	; 0x1100 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 */ 
 #include "Settings.h"
 #include "ADCVar.h"

 void ADC0_init(){
	 ADC0.CTRLA = ADC_ENABLE_bm; //adc enable
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	 ADC0.CTRLB = ADC_PRESC_DIV4_gc; // 20M / 4 = 5MHz ADC clock (MAX adc clock is 6M)
      a8:	81 83       	std	Z+1, r24	; 0x01
	 ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
      aa:	80 ea       	ldi	r24, 0xA0	; 160
      ac:	82 83       	std	Z+2, r24	; 0x02
	 ADC0.CTRLE = 0; //How long to take a one sample (ADC clock cycles) so it will take 0+ 0.5 = half cycle
      ae:	10 86       	std	Z+8, r1	; 0x08
	 ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc ; //samples:
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	81 87       	std	Z+9, r24	; 0x09
	 ADC0.COMMAND = ADC_MODE_BURST_SCALING_gc; // 1 sample
      b4:	80 e5       	ldi	r24, 0x50	; 80
      b6:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      b8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f7402>
      bc:	80 fd       	sbrc	r24, 0
      be:	fc cf       	rjmp	.-8      	; 0xb8 <ADC0_init+0x18>

 }
      c0:	08 95       	ret

000000c2 <ADC0_Read>:

 uint16_t ADC0_Read(){
	 ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
      c2:	e0 e0       	ldi	r30, 0x00	; 0
      c4:	f6 e0       	ldi	r31, 0x06	; 6
      c6:	82 85       	ldd	r24, Z+10	; 0x0a
      c8:	81 60       	ori	r24, 0x01	; 1
      ca:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      cc:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f7402>
      d0:	80 fd       	sbrc	r24, 0
      d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC0_Read+0xa>
	 while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm));
      d4:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f7401>
      d8:	81 ff       	sbrs	r24, 1
      da:	fc cf       	rjmp	.-8      	; 0xd4 <ADC0_Read+0x12>
	 ADC0.INTFLAGS = ADC_SAMPRDY_bm; //clear result ready flag
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f6 e0       	ldi	r31, 0x06	; 6
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	85 83       	std	Z+5, r24	; 0x05
	 return ADC0.SAMPLE; //return average ADC value of 1024 measurements
      e4:	84 89       	ldd	r24, Z+20	; 0x14
      e6:	95 89       	ldd	r25, Z+21	; 0x15
 }
      e8:	08 95       	ret

000000ea <ReadSolarCells>:


void ReadSolarCells(solarrcells_t channel){
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29

	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //selecting object where data will be saved according to selected channel (Voltage or Current)
      ee:	85 30       	cpi	r24, 0x05	; 5
      f0:	19 f4       	brne	.+6      	; 0xf8 <ReadSolarCells+0xe>
      f2:	c0 e0       	ldi	r28, 0x00	; 0
      f4:	d8 e3       	ldi	r29, 0x38	; 56
      f6:	02 c0       	rjmp	.+4      	; 0xfc <ReadSolarCells+0x12>
      f8:	c2 e0       	ldi	r28, 0x02	; 2
      fa:	d8 e3       	ldi	r29, 0x38	; 56

	ADC0.MUXPOS = channel;
      fc:	e0 e0       	ldi	r30, 0x00	; 0
      fe:	f6 e0       	ldi	r31, 0x06	; 6
     100:	84 87       	std	Z+12, r24	; 0x0c
	
	ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_1024MV_gc;  // 1.024V 
     102:	82 81       	ldd	r24, Z+2	; 0x02
     104:	88 7f       	andi	r24, 0xF8	; 248
     106:	84 60       	ori	r24, 0x04	; 4
     108:	82 83       	std	Z+2, r24	; 0x02
	if(ADC0_Read()>= 0xff0){ //if more or equal to 4080 ADC steps
     10a:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     10e:	80 3f       	cpi	r24, 0xF0	; 240
     110:	9f 40       	sbci	r25, 0x0F	; 15
     112:	08 f4       	brcc	.+2      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     114:	50 c0       	rjmp	.+160    	; 0x1b6 <__EEPROM_REGION_LENGTH__+0xb6>
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_2048MV_gc; //2.048V
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f6 e0       	ldi	r31, 0x06	; 6
     11a:	82 81       	ldd	r24, Z+2	; 0x02
     11c:	88 7f       	andi	r24, 0xF8	; 248
     11e:	85 60       	ori	r24, 0x05	; 5
     120:	82 83       	std	Z+2, r24	; 0x02
		if (ADC0_Read()>= 0xff0){
     122:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     126:	80 3f       	cpi	r24, 0xF0	; 240
     128:	9f 40       	sbci	r25, 0x0F	; 15
     12a:	98 f1       	brcs	.+102    	; 0x192 <__EEPROM_REGION_LENGTH__+0x92>
			ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_4096MV_gc; //4.096V
     12c:	e0 e0       	ldi	r30, 0x00	; 0
     12e:	f6 e0       	ldi	r31, 0x06	; 6
     130:	82 81       	ldd	r24, Z+2	; 0x02
     132:	87 60       	ori	r24, 0x07	; 7
     134:	82 83       	std	Z+2, r24	; 0x02
			if(ADC0_Read()>= 0xff0){
     136:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     13a:	80 3f       	cpi	r24, 0xF0	; 240
     13c:	9f 40       	sbci	r25, 0x0F	; 15
     13e:	b8 f0       	brcs	.+46     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
				ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_VDD_gc; //ref voltage is 5V (TMC1100a4 = 400mV/A min: 0.125A, max: 12A), sollar cells max is ScI 10.64A+-3% ~11A, 11 * 0.4 = 4.4V > 4.096Vref
     140:	e0 e0       	ldi	r30, 0x00	; 0
     142:	f6 e0       	ldi	r31, 0x06	; 6
     144:	82 81       	ldd	r24, Z+2	; 0x02
     146:	88 7f       	andi	r24, 0xF8	; 248
     148:	82 83       	std	Z+2, r24	; 0x02
				voltageORcurrent->Result = (float)ADC0_Read()/32.768; //Assume Vdd is 5.0V. 32.768 same as /327.68 * 10
     14a:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     14e:	bc 01       	movw	r22, r24
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 bb 04 	call	0x976	; 0x976 <__floatunsisf>
     158:	2f e6       	ldi	r18, 0x6F	; 111
     15a:	32 e1       	ldi	r19, 0x12	; 18
     15c:	43 e0       	ldi	r20, 0x03	; 3
     15e:	52 e4       	ldi	r21, 0x42	; 66
     160:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     164:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     168:	68 83       	st	Y, r22
     16a:	79 83       	std	Y+1, r23	; 0x01
     16c:	35 c0       	rjmp	.+106    	; 0x1d8 <__EEPROM_REGION_LENGTH__+0xd8>
			}
			else
			voltageORcurrent->Result = (float)ADC0_Read()/40;
     16e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     172:	bc 01       	movw	r22, r24
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 bb 04 	call	0x976	; 0x976 <__floatunsisf>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e2       	ldi	r20, 0x20	; 32
     182:	52 e4       	ldi	r21, 0x42	; 66
     184:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     188:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     18c:	68 83       	st	Y, r22
     18e:	79 83       	std	Y+1, r23	; 0x01
     190:	23 c0       	rjmp	.+70     	; 0x1d8 <__EEPROM_REGION_LENGTH__+0xd8>
		}
		else
		voltageORcurrent->Result = (float)ADC0_Read()/80;
     192:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     196:	bc 01       	movw	r22, r24
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 bb 04 	call	0x976	; 0x976 <__floatunsisf>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 ea       	ldi	r20, 0xA0	; 160
     1a6:	52 e4       	ldi	r21, 0x42	; 66
     1a8:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     1ac:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     1b0:	68 83       	st	Y, r22
     1b2:	79 83       	std	Y+1, r23	; 0x01
     1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <__EEPROM_REGION_LENGTH__+0xd8>
	}
	else
	voltageORcurrent->Result = (float)ADC0_Read()/160;  // Read ADC value, scale it, and round the result
     1b6:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     1ba:	bc 01       	movw	r22, r24
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 bb 04 	call	0x976	; 0x976 <__floatunsisf>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e2       	ldi	r20, 0x20	; 32
     1ca:	53 e4       	ldi	r21, 0x43	; 67
     1cc:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     1d0:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     1d4:	68 83       	st	Y, r22
     1d6:	79 83       	std	Y+1, r23	; 0x01
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	80 e6       	ldi	r24, 0x60	; 96
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 49 08 	call	0x1092	; 0x1092 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	81 e6       	ldi	r24, 0x61	; 97
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 49 08 	call	0x1092	; 0x1092 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
     1f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6e5f>
     1f6:	80 fd       	sbrc	r24, 0
     1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <CLOCK_INHF_clock_init+0x14>
     1fa:	08 95       	ret

000001fc <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     200:	8b 01       	movw	r16, r22
     202:	9c 01       	movw	r18, r24
     204:	0f 2e       	mov	r0, r31
     206:	fc e0       	ldi	r31, 0x0C	; 12
     208:	36 95       	lsr	r19
     20a:	27 95       	ror	r18
     20c:	17 95       	ror	r17
     20e:	07 95       	ror	r16
     210:	fa 95       	dec	r31
     212:	d1 f7       	brne	.-12     	; 0x208 <crc6_mt6701_lookup+0xc>
     214:	f0 2d       	mov	r31, r0
     216:	0f 73       	andi	r16, 0x3F	; 63
     218:	11 27       	eor	r17, r17
     21a:	22 27       	eor	r18, r18
     21c:	33 27       	eor	r19, r19
     21e:	f8 01       	movw	r30, r16
     220:	ec 5f       	subi	r30, 0xFC	; 252
     222:	fd 46       	sbci	r31, 0x6D	; 109
     224:	40 81       	ld	r20, Z
     226:	8b 01       	movw	r16, r22
     228:	9c 01       	movw	r18, r24
     22a:	68 94       	set
     22c:	15 f8       	bld	r1, 5
     22e:	36 95       	lsr	r19
     230:	27 95       	ror	r18
     232:	17 95       	ror	r17
     234:	07 95       	ror	r16
     236:	16 94       	lsr	r1
     238:	d1 f7       	brne	.-12     	; 0x22e <crc6_mt6701_lookup+0x32>
     23a:	0f 73       	andi	r16, 0x3F	; 63
     23c:	11 27       	eor	r17, r17
     23e:	22 27       	eor	r18, r18
     240:	33 27       	eor	r19, r19
     242:	04 27       	eor	r16, r20
     244:	f8 01       	movw	r30, r16
     246:	ec 5f       	subi	r30, 0xFC	; 252
     248:	fd 46       	sbci	r31, 0x6D	; 109
     24a:	20 81       	ld	r18, Z
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	8f 73       	andi	r24, 0x3F	; 63
     252:	99 27       	eor	r25, r25
     254:	aa 27       	eor	r26, r26
     256:	bb 27       	eor	r27, r27
     258:	82 27       	eor	r24, r18
     25a:	fc 01       	movw	r30, r24
     25c:	ec 5f       	subi	r30, 0xFC	; 252
     25e:	fd 46       	sbci	r31, 0x6D	; 109
}
     260:	80 81       	ld	r24, Z
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     268:	cf 93       	push	r28
     26a:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	a2 81       	ldd	r26, Z+2	; 0x02
     272:	b3 81       	ldd	r27, Z+3	; 0x03
     274:	c8 2f       	mov	r28, r24
     276:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	68 94       	set
     27e:	15 f8       	bld	r1, 5
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	77 95       	ror	r23
     286:	67 95       	ror	r22
     288:	16 94       	lsr	r1
     28a:	d1 f7       	brne	.-12     	; 0x280 <MT6701CRC+0x18>
     28c:	60 83       	st	Z, r22
     28e:	71 83       	std	Z+1, r23	; 0x01
     290:	82 83       	std	Z+2, r24	; 0x02
     292:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     294:	0e 94 fe 00 	call	0x1fc	; 0x1fc <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	c8 13       	cpse	r28, r24
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <MT6701CRC+0x38>
     29e:	90 e0       	ldi	r25, 0x00	; 0
}
     2a0:	89 2f       	mov	r24, r25
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     2a6:	2f 92       	push	r2
     2a8:	3f 92       	push	r3
     2aa:	4f 92       	push	r4
     2ac:	5f 92       	push	r5
     2ae:	6f 92       	push	r6
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	2b 97       	sbiw	r28, 0x0b	; 11
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	c2 2e       	mov	r12, r18
     2d6:	b3 2e       	mov	r11, r19
     2d8:	a4 2e       	mov	r10, r20
     2da:	95 2e       	mov	r9, r21
     2dc:	86 2e       	mov	r8, r22
     2de:	77 2e       	mov	r7, r23
     2e0:	68 2e       	mov	r6, r24
     2e2:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2e4:	f2 2e       	mov	r15, r18
     2e6:	03 2f       	mov	r16, r19
     2e8:	14 2f       	mov	r17, r20
     2ea:	5a 87       	std	Y+10, r21	; 0x0a
     2ec:	69 83       	std	Y+1, r22	; 0x01
     2ee:	b7 2f       	mov	r27, r23
     2f0:	d8 2e       	mov	r13, r24
     2f2:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     2f4:	e0 e0       	ldi	r30, 0x00	; 0
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     2f8:	14 c0       	rjmp	.+40     	; 0x322 <crc8_cdma2000+0x7c>
        length++;
     2fa:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     2fc:	2f 2d       	mov	r18, r15
     2fe:	30 2f       	mov	r19, r16
     300:	41 2f       	mov	r20, r17
     302:	5a 85       	ldd	r21, Y+10	; 0x0a
     304:	69 81       	ldd	r22, Y+1	; 0x01
     306:	7b 2f       	mov	r23, r27
     308:	8d 2d       	mov	r24, r13
     30a:	9e 2d       	mov	r25, r14
     30c:	08 e0       	ldi	r16, 0x08	; 8
     30e:	0e 94 64 05 	call	0xac8	; 0xac8 <__lshrdi3>
     312:	f2 2e       	mov	r15, r18
     314:	03 2f       	mov	r16, r19
     316:	14 2f       	mov	r17, r20
     318:	5a 87       	std	Y+10, r21	; 0x0a
     31a:	69 83       	std	Y+1, r22	; 0x01
     31c:	b7 2f       	mov	r27, r23
     31e:	d8 2e       	mov	r13, r24
     320:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     322:	2f 2d       	mov	r18, r15
     324:	30 2f       	mov	r19, r16
     326:	41 2f       	mov	r20, r17
     328:	5a 85       	ldd	r21, Y+10	; 0x0a
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7b 2f       	mov	r23, r27
     32e:	8d 2d       	mov	r24, r13
     330:	9e 2d       	mov	r25, r14
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	0e 94 80 05 	call	0xb00	; 0xb00 <__cmpdi2_s8>
     338:	01 f7       	brne	.-64     	; 0x2fa <crc8_cdma2000+0x54>
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	8a 87       	std	Y+10, r24	; 0x0a
     33e:	cb 86       	std	Y+11, r12	; 0x0b
     340:	b9 82       	std	Y+1, r11	; 0x01
     342:	4a 2c       	mov	r4, r10
     344:	39 2c       	mov	r3, r9
     346:	28 2c       	mov	r2, r8
     348:	1a c0       	rjmp	.+52     	; 0x37e <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     34a:	8d 01       	movw	r16, r26
     34c:	00 0f       	add	r16, r16
     34e:	11 1f       	adc	r17, r17
     350:	00 0f       	add	r16, r16
     352:	11 1f       	adc	r17, r17
     354:	00 0f       	add	r16, r16
     356:	11 1f       	adc	r17, r17
     358:	2b 85       	ldd	r18, Y+11	; 0x0b
     35a:	39 81       	ldd	r19, Y+1	; 0x01
     35c:	44 2d       	mov	r20, r4
     35e:	53 2d       	mov	r21, r3
     360:	62 2d       	mov	r22, r2
     362:	77 2d       	mov	r23, r7
     364:	86 2d       	mov	r24, r6
     366:	95 2d       	mov	r25, r5
     368:	0e 94 64 05 	call	0xac8	; 0xac8 <__lshrdi3>
     36c:	8a 84       	ldd	r8, Y+10	; 0x0a
     36e:	82 26       	eor	r8, r18
     370:	91 2c       	mov	r9, r1
     372:	f4 01       	movw	r30, r8
     374:	ec 5f       	subi	r30, 0xFC	; 252
     376:	fe 46       	sbci	r31, 0x6E	; 110
     378:	80 81       	ld	r24, Z
     37a:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     37c:	fd 01       	movw	r30, r26
     37e:	df 01       	movw	r26, r30
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	ef 2b       	or	r30, r31
     384:	11 f7       	brne	.-60     	; 0x34a <crc8_cdma2000+0xa4>
     386:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     388:	2b 96       	adiw	r28, 0x0b	; 11
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	7f 90       	pop	r7
     3a8:	6f 90       	pop	r6
     3aa:	5f 90       	pop	r5
     3ac:	4f 90       	pop	r4
     3ae:	3f 90       	pop	r3
     3b0:	2f 90       	pop	r2
     3b2:	08 95       	ret

000003b4 <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     3b4:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f73de>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     3b8:	e0 e2       	ldi	r30, 0x20	; 32
     3ba:	f4 e0       	ldi	r31, 0x04	; 4
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
     3c8:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     3ca:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     3cc:	e0 e0       	ldi	r30, 0x00	; 0
     3ce:	f4 e0       	ldi	r31, 0x04	; 4
     3d0:	92 ec       	ldi	r25, 0xC2	; 194
     3d2:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
     3d4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     3da:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     3dc:	80 ec       	ldi	r24, 0xC0	; 192
     3de:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
     3e0:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
     3e2:	95 8b       	std	Z+21, r25	; 0x15
     3e4:	08 95       	ret

000003e6 <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
     3e6:	0e 94 ef 00 	call	0x1de	; 0x1de <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
     3ea:	0e 94 da 01 	call	0x3b4	; 0x3b4 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     3ee:	0e 94 28 03 	call	0x650	; 0x650 <USART0_init>
	USART1_init();
     3f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <USART1_init>
	ADC0_init();
     3f6:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	0e 94 9b 02 	call	0x536	; 0x536 <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	0e 94 9b 02 	call	0x536	; 0x536 <MT6701_SSI_Angle>
		ReadSolarCells(Voltage);
     406:	85 e0       	ldi	r24, 0x05	; 5
     408:	0e 94 75 00 	call	0xea	; 0xea <ReadSolarCells>
		ReadSolarCells(Current);
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0e 94 75 00 	call	0xea	; 0xea <ReadSolarCells>
		uint8_t y = YEndSwitches();
     412:	0e 94 9f 03 	call	0x73e	; 0x73e <YEndSwitches>
     416:	d8 2e       	mov	r13, r24
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;
     418:	ca e0       	ldi	r28, 0x0A	; 10
     41a:	d8 e3       	ldi	r29, 0x38	; 56
     41c:	48 81       	ld	r20, Y
     41e:	59 81       	ldd	r21, Y+1	; 0x01
     420:	24 2f       	mov	r18, r20
     422:	35 2f       	mov	r19, r21
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	08 e2       	ldi	r16, 0x28	; 40
     432:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashldi3>
     436:	72 2e       	mov	r7, r18
     438:	e3 2f       	mov	r30, r19
     43a:	84 2e       	mov	r8, r20
     43c:	95 2e       	mov	r9, r21
     43e:	a6 2e       	mov	r10, r22
     440:	17 2f       	mov	r17, r23
     442:	68 2e       	mov	r6, r24
     444:	f9 2f       	mov	r31, r25
     446:	0f 2e       	mov	r0, r31
     448:	f4 e0       	ldi	r31, 0x04	; 4
     44a:	ef 2e       	mov	r14, r31
     44c:	f8 e3       	ldi	r31, 0x38	; 56
     44e:	ff 2e       	mov	r15, r31
     450:	f0 2d       	mov	r31, r0
     452:	d7 01       	movw	r26, r14
     454:	8d 91       	ld	r24, X+
     456:	9c 91       	ld	r25, X
     458:	ac 01       	movw	r20, r24
     45a:	24 2f       	mov	r18, r20
     45c:	35 2f       	mov	r19, r21
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 e1       	ldi	r16, 0x18	; 24
     46c:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashldi3>
     470:	c2 2e       	mov	r12, r18
     472:	e3 2b       	or	r30, r19
     474:	84 2a       	or	r8, r20
     476:	95 2a       	or	r9, r21
     478:	a6 2a       	or	r10, r22
     47a:	b1 2e       	mov	r11, r17
     47c:	b7 2a       	or	r11, r23
     47e:	00 91 00 38 	lds	r16, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     482:	10 91 01 38 	lds	r17, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	0f 2e       	mov	r0, r31
     48c:	fc e0       	ldi	r31, 0x0C	; 12
     48e:	00 0f       	add	r16, r16
     490:	11 1f       	adc	r17, r17
     492:	22 1f       	adc	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	fa 95       	dec	r31
     498:	d1 f7       	brne	.-12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     49a:	f0 2d       	mov	r31, r0
     49c:	b7 2d       	mov	r27, r7
     49e:	bc 29       	or	r27, r12
     4a0:	e1 2b       	or	r30, r17
     4a2:	82 2a       	or	r8, r18
     4a4:	93 2a       	or	r9, r19
     4a6:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <ReadCurrent>
     4aa:	10 91 03 38 	lds	r17, 0x3803	; 0x803803 <ReadCurrent+0x1>
     4ae:	02 95       	swap	r16
     4b0:	12 95       	swap	r17
     4b2:	10 7f       	andi	r17, 0xF0	; 240
     4b4:	10 27       	eor	r17, r16
     4b6:	00 7f       	andi	r16, 0xF0	; 240
     4b8:	10 27       	eor	r17, r16
     4ba:	b0 2b       	or	r27, r16
     4bc:	31 2f       	mov	r19, r17
     4be:	3e 2b       	or	r19, r30
     4c0:	2b 2f       	mov	r18, r27
     4c2:	2d 29       	or	r18, r13
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint8_t)ReadCurrent.Result,            ///< Current (2 digits)
		        (uint8_t)y,            ///< End switch status (1 digit)
		        (uint8_t)crc8_cdma2000(combined)); ///< CRC value (1 byte)
     4c4:	48 2d       	mov	r20, r8
     4c6:	59 2d       	mov	r21, r9
     4c8:	6a 2d       	mov	r22, r10
     4ca:	7b 2d       	mov	r23, r11
     4cc:	86 29       	or	r24, r6
     4ce:	9f 2b       	or	r25, r31
     4d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint8_t)ReadCurrent.Result,            ///< Current (2 digits)
     4d4:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <ReadCurrent>
     4d8:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <ReadCurrent+0x1>

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     4dc:	e0 91 00 38 	lds	r30, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     4e0:	f0 91 01 38 	lds	r31, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     4e4:	d7 01       	movw	r26, r14
     4e6:	6c 91       	ld	r22, X
     4e8:	11 96       	adiw	r26, 0x01	; 1
     4ea:	7c 91       	ld	r23, X
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     4ec:	48 81       	ld	r20, Y
     4ee:	59 81       	ldd	r21, Y+1	; 0x01
		uint8_t y = YEndSwitches();
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	1f 92       	push	r1
     4f6:	df 92       	push	r13
     4f8:	c9 01       	movw	r24, r18
     4fa:	99 27       	eor	r25, r25
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	ff 93       	push	r31
     502:	ef 93       	push	r30
     504:	7f 93       	push	r23
     506:	6f 93       	push	r22
     508:	5f 93       	push	r21
     50a:	4f 93       	push	r20
     50c:	84 e4       	ldi	r24, 0x44	; 68
     50e:	92 e9       	ldi	r25, 0x92	; 146
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	0e 94 81 03 	call	0x702	; 0x702 <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     518:	bf e7       	ldi	r27, 0x7F	; 127
     51a:	2a e1       	ldi	r18, 0x1A	; 26
     51c:	86 e0       	ldi	r24, 0x06	; 6
     51e:	b1 50       	subi	r27, 0x01	; 1
     520:	20 40       	sbci	r18, 0x00	; 0
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     526:	00 c0       	rjmp	.+0      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     528:	00 00       	nop
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	1e 96       	adiw	r26, 0x0e	; 14
     530:	ad bf       	out	0x3d, r26	; 61
     532:	be bf       	out	0x3e, r27	; 62
     534:	62 cf       	rjmp	.-316    	; 0x3fa <main+0x14>

00000536 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <MT6701_SSI_Angle+0xa>
     540:	00 d0       	rcall	.+0      	; 0x542 <MT6701_SSI_Angle+0xc>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     548:	19 82       	std	Y+1, r1	; 0x01
     54a:	1a 82       	std	Y+2, r1	; 0x02
     54c:	1b 82       	std	Y+3, r1	; 0x03
     54e:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     550:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f7202>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	24 c0       	rjmp	.+72     	; 0x5a0 <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     558:	8f e6       	ldi	r24, 0x6F	; 111
     55a:	0e 94 33 03 	call	0x666	; 0x666 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     55e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f7600>
     562:	86 ff       	sbrs	r24, 6
     564:	fc cf       	rjmp	.-8      	; 0x55e <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	f8 e0       	ldi	r31, 0x08	; 8
     56a:	84 81       	ldd	r24, Z+4	; 0x04
     56c:	80 64       	ori	r24, 0x40	; 64
     56e:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	ab 81       	ldd	r26, Y+3	; 0x03
     576:	bc 81       	ldd	r27, Y+4	; 0x04
     578:	ba 2f       	mov	r27, r26
     57a:	a9 2f       	mov	r26, r25
     57c:	98 2f       	mov	r25, r24
     57e:	88 27       	eor	r24, r24
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	9a 83       	std	Y+2, r25	; 0x02
     584:	ab 83       	std	Y+3, r26	; 0x03
     586:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     588:	0e 94 3a 03 	call	0x674	; 0x674 <USART0_readChar>
     58c:	49 81       	ldd	r20, Y+1	; 0x01
     58e:	5a 81       	ldd	r21, Y+2	; 0x02
     590:	6b 81       	ldd	r22, Y+3	; 0x03
     592:	7c 81       	ldd	r23, Y+4	; 0x04
     594:	48 2b       	or	r20, r24
     596:	49 83       	std	Y+1, r20	; 0x01
     598:	5a 83       	std	Y+2, r21	; 0x02
     59a:	6b 83       	std	Y+3, r22	; 0x03
     59c:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     59e:	1f 5f       	subi	r17, 0xFF	; 255
     5a0:	13 30       	cpi	r17, 0x03	; 3
     5a2:	d0 f2       	brcs	.-76     	; 0x558 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     5a4:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f7201>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     5a8:	00 38       	cpi	r16, 0x80	; 128
     5aa:	19 f4       	brne	.+6      	; 0x5b2 <MT6701_SSI_Angle+0x7c>
     5ac:	0a e0       	ldi	r16, 0x0A	; 10
     5ae:	18 e3       	ldi	r17, 0x38	; 56
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <MT6701_SSI_Angle+0x80>
     5b2:	04 e0       	ldi	r16, 0x04	; 4
     5b4:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	0e 94 34 01 	call	0x268	; 0x268 <MT6701CRC>
     5be:	f8 01       	movw	r30, r16
     5c0:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	83 70       	andi	r24, 0x03	; 3
     5c6:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	ab 81       	ldd	r26, Y+3	; 0x03
     5ce:	bc 81       	ldd	r27, Y+4	; 0x04
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	b6 95       	lsr	r27
     5da:	a7 95       	ror	r26
     5dc:	97 95       	ror	r25
     5de:	87 95       	ror	r24
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	9a 81       	ldd	r25, Y+2	; 0x02
     5e8:	ab 81       	ldd	r26, Y+3	; 0x03
     5ea:	bc 81       	ldd	r27, Y+4	; 0x04
     5ec:	ac 01       	movw	r20, r24
     5ee:	bd 01       	movw	r22, r26
     5f0:	68 94       	set
     5f2:	12 f8       	bld	r1, 2
     5f4:	76 95       	lsr	r23
     5f6:	67 95       	ror	r22
     5f8:	57 95       	ror	r21
     5fa:	47 95       	ror	r20
     5fc:	16 94       	lsr	r1
     5fe:	d1 f7       	brne	.-12     	; 0x5f4 <MT6701_SSI_Angle+0xbe>
     600:	24 2f       	mov	r18, r20
     602:	21 70       	andi	r18, 0x01	; 1
     604:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	68 94       	set
     60c:	13 f8       	bld	r1, 3
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	77 95       	ror	r23
     614:	67 95       	ror	r22
     616:	16 94       	lsr	r1
     618:	d1 f7       	brne	.-12     	; 0x60e <MT6701_SSI_Angle+0xd8>
     61a:	0e 94 bb 04 	call	0x976	; 0x976 <__floatunsisf>
     61e:	23 e5       	ldi	r18, 0x53	; 83
     620:	34 e0       	ldi	r19, 0x04	; 4
     622:	49 ee       	ldi	r20, 0xE9	; 233
     624:	5e e3       	ldi	r21, 0x3E	; 62
     626:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	5f e3       	ldi	r21, 0x3F	; 63
     632:	0e 94 ae 03 	call	0x75c	; 0x75c <__addsf3>
     636:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     63a:	f8 01       	movw	r30, r16
     63c:	60 83       	st	Z, r22
     63e:	71 83       	std	Z+1, r23	; 0x01
     640:	24 96       	adiw	r28, 0x04	; 4
     642:	cd bf       	out	0x3d, r28	; 61
     644:	de bf       	out	0x3e, r29	; 62
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     650:	e0 e0       	ldi	r30, 0x00	; 0
     652:	f8 e0       	ldi	r31, 0x08	; 8
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	95 e0       	ldi	r25, 0x05	; 5
     658:	80 87       	std	Z+8, r24	; 0x08
     65a:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     65c:	80 ec       	ldi	r24, 0xC0	; 192
     65e:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     660:	82 ec       	ldi	r24, 0xC2	; 194
     662:	87 83       	std	Z+7, r24	; 0x07
     664:	08 95       	ret

00000666 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     666:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f7600>
     66a:	95 ff       	sbrs	r25, 5
     66c:	fc cf       	rjmp	.-8      	; 0x666 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     66e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f75fe>
     672:	08 95       	ret

00000674 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f7600>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     67a:	80 e4       	ldi	r24, 0x40	; 64
     67c:	9c e9       	ldi	r25, 0x9C	; 156
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     682:	08 c0       	rjmp	.+16     	; 0x694 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	a1 09       	sbc	r26, r1
     688:	b1 09       	sbc	r27, r1
     68a:	21 f4       	brne	.+8      	; 0x694 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
     692:	04 c0       	rjmp	.+8      	; 0x69c <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     694:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f7600>
     698:	22 23       	and	r18, r18
     69a:	a4 f7       	brge	.-24     	; 0x684 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     69c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f75fc>
}
     6a0:	08 95       	ret

000006a2 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     6a2:	e0 e2       	ldi	r30, 0x20	; 32
     6a4:	f8 e0       	ldi	r31, 0x08	; 8
     6a6:	80 e4       	ldi	r24, 0x40	; 64
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	80 87       	std	Z+8, r24	; 0x08
     6ac:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     6ae:	82 e4       	ldi	r24, 0x42	; 66
     6b0:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	87 83       	std	Z+7, r24	; 0x07
     6b6:	08 95       	ret

000006b8 <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     6b8:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f7620>
     6bc:	95 ff       	sbrs	r25, 5
     6be:	fc cf       	rjmp	.-8      	; 0x6b8 <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     6c0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f761e>
     6c4:	08 95       	ret

000006c6 <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
     6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     6d6:	f8 01       	movw	r30, r16
     6d8:	ec 0f       	add	r30, r28
     6da:	fd 1f       	adc	r31, r29
     6dc:	80 81       	ld	r24, Z
     6de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	f8 01       	movw	r30, r16
     6e6:	01 90       	ld	r0, Z+
     6e8:	00 20       	and	r0, r0
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <USART1_sendString+0x20>
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	e0 1b       	sub	r30, r16
     6f0:	f1 0b       	sbc	r31, r17
     6f2:	ce 17       	cp	r28, r30
     6f4:	df 07       	cpc	r29, r31
     6f6:	78 f3       	brcs	.-34     	; 0x6d6 <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	6e 97       	sbiw	r28, 0x1e	; 30
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	de bf       	out	0x3e, r29	; 62
     710:	9e 01       	movw	r18, r28
     712:	2d 5d       	subi	r18, 0xDD	; 221
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	f9 01       	movw	r30, r18
     718:	41 91       	ld	r20, Z+
     71a:	51 91       	ld	r21, Z+
     71c:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     71e:	6e e1       	ldi	r22, 0x1E	; 30
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 8c 05 	call	0xb18	; 0xb18 <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <USART1_sendString>
     732:	6e 96       	adiw	r28, 0x1e	; 30
     734:	cd bf       	out	0x3d, r28	; 61
     736:	de bf       	out	0x3e, r29	; 62
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
     73e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f7224>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	89 27       	eor	r24, r25
     746:	81 70       	andi	r24, 0x01	; 1
     748:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f7204>
     74c:	92 fd       	sbrc	r25, 2
     74e:	02 c0       	rjmp	.+4      	; 0x754 <YEndSwitches+0x16>
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	01 c0       	rjmp	.+2      	; 0x756 <YEndSwitches+0x18>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	89 2b       	or	r24, r25
     758:	08 95       	ret

0000075a <__subsf3>:
     75a:	50 58       	subi	r21, 0x80	; 128

0000075c <__addsf3>:
     75c:	bb 27       	eor	r27, r27
     75e:	aa 27       	eor	r26, r26
     760:	0e 94 c5 03 	call	0x78a	; 0x78a <__addsf3x>
     764:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_round>
     768:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_pscA>
     76c:	38 f0       	brcs	.+14     	; 0x77c <__addsf3+0x20>
     76e:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscB>
     772:	20 f0       	brcs	.+8      	; 0x77c <__addsf3+0x20>
     774:	39 f4       	brne	.+14     	; 0x784 <__addsf3+0x28>
     776:	9f 3f       	cpi	r25, 0xFF	; 255
     778:	19 f4       	brne	.+6      	; 0x780 <__addsf3+0x24>
     77a:	26 f4       	brtc	.+8      	; 0x784 <__addsf3+0x28>
     77c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_nan>
     780:	0e f4       	brtc	.+2      	; 0x784 <__addsf3+0x28>
     782:	e0 95       	com	r30
     784:	e7 fb       	bst	r30, 7
     786:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_inf>

0000078a <__addsf3x>:
     78a:	e9 2f       	mov	r30, r25
     78c:	0e 94 20 05 	call	0xa40	; 0xa40 <__fp_split3>
     790:	58 f3       	brcs	.-42     	; 0x768 <__addsf3+0xc>
     792:	ba 17       	cp	r27, r26
     794:	62 07       	cpc	r22, r18
     796:	73 07       	cpc	r23, r19
     798:	84 07       	cpc	r24, r20
     79a:	95 07       	cpc	r25, r21
     79c:	20 f0       	brcs	.+8      	; 0x7a6 <__addsf3x+0x1c>
     79e:	79 f4       	brne	.+30     	; 0x7be <__addsf3x+0x34>
     7a0:	a6 f5       	brtc	.+104    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7a2:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__fp_zero>
     7a6:	0e f4       	brtc	.+2      	; 0x7aa <__addsf3x+0x20>
     7a8:	e0 95       	com	r30
     7aa:	0b 2e       	mov	r0, r27
     7ac:	ba 2f       	mov	r27, r26
     7ae:	a0 2d       	mov	r26, r0
     7b0:	0b 01       	movw	r0, r22
     7b2:	b9 01       	movw	r22, r18
     7b4:	90 01       	movw	r18, r0
     7b6:	0c 01       	movw	r0, r24
     7b8:	ca 01       	movw	r24, r20
     7ba:	a0 01       	movw	r20, r0
     7bc:	11 24       	eor	r1, r1
     7be:	ff 27       	eor	r31, r31
     7c0:	59 1b       	sub	r21, r25
     7c2:	99 f0       	breq	.+38     	; 0x7ea <__addsf3x+0x60>
     7c4:	59 3f       	cpi	r21, 0xF9	; 249
     7c6:	50 f4       	brcc	.+20     	; 0x7dc <__addsf3x+0x52>
     7c8:	50 3e       	cpi	r21, 0xE0	; 224
     7ca:	68 f1       	brcs	.+90     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     7cc:	1a 16       	cp	r1, r26
     7ce:	f0 40       	sbci	r31, 0x00	; 0
     7d0:	a2 2f       	mov	r26, r18
     7d2:	23 2f       	mov	r18, r19
     7d4:	34 2f       	mov	r19, r20
     7d6:	44 27       	eor	r20, r20
     7d8:	58 5f       	subi	r21, 0xF8	; 248
     7da:	f3 cf       	rjmp	.-26     	; 0x7c2 <__addsf3x+0x38>
     7dc:	46 95       	lsr	r20
     7de:	37 95       	ror	r19
     7e0:	27 95       	ror	r18
     7e2:	a7 95       	ror	r26
     7e4:	f0 40       	sbci	r31, 0x00	; 0
     7e6:	53 95       	inc	r21
     7e8:	c9 f7       	brne	.-14     	; 0x7dc <__addsf3x+0x52>
     7ea:	7e f4       	brtc	.+30     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7ec:	1f 16       	cp	r1, r31
     7ee:	ba 0b       	sbc	r27, r26
     7f0:	62 0b       	sbc	r22, r18
     7f2:	73 0b       	sbc	r23, r19
     7f4:	84 0b       	sbc	r24, r20
     7f6:	ba f0       	brmi	.+46     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     7f8:	91 50       	subi	r25, 0x01	; 1
     7fa:	a1 f0       	breq	.+40     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     7fc:	ff 0f       	add	r31, r31
     7fe:	bb 1f       	adc	r27, r27
     800:	66 1f       	adc	r22, r22
     802:	77 1f       	adc	r23, r23
     804:	88 1f       	adc	r24, r24
     806:	c2 f7       	brpl	.-16     	; 0x7f8 <__addsf3x+0x6e>
     808:	0e c0       	rjmp	.+28     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     80a:	ba 0f       	add	r27, r26
     80c:	62 1f       	adc	r22, r18
     80e:	73 1f       	adc	r23, r19
     810:	84 1f       	adc	r24, r20
     812:	48 f4       	brcc	.+18     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     814:	87 95       	ror	r24
     816:	77 95       	ror	r23
     818:	67 95       	ror	r22
     81a:	b7 95       	ror	r27
     81c:	f7 95       	ror	r31
     81e:	9e 3f       	cpi	r25, 0xFE	; 254
     820:	08 f0       	brcs	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	b0 cf       	rjmp	.-160    	; 0x784 <__addsf3+0x28>
     824:	93 95       	inc	r25
     826:	88 0f       	add	r24, r24
     828:	08 f0       	brcs	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	99 27       	eor	r25, r25
     82c:	ee 0f       	add	r30, r30
     82e:	97 95       	ror	r25
     830:	87 95       	ror	r24
     832:	08 95       	ret

00000834 <__divsf3>:
     834:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3x>
     838:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_round>
     83c:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscB>
     840:	58 f0       	brcs	.+22     	; 0x858 <__divsf3+0x24>
     842:	0e 94 01 05 	call	0xa02	; 0xa02 <__fp_pscA>
     846:	40 f0       	brcs	.+16     	; 0x858 <__divsf3+0x24>
     848:	29 f4       	brne	.+10     	; 0x854 <__divsf3+0x20>
     84a:	5f 3f       	cpi	r21, 0xFF	; 255
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x24>
     84e:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_inf>
     852:	51 11       	cpse	r21, r1
     854:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_szero>
     858:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_nan>

0000085c <__divsf3x>:
     85c:	0e 94 20 05 	call	0xa40	; 0xa40 <__fp_split3>
     860:	68 f3       	brcs	.-38     	; 0x83c <__divsf3+0x8>

00000862 <__divsf3_pse>:
     862:	99 23       	and	r25, r25
     864:	b1 f3       	breq	.-20     	; 0x852 <__divsf3+0x1e>
     866:	55 23       	and	r21, r21
     868:	91 f3       	breq	.-28     	; 0x84e <__divsf3+0x1a>
     86a:	95 1b       	sub	r25, r21
     86c:	55 0b       	sbc	r21, r21
     86e:	bb 27       	eor	r27, r27
     870:	aa 27       	eor	r26, r26
     872:	62 17       	cp	r22, r18
     874:	73 07       	cpc	r23, r19
     876:	84 07       	cpc	r24, r20
     878:	38 f0       	brcs	.+14     	; 0x888 <__divsf3_pse+0x26>
     87a:	9f 5f       	subi	r25, 0xFF	; 255
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	44 1f       	adc	r20, r20
     884:	aa 1f       	adc	r26, r26
     886:	a9 f3       	breq	.-22     	; 0x872 <__divsf3_pse+0x10>
     888:	35 d0       	rcall	.+106    	; 0x8f4 <__divsf3_pse+0x92>
     88a:	0e 2e       	mov	r0, r30
     88c:	3a f0       	brmi	.+14     	; 0x89c <__divsf3_pse+0x3a>
     88e:	e0 e8       	ldi	r30, 0x80	; 128
     890:	32 d0       	rcall	.+100    	; 0x8f6 <__divsf3_pse+0x94>
     892:	91 50       	subi	r25, 0x01	; 1
     894:	50 40       	sbci	r21, 0x00	; 0
     896:	e6 95       	lsr	r30
     898:	00 1c       	adc	r0, r0
     89a:	ca f7       	brpl	.-14     	; 0x88e <__divsf3_pse+0x2c>
     89c:	2b d0       	rcall	.+86     	; 0x8f4 <__divsf3_pse+0x92>
     89e:	fe 2f       	mov	r31, r30
     8a0:	29 d0       	rcall	.+82     	; 0x8f4 <__divsf3_pse+0x92>
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	88 1f       	adc	r24, r24
     8a8:	bb 1f       	adc	r27, r27
     8aa:	26 17       	cp	r18, r22
     8ac:	37 07       	cpc	r19, r23
     8ae:	48 07       	cpc	r20, r24
     8b0:	ab 07       	cpc	r26, r27
     8b2:	b0 e8       	ldi	r27, 0x80	; 128
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <__divsf3_pse+0x56>
     8b6:	bb 0b       	sbc	r27, r27
     8b8:	80 2d       	mov	r24, r0
     8ba:	bf 01       	movw	r22, r30
     8bc:	ff 27       	eor	r31, r31
     8be:	93 58       	subi	r25, 0x83	; 131
     8c0:	5f 4f       	sbci	r21, 0xFF	; 255
     8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x70>
     8c4:	9e 3f       	cpi	r25, 0xFE	; 254
     8c6:	51 05       	cpc	r21, r1
     8c8:	78 f0       	brcs	.+30     	; 0x8e8 <__divsf3_pse+0x86>
     8ca:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_inf>
     8ce:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_szero>
     8d2:	5f 3f       	cpi	r21, 0xFF	; 255
     8d4:	e4 f3       	brlt	.-8      	; 0x8ce <__divsf3_pse+0x6c>
     8d6:	98 3e       	cpi	r25, 0xE8	; 232
     8d8:	d4 f3       	brlt	.-12     	; 0x8ce <__divsf3_pse+0x6c>
     8da:	86 95       	lsr	r24
     8dc:	77 95       	ror	r23
     8de:	67 95       	ror	r22
     8e0:	b7 95       	ror	r27
     8e2:	f7 95       	ror	r31
     8e4:	9f 5f       	subi	r25, 0xFF	; 255
     8e6:	c9 f7       	brne	.-14     	; 0x8da <__divsf3_pse+0x78>
     8e8:	88 0f       	add	r24, r24
     8ea:	91 1d       	adc	r25, r1
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	97 f9       	bld	r25, 7
     8f2:	08 95       	ret
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	88 1f       	adc	r24, r24
     8fc:	bb 1f       	adc	r27, r27
     8fe:	62 17       	cp	r22, r18
     900:	73 07       	cpc	r23, r19
     902:	84 07       	cpc	r24, r20
     904:	ba 07       	cpc	r27, r26
     906:	20 f0       	brcs	.+8      	; 0x910 <__divsf3_pse+0xae>
     908:	62 1b       	sub	r22, r18
     90a:	73 0b       	sbc	r23, r19
     90c:	84 0b       	sbc	r24, r20
     90e:	ba 0b       	sbc	r27, r26
     910:	ee 1f       	adc	r30, r30
     912:	88 f7       	brcc	.-30     	; 0x8f6 <__divsf3_pse+0x94>
     914:	e0 95       	com	r30
     916:	08 95       	ret

00000918 <__fixunssfsi>:
     918:	0e 94 28 05 	call	0xa50	; 0xa50 <__fp_splitA>
     91c:	88 f0       	brcs	.+34     	; 0x940 <__fixunssfsi+0x28>
     91e:	9f 57       	subi	r25, 0x7F	; 127
     920:	98 f0       	brcs	.+38     	; 0x948 <__fixunssfsi+0x30>
     922:	b9 2f       	mov	r27, r25
     924:	99 27       	eor	r25, r25
     926:	b7 51       	subi	r27, 0x17	; 23
     928:	b0 f0       	brcs	.+44     	; 0x956 <__fixunssfsi+0x3e>
     92a:	e1 f0       	breq	.+56     	; 0x964 <__fixunssfsi+0x4c>
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	88 1f       	adc	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	1a f0       	brmi	.+6      	; 0x93c <__fixunssfsi+0x24>
     936:	ba 95       	dec	r27
     938:	c9 f7       	brne	.-14     	; 0x92c <__fixunssfsi+0x14>
     93a:	14 c0       	rjmp	.+40     	; 0x964 <__fixunssfsi+0x4c>
     93c:	b1 30       	cpi	r27, 0x01	; 1
     93e:	91 f0       	breq	.+36     	; 0x964 <__fixunssfsi+0x4c>
     940:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_zero>
     944:	b1 e0       	ldi	r27, 0x01	; 1
     946:	08 95       	ret
     948:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__fp_zero>
     94c:	67 2f       	mov	r22, r23
     94e:	78 2f       	mov	r23, r24
     950:	88 27       	eor	r24, r24
     952:	b8 5f       	subi	r27, 0xF8	; 248
     954:	39 f0       	breq	.+14     	; 0x964 <__fixunssfsi+0x4c>
     956:	b9 3f       	cpi	r27, 0xF9	; 249
     958:	cc f3       	brlt	.-14     	; 0x94c <__fixunssfsi+0x34>
     95a:	86 95       	lsr	r24
     95c:	77 95       	ror	r23
     95e:	67 95       	ror	r22
     960:	b3 95       	inc	r27
     962:	d9 f7       	brne	.-10     	; 0x95a <__fixunssfsi+0x42>
     964:	3e f4       	brtc	.+14     	; 0x974 <__fixunssfsi+0x5c>
     966:	90 95       	com	r25
     968:	80 95       	com	r24
     96a:	70 95       	com	r23
     96c:	61 95       	neg	r22
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	8f 4f       	sbci	r24, 0xFF	; 255
     972:	9f 4f       	sbci	r25, 0xFF	; 255
     974:	08 95       	ret

00000976 <__floatunsisf>:
     976:	e8 94       	clt
     978:	09 c0       	rjmp	.+18     	; 0x98c <__floatsisf+0x12>

0000097a <__floatsisf>:
     97a:	97 fb       	bst	r25, 7
     97c:	3e f4       	brtc	.+14     	; 0x98c <__floatsisf+0x12>
     97e:	90 95       	com	r25
     980:	80 95       	com	r24
     982:	70 95       	com	r23
     984:	61 95       	neg	r22
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	8f 4f       	sbci	r24, 0xFF	; 255
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	99 23       	and	r25, r25
     98e:	a9 f0       	breq	.+42     	; 0x9ba <__floatsisf+0x40>
     990:	f9 2f       	mov	r31, r25
     992:	96 e9       	ldi	r25, 0x96	; 150
     994:	bb 27       	eor	r27, r27
     996:	93 95       	inc	r25
     998:	f6 95       	lsr	r31
     99a:	87 95       	ror	r24
     99c:	77 95       	ror	r23
     99e:	67 95       	ror	r22
     9a0:	b7 95       	ror	r27
     9a2:	f1 11       	cpse	r31, r1
     9a4:	f8 cf       	rjmp	.-16     	; 0x996 <__floatsisf+0x1c>
     9a6:	fa f4       	brpl	.+62     	; 0x9e6 <__floatsisf+0x6c>
     9a8:	bb 0f       	add	r27, r27
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <__floatsisf+0x36>
     9ac:	60 ff       	sbrs	r22, 0
     9ae:	1b c0       	rjmp	.+54     	; 0x9e6 <__floatsisf+0x6c>
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	8f 4f       	sbci	r24, 0xFF	; 255
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <__floatsisf+0x6c>
     9ba:	88 23       	and	r24, r24
     9bc:	11 f0       	breq	.+4      	; 0x9c2 <__floatsisf+0x48>
     9be:	96 e9       	ldi	r25, 0x96	; 150
     9c0:	11 c0       	rjmp	.+34     	; 0x9e4 <__floatsisf+0x6a>
     9c2:	77 23       	and	r23, r23
     9c4:	21 f0       	breq	.+8      	; 0x9ce <__floatsisf+0x54>
     9c6:	9e e8       	ldi	r25, 0x8E	; 142
     9c8:	87 2f       	mov	r24, r23
     9ca:	76 2f       	mov	r23, r22
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__floatsisf+0x5e>
     9ce:	66 23       	and	r22, r22
     9d0:	71 f0       	breq	.+28     	; 0x9ee <__floatsisf+0x74>
     9d2:	96 e8       	ldi	r25, 0x86	; 134
     9d4:	86 2f       	mov	r24, r22
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	2a f0       	brmi	.+10     	; 0x9e6 <__floatsisf+0x6c>
     9dc:	9a 95       	dec	r25
     9de:	66 0f       	add	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	88 1f       	adc	r24, r24
     9e4:	da f7       	brpl	.-10     	; 0x9dc <__floatsisf+0x62>
     9e6:	88 0f       	add	r24, r24
     9e8:	96 95       	lsr	r25
     9ea:	87 95       	ror	r24
     9ec:	97 f9       	bld	r25, 7
     9ee:	08 95       	ret

000009f0 <__fp_inf>:
     9f0:	97 f9       	bld	r25, 7
     9f2:	9f 67       	ori	r25, 0x7F	; 127
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	08 95       	ret

000009fc <__fp_nan>:
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	80 ec       	ldi	r24, 0xC0	; 192
     a00:	08 95       	ret

00000a02 <__fp_pscA>:
     a02:	00 24       	eor	r0, r0
     a04:	0a 94       	dec	r0
     a06:	16 16       	cp	r1, r22
     a08:	17 06       	cpc	r1, r23
     a0a:	18 06       	cpc	r1, r24
     a0c:	09 06       	cpc	r0, r25
     a0e:	08 95       	ret

00000a10 <__fp_pscB>:
     a10:	00 24       	eor	r0, r0
     a12:	0a 94       	dec	r0
     a14:	12 16       	cp	r1, r18
     a16:	13 06       	cpc	r1, r19
     a18:	14 06       	cpc	r1, r20
     a1a:	05 06       	cpc	r0, r21
     a1c:	08 95       	ret

00000a1e <__fp_round>:
     a1e:	09 2e       	mov	r0, r25
     a20:	03 94       	inc	r0
     a22:	00 0c       	add	r0, r0
     a24:	11 f4       	brne	.+4      	; 0xa2a <__fp_round+0xc>
     a26:	88 23       	and	r24, r24
     a28:	52 f0       	brmi	.+20     	; 0xa3e <__fp_round+0x20>
     a2a:	bb 0f       	add	r27, r27
     a2c:	40 f4       	brcc	.+16     	; 0xa3e <__fp_round+0x20>
     a2e:	bf 2b       	or	r27, r31
     a30:	11 f4       	brne	.+4      	; 0xa36 <__fp_round+0x18>
     a32:	60 ff       	sbrs	r22, 0
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__fp_round+0x20>
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	8f 4f       	sbci	r24, 0xFF	; 255
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	08 95       	ret

00000a40 <__fp_split3>:
     a40:	57 fd       	sbrc	r21, 7
     a42:	90 58       	subi	r25, 0x80	; 128
     a44:	44 0f       	add	r20, r20
     a46:	55 1f       	adc	r21, r21
     a48:	59 f0       	breq	.+22     	; 0xa60 <__fp_splitA+0x10>
     a4a:	5f 3f       	cpi	r21, 0xFF	; 255
     a4c:	71 f0       	breq	.+28     	; 0xa6a <__fp_splitA+0x1a>
     a4e:	47 95       	ror	r20

00000a50 <__fp_splitA>:
     a50:	88 0f       	add	r24, r24
     a52:	97 fb       	bst	r25, 7
     a54:	99 1f       	adc	r25, r25
     a56:	61 f0       	breq	.+24     	; 0xa70 <__fp_splitA+0x20>
     a58:	9f 3f       	cpi	r25, 0xFF	; 255
     a5a:	79 f0       	breq	.+30     	; 0xa7a <__fp_splitA+0x2a>
     a5c:	87 95       	ror	r24
     a5e:	08 95       	ret
     a60:	12 16       	cp	r1, r18
     a62:	13 06       	cpc	r1, r19
     a64:	14 06       	cpc	r1, r20
     a66:	55 1f       	adc	r21, r21
     a68:	f2 cf       	rjmp	.-28     	; 0xa4e <__fp_split3+0xe>
     a6a:	46 95       	lsr	r20
     a6c:	f1 df       	rcall	.-30     	; 0xa50 <__fp_splitA>
     a6e:	08 c0       	rjmp	.+16     	; 0xa80 <__fp_splitA+0x30>
     a70:	16 16       	cp	r1, r22
     a72:	17 06       	cpc	r1, r23
     a74:	18 06       	cpc	r1, r24
     a76:	99 1f       	adc	r25, r25
     a78:	f1 cf       	rjmp	.-30     	; 0xa5c <__fp_splitA+0xc>
     a7a:	86 95       	lsr	r24
     a7c:	71 05       	cpc	r23, r1
     a7e:	61 05       	cpc	r22, r1
     a80:	08 94       	sec
     a82:	08 95       	ret

00000a84 <__fp_zero>:
     a84:	e8 94       	clt

00000a86 <__fp_szero>:
     a86:	bb 27       	eor	r27, r27
     a88:	66 27       	eor	r22, r22
     a8a:	77 27       	eor	r23, r23
     a8c:	cb 01       	movw	r24, r22
     a8e:	97 f9       	bld	r25, 7
     a90:	08 95       	ret

00000a92 <__ashldi3>:
     a92:	0f 93       	push	r16
     a94:	08 30       	cpi	r16, 0x08	; 8
     a96:	90 f0       	brcs	.+36     	; 0xabc <__ashldi3+0x2a>
     a98:	98 2f       	mov	r25, r24
     a9a:	87 2f       	mov	r24, r23
     a9c:	76 2f       	mov	r23, r22
     a9e:	65 2f       	mov	r22, r21
     aa0:	54 2f       	mov	r21, r20
     aa2:	43 2f       	mov	r20, r19
     aa4:	32 2f       	mov	r19, r18
     aa6:	22 27       	eor	r18, r18
     aa8:	08 50       	subi	r16, 0x08	; 8
     aaa:	f4 cf       	rjmp	.-24     	; 0xa94 <__ashldi3+0x2>
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	44 1f       	adc	r20, r20
     ab2:	55 1f       	adc	r21, r21
     ab4:	66 1f       	adc	r22, r22
     ab6:	77 1f       	adc	r23, r23
     ab8:	88 1f       	adc	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	0a 95       	dec	r16
     abe:	b2 f7       	brpl	.-20     	; 0xaac <__ashldi3+0x1a>
     ac0:	0f 91       	pop	r16
     ac2:	08 95       	ret

00000ac4 <__ashrdi3>:
     ac4:	97 fb       	bst	r25, 7
     ac6:	10 f8       	bld	r1, 0

00000ac8 <__lshrdi3>:
     ac8:	16 94       	lsr	r1
     aca:	00 08       	sbc	r0, r0
     acc:	0f 93       	push	r16
     ace:	08 30       	cpi	r16, 0x08	; 8
     ad0:	98 f0       	brcs	.+38     	; 0xaf8 <__lshrdi3+0x30>
     ad2:	08 50       	subi	r16, 0x08	; 8
     ad4:	23 2f       	mov	r18, r19
     ad6:	34 2f       	mov	r19, r20
     ad8:	45 2f       	mov	r20, r21
     ada:	56 2f       	mov	r21, r22
     adc:	67 2f       	mov	r22, r23
     ade:	78 2f       	mov	r23, r24
     ae0:	89 2f       	mov	r24, r25
     ae2:	90 2d       	mov	r25, r0
     ae4:	f4 cf       	rjmp	.-24     	; 0xace <__lshrdi3+0x6>
     ae6:	05 94       	asr	r0
     ae8:	97 95       	ror	r25
     aea:	87 95       	ror	r24
     aec:	77 95       	ror	r23
     aee:	67 95       	ror	r22
     af0:	57 95       	ror	r21
     af2:	47 95       	ror	r20
     af4:	37 95       	ror	r19
     af6:	27 95       	ror	r18
     af8:	0a 95       	dec	r16
     afa:	aa f7       	brpl	.-22     	; 0xae6 <__lshrdi3+0x1e>
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <__cmpdi2_s8>:
     b00:	00 24       	eor	r0, r0
     b02:	a7 fd       	sbrc	r26, 7
     b04:	00 94       	com	r0
     b06:	2a 17       	cp	r18, r26
     b08:	30 05       	cpc	r19, r0
     b0a:	40 05       	cpc	r20, r0
     b0c:	50 05       	cpc	r21, r0
     b0e:	60 05       	cpc	r22, r0
     b10:	70 05       	cpc	r23, r0
     b12:	80 05       	cpc	r24, r0
     b14:	90 05       	cpc	r25, r0
     b16:	08 95       	ret

00000b18 <vsnprintf>:
     b18:	ae e0       	ldi	r26, 0x0E	; 14
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e2 e9       	ldi	r30, 0x92	; 146
     b1e:	f5 e0       	ldi	r31, 0x05	; 5
     b20:	0c 94 5d 08 	jmp	0x10ba	; 0x10ba <__prologue_saves__+0x1c>
     b24:	8c 01       	movw	r16, r24
     b26:	fa 01       	movw	r30, r20
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	8c 83       	std	Y+4, r24	; 0x04
     b2c:	09 83       	std	Y+1, r16	; 0x01
     b2e:	1a 83       	std	Y+2, r17	; 0x02
     b30:	77 ff       	sbrs	r23, 7
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <vsnprintf+0x20>
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e8       	ldi	r23, 0x80	; 128
     b38:	cb 01       	movw	r24, r22
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	8d 83       	std	Y+5, r24	; 0x05
     b3e:	9e 83       	std	Y+6, r25	; 0x06
     b40:	a9 01       	movw	r20, r18
     b42:	bf 01       	movw	r22, r30
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	0e 94 b8 05 	call	0xb70	; 0xb70 <vfprintf>
     b4c:	4d 81       	ldd	r20, Y+5	; 0x05
     b4e:	5e 81       	ldd	r21, Y+6	; 0x06
     b50:	57 fd       	sbrc	r21, 7
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <vsnprintf+0x50>
     b54:	2f 81       	ldd	r18, Y+7	; 0x07
     b56:	38 85       	ldd	r19, Y+8	; 0x08
     b58:	42 17       	cp	r20, r18
     b5a:	53 07       	cpc	r21, r19
     b5c:	0c f4       	brge	.+2      	; 0xb60 <vsnprintf+0x48>
     b5e:	9a 01       	movw	r18, r20
     b60:	f8 01       	movw	r30, r16
     b62:	e2 0f       	add	r30, r18
     b64:	f3 1f       	adc	r31, r19
     b66:	10 82       	st	Z, r1
     b68:	2e 96       	adiw	r28, 0x0e	; 14
     b6a:	e4 e0       	ldi	r30, 0x04	; 4
     b6c:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__epilogue_restores__+0x1c>

00000b70 <vfprintf>:
     b70:	ab e0       	ldi	r26, 0x0B	; 11
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ee eb       	ldi	r30, 0xBE	; 190
     b76:	f5 e0       	ldi	r31, 0x05	; 5
     b78:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__prologue_saves__>
     b7c:	6c 01       	movw	r12, r24
     b7e:	7b 01       	movw	r14, r22
     b80:	8a 01       	movw	r16, r20
     b82:	fc 01       	movw	r30, r24
     b84:	16 82       	std	Z+6, r1	; 0x06
     b86:	17 82       	std	Z+7, r1	; 0x07
     b88:	83 81       	ldd	r24, Z+3	; 0x03
     b8a:	81 ff       	sbrs	r24, 1
     b8c:	cc c1       	rjmp	.+920    	; 0xf26 <vfprintf+0x3b6>
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	3c 01       	movw	r6, r24
     b94:	f6 01       	movw	r30, r12
     b96:	93 81       	ldd	r25, Z+3	; 0x03
     b98:	f7 01       	movw	r30, r14
     b9a:	93 fd       	sbrc	r25, 3
     b9c:	85 91       	lpm	r24, Z+
     b9e:	93 ff       	sbrs	r25, 3
     ba0:	81 91       	ld	r24, Z+
     ba2:	7f 01       	movw	r14, r30
     ba4:	88 23       	and	r24, r24
     ba6:	09 f4       	brne	.+2      	; 0xbaa <vfprintf+0x3a>
     ba8:	ba c1       	rjmp	.+884    	; 0xf1e <vfprintf+0x3ae>
     baa:	85 32       	cpi	r24, 0x25	; 37
     bac:	39 f4       	brne	.+14     	; 0xbbc <vfprintf+0x4c>
     bae:	93 fd       	sbrc	r25, 3
     bb0:	85 91       	lpm	r24, Z+
     bb2:	93 ff       	sbrs	r25, 3
     bb4:	81 91       	ld	r24, Z+
     bb6:	7f 01       	movw	r14, r30
     bb8:	85 32       	cpi	r24, 0x25	; 37
     bba:	29 f4       	brne	.+10     	; 0xbc6 <vfprintf+0x56>
     bbc:	b6 01       	movw	r22, r12
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     bc4:	e7 cf       	rjmp	.-50     	; 0xb94 <vfprintf+0x24>
     bc6:	91 2c       	mov	r9, r1
     bc8:	21 2c       	mov	r2, r1
     bca:	31 2c       	mov	r3, r1
     bcc:	ff e1       	ldi	r31, 0x1F	; 31
     bce:	f3 15       	cp	r31, r3
     bd0:	d8 f0       	brcs	.+54     	; 0xc08 <vfprintf+0x98>
     bd2:	8b 32       	cpi	r24, 0x2B	; 43
     bd4:	79 f0       	breq	.+30     	; 0xbf4 <vfprintf+0x84>
     bd6:	38 f4       	brcc	.+14     	; 0xbe6 <vfprintf+0x76>
     bd8:	80 32       	cpi	r24, 0x20	; 32
     bda:	79 f0       	breq	.+30     	; 0xbfa <vfprintf+0x8a>
     bdc:	83 32       	cpi	r24, 0x23	; 35
     bde:	a1 f4       	brne	.+40     	; 0xc08 <vfprintf+0x98>
     be0:	23 2d       	mov	r18, r3
     be2:	20 61       	ori	r18, 0x10	; 16
     be4:	1d c0       	rjmp	.+58     	; 0xc20 <vfprintf+0xb0>
     be6:	8d 32       	cpi	r24, 0x2D	; 45
     be8:	61 f0       	breq	.+24     	; 0xc02 <vfprintf+0x92>
     bea:	80 33       	cpi	r24, 0x30	; 48
     bec:	69 f4       	brne	.+26     	; 0xc08 <vfprintf+0x98>
     bee:	23 2d       	mov	r18, r3
     bf0:	21 60       	ori	r18, 0x01	; 1
     bf2:	16 c0       	rjmp	.+44     	; 0xc20 <vfprintf+0xb0>
     bf4:	83 2d       	mov	r24, r3
     bf6:	82 60       	ori	r24, 0x02	; 2
     bf8:	38 2e       	mov	r3, r24
     bfa:	e3 2d       	mov	r30, r3
     bfc:	e4 60       	ori	r30, 0x04	; 4
     bfe:	3e 2e       	mov	r3, r30
     c00:	2a c0       	rjmp	.+84     	; 0xc56 <vfprintf+0xe6>
     c02:	f3 2d       	mov	r31, r3
     c04:	f8 60       	ori	r31, 0x08	; 8
     c06:	1d c0       	rjmp	.+58     	; 0xc42 <vfprintf+0xd2>
     c08:	37 fc       	sbrc	r3, 7
     c0a:	2d c0       	rjmp	.+90     	; 0xc66 <vfprintf+0xf6>
     c0c:	20 ed       	ldi	r18, 0xD0	; 208
     c0e:	28 0f       	add	r18, r24
     c10:	2a 30       	cpi	r18, 0x0A	; 10
     c12:	40 f0       	brcs	.+16     	; 0xc24 <vfprintf+0xb4>
     c14:	8e 32       	cpi	r24, 0x2E	; 46
     c16:	b9 f4       	brne	.+46     	; 0xc46 <vfprintf+0xd6>
     c18:	36 fc       	sbrc	r3, 6
     c1a:	81 c1       	rjmp	.+770    	; 0xf1e <vfprintf+0x3ae>
     c1c:	23 2d       	mov	r18, r3
     c1e:	20 64       	ori	r18, 0x40	; 64
     c20:	32 2e       	mov	r3, r18
     c22:	19 c0       	rjmp	.+50     	; 0xc56 <vfprintf+0xe6>
     c24:	36 fe       	sbrs	r3, 6
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <vfprintf+0xc4>
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	98 9e       	mul	r9, r24
     c2c:	20 0d       	add	r18, r0
     c2e:	11 24       	eor	r1, r1
     c30:	92 2e       	mov	r9, r18
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <vfprintf+0xe6>
     c34:	ea e0       	ldi	r30, 0x0A	; 10
     c36:	2e 9e       	mul	r2, r30
     c38:	20 0d       	add	r18, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	22 2e       	mov	r2, r18
     c3e:	f3 2d       	mov	r31, r3
     c40:	f0 62       	ori	r31, 0x20	; 32
     c42:	3f 2e       	mov	r3, r31
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <vfprintf+0xe6>
     c46:	8c 36       	cpi	r24, 0x6C	; 108
     c48:	21 f4       	brne	.+8      	; 0xc52 <vfprintf+0xe2>
     c4a:	83 2d       	mov	r24, r3
     c4c:	80 68       	ori	r24, 0x80	; 128
     c4e:	38 2e       	mov	r3, r24
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <vfprintf+0xe6>
     c52:	88 36       	cpi	r24, 0x68	; 104
     c54:	41 f4       	brne	.+16     	; 0xc66 <vfprintf+0xf6>
     c56:	f7 01       	movw	r30, r14
     c58:	93 fd       	sbrc	r25, 3
     c5a:	85 91       	lpm	r24, Z+
     c5c:	93 ff       	sbrs	r25, 3
     c5e:	81 91       	ld	r24, Z+
     c60:	7f 01       	movw	r14, r30
     c62:	81 11       	cpse	r24, r1
     c64:	b3 cf       	rjmp	.-154    	; 0xbcc <vfprintf+0x5c>
     c66:	98 2f       	mov	r25, r24
     c68:	9f 7d       	andi	r25, 0xDF	; 223
     c6a:	95 54       	subi	r25, 0x45	; 69
     c6c:	93 30       	cpi	r25, 0x03	; 3
     c6e:	28 f4       	brcc	.+10     	; 0xc7a <vfprintf+0x10a>
     c70:	0c 5f       	subi	r16, 0xFC	; 252
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	9f e3       	ldi	r25, 0x3F	; 63
     c76:	99 83       	std	Y+1, r25	; 0x01
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <vfprintf+0x124>
     c7a:	83 36       	cpi	r24, 0x63	; 99
     c7c:	31 f0       	breq	.+12     	; 0xc8a <vfprintf+0x11a>
     c7e:	83 37       	cpi	r24, 0x73	; 115
     c80:	71 f0       	breq	.+28     	; 0xc9e <vfprintf+0x12e>
     c82:	83 35       	cpi	r24, 0x53	; 83
     c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x118>
     c86:	59 c0       	rjmp	.+178    	; 0xd3a <vfprintf+0x1ca>
     c88:	21 c0       	rjmp	.+66     	; 0xccc <vfprintf+0x15c>
     c8a:	f8 01       	movw	r30, r16
     c8c:	80 81       	ld	r24, Z
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	0e 5f       	subi	r16, 0xFE	; 254
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	88 24       	eor	r8, r8
     c96:	83 94       	inc	r8
     c98:	91 2c       	mov	r9, r1
     c9a:	53 01       	movw	r10, r6
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <vfprintf+0x154>
     c9e:	28 01       	movw	r4, r16
     ca0:	f2 e0       	ldi	r31, 0x02	; 2
     ca2:	4f 0e       	add	r4, r31
     ca4:	51 1c       	adc	r5, r1
     ca6:	f8 01       	movw	r30, r16
     ca8:	a0 80       	ld	r10, Z
     caa:	b1 80       	ldd	r11, Z+1	; 0x01
     cac:	36 fe       	sbrs	r3, 6
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <vfprintf+0x146>
     cb0:	69 2d       	mov	r22, r9
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x14a>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	c5 01       	movw	r24, r10
     cbc:	0e 94 a4 07 	call	0xf48	; 0xf48 <strnlen>
     cc0:	4c 01       	movw	r8, r24
     cc2:	82 01       	movw	r16, r4
     cc4:	f3 2d       	mov	r31, r3
     cc6:	ff 77       	andi	r31, 0x7F	; 127
     cc8:	3f 2e       	mov	r3, r31
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <vfprintf+0x188>
     ccc:	28 01       	movw	r4, r16
     cce:	22 e0       	ldi	r18, 0x02	; 2
     cd0:	42 0e       	add	r4, r18
     cd2:	51 1c       	adc	r5, r1
     cd4:	f8 01       	movw	r30, r16
     cd6:	a0 80       	ld	r10, Z
     cd8:	b1 80       	ldd	r11, Z+1	; 0x01
     cda:	36 fe       	sbrs	r3, 6
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x174>
     cde:	69 2d       	mov	r22, r9
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x178>
     ce4:	6f ef       	ldi	r22, 0xFF	; 255
     ce6:	7f ef       	ldi	r23, 0xFF	; 255
     ce8:	c5 01       	movw	r24, r10
     cea:	0e 94 99 07 	call	0xf32	; 0xf32 <strnlen_P>
     cee:	4c 01       	movw	r8, r24
     cf0:	f3 2d       	mov	r31, r3
     cf2:	f0 68       	ori	r31, 0x80	; 128
     cf4:	3f 2e       	mov	r3, r31
     cf6:	82 01       	movw	r16, r4
     cf8:	33 fc       	sbrc	r3, 3
     cfa:	1b c0       	rjmp	.+54     	; 0xd32 <vfprintf+0x1c2>
     cfc:	82 2d       	mov	r24, r2
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	88 16       	cp	r8, r24
     d02:	99 06       	cpc	r9, r25
     d04:	b0 f4       	brcc	.+44     	; 0xd32 <vfprintf+0x1c2>
     d06:	b6 01       	movw	r22, r12
     d08:	80 e2       	ldi	r24, 0x20	; 32
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     d10:	2a 94       	dec	r2
     d12:	f4 cf       	rjmp	.-24     	; 0xcfc <vfprintf+0x18c>
     d14:	f5 01       	movw	r30, r10
     d16:	37 fc       	sbrc	r3, 7
     d18:	85 91       	lpm	r24, Z+
     d1a:	37 fe       	sbrs	r3, 7
     d1c:	81 91       	ld	r24, Z+
     d1e:	5f 01       	movw	r10, r30
     d20:	b6 01       	movw	r22, r12
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     d28:	21 10       	cpse	r2, r1
     d2a:	2a 94       	dec	r2
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	82 1a       	sub	r8, r18
     d30:	91 08       	sbc	r9, r1
     d32:	81 14       	cp	r8, r1
     d34:	91 04       	cpc	r9, r1
     d36:	71 f7       	brne	.-36     	; 0xd14 <vfprintf+0x1a4>
     d38:	e8 c0       	rjmp	.+464    	; 0xf0a <vfprintf+0x39a>
     d3a:	84 36       	cpi	r24, 0x64	; 100
     d3c:	11 f0       	breq	.+4      	; 0xd42 <vfprintf+0x1d2>
     d3e:	89 36       	cpi	r24, 0x69	; 105
     d40:	41 f5       	brne	.+80     	; 0xd92 <vfprintf+0x222>
     d42:	f8 01       	movw	r30, r16
     d44:	37 fe       	sbrs	r3, 7
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <vfprintf+0x1e6>
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	0c 5f       	subi	r16, 0xFC	; 252
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <vfprintf+0x1f6>
     d56:	60 81       	ld	r22, Z
     d58:	71 81       	ldd	r23, Z+1	; 0x01
     d5a:	07 2e       	mov	r0, r23
     d5c:	00 0c       	add	r0, r0
     d5e:	88 0b       	sbc	r24, r24
     d60:	99 0b       	sbc	r25, r25
     d62:	0e 5f       	subi	r16, 0xFE	; 254
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	f3 2d       	mov	r31, r3
     d68:	ff 76       	andi	r31, 0x6F	; 111
     d6a:	3f 2e       	mov	r3, r31
     d6c:	97 ff       	sbrs	r25, 7
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <vfprintf+0x212>
     d70:	90 95       	com	r25
     d72:	80 95       	com	r24
     d74:	70 95       	com	r23
     d76:	61 95       	neg	r22
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	8f 4f       	sbci	r24, 0xFF	; 255
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	f0 68       	ori	r31, 0x80	; 128
     d80:	3f 2e       	mov	r3, r31
     d82:	2a e0       	ldi	r18, 0x0A	; 10
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	a3 01       	movw	r20, r6
     d88:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__ultoa_invert>
     d8c:	88 2e       	mov	r8, r24
     d8e:	86 18       	sub	r8, r6
     d90:	45 c0       	rjmp	.+138    	; 0xe1c <vfprintf+0x2ac>
     d92:	85 37       	cpi	r24, 0x75	; 117
     d94:	31 f4       	brne	.+12     	; 0xda2 <vfprintf+0x232>
     d96:	23 2d       	mov	r18, r3
     d98:	2f 7e       	andi	r18, 0xEF	; 239
     d9a:	b2 2e       	mov	r11, r18
     d9c:	2a e0       	ldi	r18, 0x0A	; 10
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	25 c0       	rjmp	.+74     	; 0xdec <vfprintf+0x27c>
     da2:	93 2d       	mov	r25, r3
     da4:	99 7f       	andi	r25, 0xF9	; 249
     da6:	b9 2e       	mov	r11, r25
     da8:	8f 36       	cpi	r24, 0x6F	; 111
     daa:	c1 f0       	breq	.+48     	; 0xddc <vfprintf+0x26c>
     dac:	18 f4       	brcc	.+6      	; 0xdb4 <vfprintf+0x244>
     dae:	88 35       	cpi	r24, 0x58	; 88
     db0:	79 f0       	breq	.+30     	; 0xdd0 <vfprintf+0x260>
     db2:	b5 c0       	rjmp	.+362    	; 0xf1e <vfprintf+0x3ae>
     db4:	80 37       	cpi	r24, 0x70	; 112
     db6:	19 f0       	breq	.+6      	; 0xdbe <vfprintf+0x24e>
     db8:	88 37       	cpi	r24, 0x78	; 120
     dba:	21 f0       	breq	.+8      	; 0xdc4 <vfprintf+0x254>
     dbc:	b0 c0       	rjmp	.+352    	; 0xf1e <vfprintf+0x3ae>
     dbe:	e9 2f       	mov	r30, r25
     dc0:	e0 61       	ori	r30, 0x10	; 16
     dc2:	be 2e       	mov	r11, r30
     dc4:	b4 fe       	sbrs	r11, 4
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <vfprintf+0x272>
     dc8:	fb 2d       	mov	r31, r11
     dca:	f4 60       	ori	r31, 0x04	; 4
     dcc:	bf 2e       	mov	r11, r31
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <vfprintf+0x272>
     dd0:	34 fe       	sbrs	r3, 4
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <vfprintf+0x278>
     dd4:	29 2f       	mov	r18, r25
     dd6:	26 60       	ori	r18, 0x06	; 6
     dd8:	b2 2e       	mov	r11, r18
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vfprintf+0x278>
     ddc:	28 e0       	ldi	r18, 0x08	; 8
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <vfprintf+0x27c>
     de2:	20 e1       	ldi	r18, 0x10	; 16
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x27c>
     de8:	20 e1       	ldi	r18, 0x10	; 16
     dea:	32 e0       	ldi	r19, 0x02	; 2
     dec:	f8 01       	movw	r30, r16
     dee:	b7 fe       	sbrs	r11, 7
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <vfprintf+0x290>
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	0c 5f       	subi	r16, 0xFC	; 252
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <vfprintf+0x29c>
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 5f       	subi	r16, 0xFE	; 254
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	a3 01       	movw	r20, r6
     e0e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__ultoa_invert>
     e12:	88 2e       	mov	r8, r24
     e14:	86 18       	sub	r8, r6
     e16:	fb 2d       	mov	r31, r11
     e18:	ff 77       	andi	r31, 0x7F	; 127
     e1a:	3f 2e       	mov	r3, r31
     e1c:	36 fe       	sbrs	r3, 6
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <vfprintf+0x2ca>
     e20:	23 2d       	mov	r18, r3
     e22:	2e 7f       	andi	r18, 0xFE	; 254
     e24:	a2 2e       	mov	r10, r18
     e26:	89 14       	cp	r8, r9
     e28:	58 f4       	brcc	.+22     	; 0xe40 <vfprintf+0x2d0>
     e2a:	34 fe       	sbrs	r3, 4
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <vfprintf+0x2d4>
     e2e:	32 fc       	sbrc	r3, 2
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vfprintf+0x2d4>
     e32:	83 2d       	mov	r24, r3
     e34:	8e 7e       	andi	r24, 0xEE	; 238
     e36:	a8 2e       	mov	r10, r24
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <vfprintf+0x2d4>
     e3a:	b8 2c       	mov	r11, r8
     e3c:	a3 2c       	mov	r10, r3
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x2d6>
     e40:	b8 2c       	mov	r11, r8
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vfprintf+0x2d6>
     e44:	b9 2c       	mov	r11, r9
     e46:	a4 fe       	sbrs	r10, 4
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <vfprintf+0x2f8>
     e4a:	fe 01       	movw	r30, r28
     e4c:	e8 0d       	add	r30, r8
     e4e:	f1 1d       	adc	r31, r1
     e50:	80 81       	ld	r24, Z
     e52:	80 33       	cpi	r24, 0x30	; 48
     e54:	21 f4       	brne	.+8      	; 0xe5e <vfprintf+0x2ee>
     e56:	9a 2d       	mov	r25, r10
     e58:	99 7e       	andi	r25, 0xE9	; 233
     e5a:	a9 2e       	mov	r10, r25
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <vfprintf+0x300>
     e5e:	a2 fe       	sbrs	r10, 2
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x2fe>
     e62:	b3 94       	inc	r11
     e64:	b3 94       	inc	r11
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <vfprintf+0x300>
     e68:	8a 2d       	mov	r24, r10
     e6a:	86 78       	andi	r24, 0x86	; 134
     e6c:	09 f0       	breq	.+2      	; 0xe70 <vfprintf+0x300>
     e6e:	b3 94       	inc	r11
     e70:	a3 fc       	sbrc	r10, 3
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <vfprintf+0x326>
     e74:	a0 fe       	sbrs	r10, 0
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <vfprintf+0x314>
     e78:	b2 14       	cp	r11, r2
     e7a:	88 f4       	brcc	.+34     	; 0xe9e <vfprintf+0x32e>
     e7c:	28 0c       	add	r2, r8
     e7e:	92 2c       	mov	r9, r2
     e80:	9b 18       	sub	r9, r11
     e82:	0e c0       	rjmp	.+28     	; 0xea0 <vfprintf+0x330>
     e84:	b2 14       	cp	r11, r2
     e86:	60 f4       	brcc	.+24     	; 0xea0 <vfprintf+0x330>
     e88:	b6 01       	movw	r22, r12
     e8a:	80 e2       	ldi	r24, 0x20	; 32
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     e92:	b3 94       	inc	r11
     e94:	f7 cf       	rjmp	.-18     	; 0xe84 <vfprintf+0x314>
     e96:	b2 14       	cp	r11, r2
     e98:	18 f4       	brcc	.+6      	; 0xea0 <vfprintf+0x330>
     e9a:	2b 18       	sub	r2, r11
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x332>
     e9e:	98 2c       	mov	r9, r8
     ea0:	21 2c       	mov	r2, r1
     ea2:	a4 fe       	sbrs	r10, 4
     ea4:	10 c0       	rjmp	.+32     	; 0xec6 <vfprintf+0x356>
     ea6:	b6 01       	movw	r22, r12
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     eb0:	a2 fe       	sbrs	r10, 2
     eb2:	17 c0       	rjmp	.+46     	; 0xee2 <vfprintf+0x372>
     eb4:	a1 fc       	sbrc	r10, 1
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <vfprintf+0x34e>
     eb8:	88 e7       	ldi	r24, 0x78	; 120
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <vfprintf+0x352>
     ebe:	88 e5       	ldi	r24, 0x58	; 88
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	b6 01       	movw	r22, r12
     ec4:	0c c0       	rjmp	.+24     	; 0xede <vfprintf+0x36e>
     ec6:	8a 2d       	mov	r24, r10
     ec8:	86 78       	andi	r24, 0x86	; 134
     eca:	59 f0       	breq	.+22     	; 0xee2 <vfprintf+0x372>
     ecc:	a1 fe       	sbrs	r10, 1
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x364>
     ed0:	8b e2       	ldi	r24, 0x2B	; 43
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <vfprintf+0x366>
     ed4:	80 e2       	ldi	r24, 0x20	; 32
     ed6:	a7 fc       	sbrc	r10, 7
     ed8:	8d e2       	ldi	r24, 0x2D	; 45
     eda:	b6 01       	movw	r22, r12
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     ee2:	89 14       	cp	r8, r9
     ee4:	38 f4       	brcc	.+14     	; 0xef4 <vfprintf+0x384>
     ee6:	b6 01       	movw	r22, r12
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     ef0:	9a 94       	dec	r9
     ef2:	f7 cf       	rjmp	.-18     	; 0xee2 <vfprintf+0x372>
     ef4:	8a 94       	dec	r8
     ef6:	f3 01       	movw	r30, r6
     ef8:	e8 0d       	add	r30, r8
     efa:	f1 1d       	adc	r31, r1
     efc:	80 81       	ld	r24, Z
     efe:	b6 01       	movw	r22, r12
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     f06:	81 10       	cpse	r8, r1
     f08:	f5 cf       	rjmp	.-22     	; 0xef4 <vfprintf+0x384>
     f0a:	22 20       	and	r2, r2
     f0c:	09 f4       	brne	.+2      	; 0xf10 <vfprintf+0x3a0>
     f0e:	42 ce       	rjmp	.-892    	; 0xb94 <vfprintf+0x24>
     f10:	b6 01       	movw	r22, r12
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 af 07 	call	0xf5e	; 0xf5e <fputc>
     f1a:	2a 94       	dec	r2
     f1c:	f6 cf       	rjmp	.-20     	; 0xf0a <vfprintf+0x39a>
     f1e:	f6 01       	movw	r30, r12
     f20:	86 81       	ldd	r24, Z+6	; 0x06
     f22:	97 81       	ldd	r25, Z+7	; 0x07
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x3ba>
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	2b 96       	adiw	r28, 0x0b	; 11
     f2c:	e2 e1       	ldi	r30, 0x12	; 18
     f2e:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__epilogue_restores__>

00000f32 <strnlen_P>:
     f32:	fc 01       	movw	r30, r24
     f34:	05 90       	lpm	r0, Z+
     f36:	61 50       	subi	r22, 0x01	; 1
     f38:	70 40       	sbci	r23, 0x00	; 0
     f3a:	01 10       	cpse	r0, r1
     f3c:	d8 f7       	brcc	.-10     	; 0xf34 <strnlen_P+0x2>
     f3e:	80 95       	com	r24
     f40:	90 95       	com	r25
     f42:	8e 0f       	add	r24, r30
     f44:	9f 1f       	adc	r25, r31
     f46:	08 95       	ret

00000f48 <strnlen>:
     f48:	fc 01       	movw	r30, r24
     f4a:	61 50       	subi	r22, 0x01	; 1
     f4c:	70 40       	sbci	r23, 0x00	; 0
     f4e:	01 90       	ld	r0, Z+
     f50:	01 10       	cpse	r0, r1
     f52:	d8 f7       	brcc	.-10     	; 0xf4a <strnlen+0x2>
     f54:	80 95       	com	r24
     f56:	90 95       	com	r25
     f58:	8e 0f       	add	r24, r30
     f5a:	9f 1f       	adc	r25, r31
     f5c:	08 95       	ret

00000f5e <fputc>:
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	fb 01       	movw	r30, r22
     f68:	23 81       	ldd	r18, Z+3	; 0x03
     f6a:	21 fd       	sbrc	r18, 1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <fputc+0x16>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	9f ef       	ldi	r25, 0xFF	; 255
     f72:	2c c0       	rjmp	.+88     	; 0xfcc <fputc+0x6e>
     f74:	22 ff       	sbrs	r18, 2
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <fputc+0x46>
     f78:	46 81       	ldd	r20, Z+6	; 0x06
     f7a:	57 81       	ldd	r21, Z+7	; 0x07
     f7c:	24 81       	ldd	r18, Z+4	; 0x04
     f7e:	35 81       	ldd	r19, Z+5	; 0x05
     f80:	42 17       	cp	r20, r18
     f82:	53 07       	cpc	r21, r19
     f84:	44 f4       	brge	.+16     	; 0xf96 <fputc+0x38>
     f86:	a0 81       	ld	r26, Z
     f88:	b1 81       	ldd	r27, Z+1	; 0x01
     f8a:	9d 01       	movw	r18, r26
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	20 83       	st	Z, r18
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	8c 93       	st	X, r24
     f96:	26 81       	ldd	r18, Z+6	; 0x06
     f98:	37 81       	ldd	r19, Z+7	; 0x07
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	26 83       	std	Z+6, r18	; 0x06
     fa0:	37 83       	std	Z+7, r19	; 0x07
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <fputc+0x6e>
     fa4:	8b 01       	movw	r16, r22
     fa6:	ec 01       	movw	r28, r24
     fa8:	fb 01       	movw	r30, r22
     faa:	00 84       	ldd	r0, Z+8	; 0x08
     fac:	f1 85       	ldd	r31, Z+9	; 0x09
     fae:	e0 2d       	mov	r30, r0
     fb0:	09 95       	icall
     fb2:	89 2b       	or	r24, r25
     fb4:	e1 f6       	brne	.-72     	; 0xf6e <fputc+0x10>
     fb6:	d8 01       	movw	r26, r16
     fb8:	16 96       	adiw	r26, 0x06	; 6
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	17 97       	sbiw	r26, 0x07	; 7
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	16 96       	adiw	r26, 0x06	; 6
     fc4:	8d 93       	st	X+, r24
     fc6:	9c 93       	st	X, r25
     fc8:	17 97       	sbiw	r26, 0x07	; 7
     fca:	ce 01       	movw	r24, r28
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <__ultoa_invert>:
     fd6:	fa 01       	movw	r30, r20
     fd8:	aa 27       	eor	r26, r26
     fda:	28 30       	cpi	r18, 0x08	; 8
     fdc:	51 f1       	breq	.+84     	; 0x1032 <__ultoa_invert+0x5c>
     fde:	20 31       	cpi	r18, 0x10	; 16
     fe0:	81 f1       	breq	.+96     	; 0x1042 <__ultoa_invert+0x6c>
     fe2:	e8 94       	clt
     fe4:	6f 93       	push	r22
     fe6:	6e 7f       	andi	r22, 0xFE	; 254
     fe8:	6e 5f       	subi	r22, 0xFE	; 254
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	af 4f       	sbci	r26, 0xFF	; 255
     ff2:	b1 e0       	ldi	r27, 0x01	; 1
     ff4:	3e d0       	rcall	.+124    	; 0x1072 <__ultoa_invert+0x9c>
     ff6:	b4 e0       	ldi	r27, 0x04	; 4
     ff8:	3c d0       	rcall	.+120    	; 0x1072 <__ultoa_invert+0x9c>
     ffa:	67 0f       	add	r22, r23
     ffc:	78 1f       	adc	r23, r24
     ffe:	89 1f       	adc	r24, r25
    1000:	9a 1f       	adc	r25, r26
    1002:	a1 1d       	adc	r26, r1
    1004:	68 0f       	add	r22, r24
    1006:	79 1f       	adc	r23, r25
    1008:	8a 1f       	adc	r24, r26
    100a:	91 1d       	adc	r25, r1
    100c:	a1 1d       	adc	r26, r1
    100e:	6a 0f       	add	r22, r26
    1010:	71 1d       	adc	r23, r1
    1012:	81 1d       	adc	r24, r1
    1014:	91 1d       	adc	r25, r1
    1016:	a1 1d       	adc	r26, r1
    1018:	20 d0       	rcall	.+64     	; 0x105a <__ultoa_invert+0x84>
    101a:	09 f4       	brne	.+2      	; 0x101e <__ultoa_invert+0x48>
    101c:	68 94       	set
    101e:	3f 91       	pop	r19
    1020:	2a e0       	ldi	r18, 0x0A	; 10
    1022:	26 9f       	mul	r18, r22
    1024:	11 24       	eor	r1, r1
    1026:	30 19       	sub	r19, r0
    1028:	30 5d       	subi	r19, 0xD0	; 208
    102a:	31 93       	st	Z+, r19
    102c:	de f6       	brtc	.-74     	; 0xfe4 <__ultoa_invert+0xe>
    102e:	cf 01       	movw	r24, r30
    1030:	08 95       	ret
    1032:	46 2f       	mov	r20, r22
    1034:	47 70       	andi	r20, 0x07	; 7
    1036:	40 5d       	subi	r20, 0xD0	; 208
    1038:	41 93       	st	Z+, r20
    103a:	b3 e0       	ldi	r27, 0x03	; 3
    103c:	0f d0       	rcall	.+30     	; 0x105c <__ultoa_invert+0x86>
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0x5c>
    1040:	f6 cf       	rjmp	.-20     	; 0x102e <__ultoa_invert+0x58>
    1042:	46 2f       	mov	r20, r22
    1044:	4f 70       	andi	r20, 0x0F	; 15
    1046:	40 5d       	subi	r20, 0xD0	; 208
    1048:	4a 33       	cpi	r20, 0x3A	; 58
    104a:	18 f0       	brcs	.+6      	; 0x1052 <__ultoa_invert+0x7c>
    104c:	49 5d       	subi	r20, 0xD9	; 217
    104e:	31 fd       	sbrc	r19, 1
    1050:	40 52       	subi	r20, 0x20	; 32
    1052:	41 93       	st	Z+, r20
    1054:	02 d0       	rcall	.+4      	; 0x105a <__ultoa_invert+0x84>
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__ultoa_invert+0x6c>
    1058:	ea cf       	rjmp	.-44     	; 0x102e <__ultoa_invert+0x58>
    105a:	b4 e0       	ldi	r27, 0x04	; 4
    105c:	a6 95       	lsr	r26
    105e:	97 95       	ror	r25
    1060:	87 95       	ror	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	ba 95       	dec	r27
    1068:	c9 f7       	brne	.-14     	; 0x105c <__ultoa_invert+0x86>
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	61 05       	cpc	r22, r1
    106e:	71 05       	cpc	r23, r1
    1070:	08 95       	ret
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	0a 2e       	mov	r0, r26
    1078:	06 94       	lsr	r0
    107a:	57 95       	ror	r21
    107c:	47 95       	ror	r20
    107e:	37 95       	ror	r19
    1080:	27 95       	ror	r18
    1082:	ba 95       	dec	r27
    1084:	c9 f7       	brne	.-14     	; 0x1078 <__ultoa_invert+0xa2>
    1086:	62 0f       	add	r22, r18
    1088:	73 1f       	adc	r23, r19
    108a:	84 1f       	adc	r24, r20
    108c:	95 1f       	adc	r25, r21
    108e:	a0 1d       	adc	r26, r0
    1090:	08 95       	ret

00001092 <ccp_write_io>:
    1092:	dc 01       	movw	r26, r24
    1094:	28 ed       	ldi	r18, 0xD8	; 216
    1096:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6e30>
    109a:	6c 93       	st	X, r22
    109c:	08 95       	ret

0000109e <__prologue_saves__>:
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	ca 1b       	sub	r28, r26
    10c8:	db 0b       	sbc	r29, r27
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	09 94       	ijmp

000010d0 <__epilogue_restores__>:
    10d0:	2a 88       	ldd	r2, Y+18	; 0x12
    10d2:	39 88       	ldd	r3, Y+17	; 0x11
    10d4:	48 88       	ldd	r4, Y+16	; 0x10
    10d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    10d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    10da:	7d 84       	ldd	r7, Y+13	; 0x0d
    10dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    10de:	9b 84       	ldd	r9, Y+11	; 0x0b
    10e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    10e2:	b9 84       	ldd	r11, Y+9	; 0x09
    10e4:	c8 84       	ldd	r12, Y+8	; 0x08
    10e6:	df 80       	ldd	r13, Y+7	; 0x07
    10e8:	ee 80       	ldd	r14, Y+6	; 0x06
    10ea:	fd 80       	ldd	r15, Y+5	; 0x05
    10ec:	0c 81       	ldd	r16, Y+4	; 0x04
    10ee:	1b 81       	ldd	r17, Y+3	; 0x03
    10f0:	aa 81       	ldd	r26, Y+2	; 0x02
    10f2:	b9 81       	ldd	r27, Y+1	; 0x01
    10f4:	ce 0f       	add	r28, r30
    10f6:	d1 1d       	adc	r29, r1
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	ed 01       	movw	r28, r26
    10fe:	08 95       	ret

00001100 <_exit>:
    1100:	f8 94       	cli

00001102 <__stop_program>:
    1102:	ff cf       	rjmp	.-2      	; 0x1102 <__stop_program>
