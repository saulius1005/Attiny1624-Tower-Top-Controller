
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  00008688  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000f  00803800  00803800  0000075c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  000007d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f1c  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000218b  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b53  00000000  00000000  00005997  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ac  00000000  00000000  000064ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016b8  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000367  00000000  00000000  00007d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  000080b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	af 30       	cpi	r26, 0x0F	; 15
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  98:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 3c 03 	call	0x678	; 0x678 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 3c 03 	call	0x678	; 0x678 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
  b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f79db>
  b8:	80 fd       	sbrc	r24, 0
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <CLOCK_INHF_clock_init+0x14>
  bc:	08 95       	ret

000000be <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
  c2:	8b 01       	movw	r16, r22
  c4:	9c 01       	movw	r18, r24
  c6:	0f 2e       	mov	r0, r31
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	fa 95       	dec	r31
  d4:	d1 f7       	brne	.-12     	; 0xca <crc6_mt6701_lookup+0xc>
  d6:	f0 2d       	mov	r31, r0
  d8:	0f 73       	andi	r16, 0x3F	; 63
  da:	11 27       	eor	r17, r17
  dc:	22 27       	eor	r18, r18
  de:	33 27       	eor	r19, r19
  e0:	f8 01       	movw	r30, r16
  e2:	e8 57       	subi	r30, 0x78	; 120
  e4:	f9 47       	sbci	r31, 0x79	; 121
  e6:	40 81       	ld	r20, Z
  e8:	8b 01       	movw	r16, r22
  ea:	9c 01       	movw	r18, r24
  ec:	68 94       	set
  ee:	15 f8       	bld	r1, 5
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	17 95       	ror	r17
  f6:	07 95       	ror	r16
  f8:	16 94       	lsr	r1
  fa:	d1 f7       	brne	.-12     	; 0xf0 <crc6_mt6701_lookup+0x32>
  fc:	0f 73       	andi	r16, 0x3F	; 63
  fe:	11 27       	eor	r17, r17
 100:	22 27       	eor	r18, r18
 102:	33 27       	eor	r19, r19
 104:	04 27       	eor	r16, r20
 106:	f8 01       	movw	r30, r16
 108:	e8 57       	subi	r30, 0x78	; 120
 10a:	f9 47       	sbci	r31, 0x79	; 121
 10c:	20 81       	ld	r18, Z
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	99 27       	eor	r25, r25
 116:	aa 27       	eor	r26, r26
 118:	bb 27       	eor	r27, r27
 11a:	82 27       	eor	r24, r18
 11c:	fc 01       	movw	r30, r24
 11e:	e8 57       	subi	r30, 0x78	; 120
 120:	f9 47       	sbci	r31, 0x79	; 121
}
 122:	80 81       	ld	r24, Z
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
 12a:	cf 93       	push	r28
 12c:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
 136:	c8 2f       	mov	r28, r24
 138:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	68 94       	set
 140:	15 f8       	bld	r1, 5
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	77 95       	ror	r23
 148:	67 95       	ror	r22
 14a:	16 94       	lsr	r1
 14c:	d1 f7       	brne	.-12     	; 0x142 <MT6701CRC+0x18>
 14e:	60 83       	st	Z, r22
 150:	71 83       	std	Z+1, r23	; 0x01
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	c8 13       	cpse	r28, r24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <MT6701CRC+0x38>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	89 2f       	mov	r24, r25
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <GPIO_init>:
 * - PB2 as TX for dummy data sending with pull-up enabled.
 * - PB3 as RX (MISO, MT6701 DO) with pull-up enabled.
 * - PA7 as SS (MT6701 CSN) output, initially set high.
 */
void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
 168:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f7f5a>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
 16c:	e0 e2       	ldi	r30, 0x20	; 32
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MAX), PB3 as input (USART0 RX as MISO (MT6701 DO))
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	92 83       	std	Z+2, r25	; 0x02
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
 17c:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f4 e0       	ldi	r31, 0x04	; 4
 182:	92 ec       	ldi	r25, 0xC2	; 194
 184:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
 186:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MIN)
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	82 83       	std	Z+2, r24	; 0x02
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
 18c:	90 ec       	ldi	r25, 0xC0	; 192
 18e:	95 83       	std	Z+5, r25	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
 190:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
 192:	85 8b       	std	Z+21, r24	; 0x15
 194:	08 95       	ret

00000196 <main>:
 * @return int (not used, since the function never exits).
 */
int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
 196:	0e 94 50 00 	call	0xa0	; 0xa0 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
 19e:	0e 94 77 01 	call	0x2ee	; 0x2ee <USART0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MT6701_SSI_Angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f e7       	ldi	r18, 0x7F	; 127
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	96 e0       	ldi	r25, 0x06	; 6
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x18>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x22>
 1b8:	00 00       	nop
        _delay_ms(100); ///< Wait 100ms before the next read
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MT6701_SSI_Angle>
 1c0:	2f e7       	ldi	r18, 0x7F	; 127
 1c2:	8a e1       	ldi	r24, 0x1A	; 26
 1c4:	96 e0       	ldi	r25, 0x06	; 6
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x30>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x3a>
 1d0:	00 00       	nop
 1d2:	e7 cf       	rjmp	.-50     	; 0x1a2 <main+0xc>

000001d4 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <MT6701_SSI_Angle+0xa>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <MT6701_SSI_Angle+0xc>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
 1e6:	19 82       	std	Y+1, r1	; 0x01
 1e8:	1a 82       	std	Y+2, r1	; 0x02
 1ea:	1b 82       	std	Y+3, r1	; 0x03
 1ec:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
 1ee:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f7d7e>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	24 c0       	rjmp	.+72     	; 0x23e <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
 1f6:	8f e6       	ldi	r24, 0x6F	; 111
 1f8:	0e 94 82 01 	call	0x304	; 0x304 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
 1fc:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f817c>
 200:	86 ff       	sbrs	r24, 6
 202:	fc cf       	rjmp	.-8      	; 0x1fc <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f8 e0       	ldi	r31, 0x08	; 8
 208:	84 81       	ldd	r24, Z+4	; 0x04
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	ab 81       	ldd	r26, Y+3	; 0x03
 214:	bc 81       	ldd	r27, Y+4	; 0x04
 216:	ba 2f       	mov	r27, r26
 218:	a9 2f       	mov	r26, r25
 21a:	98 2f       	mov	r25, r24
 21c:	88 27       	eor	r24, r24
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	ab 83       	std	Y+3, r26	; 0x03
 224:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
 226:	0e 94 89 01 	call	0x312	; 0x312 <USART0_readChar>
 22a:	49 81       	ldd	r20, Y+1	; 0x01
 22c:	5a 81       	ldd	r21, Y+2	; 0x02
 22e:	6b 81       	ldd	r22, Y+3	; 0x03
 230:	7c 81       	ldd	r23, Y+4	; 0x04
 232:	48 2b       	or	r20, r24
 234:	49 83       	std	Y+1, r20	; 0x01
 236:	5a 83       	std	Y+2, r21	; 0x02
 238:	6b 83       	std	Y+3, r22	; 0x03
 23a:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 23c:	1f 5f       	subi	r17, 0xFF	; 255
 23e:	13 30       	cpi	r17, 0x03	; 3
 240:	d0 f2       	brcs	.-76     	; 0x1f6 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
 242:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f7d7d>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
 246:	00 38       	cpi	r16, 0x80	; 128
 248:	19 f4       	brne	.+6      	; 0x250 <MT6701_SSI_Angle+0x7c>
 24a:	06 e0       	ldi	r16, 0x06	; 6
 24c:	18 e3       	ldi	r17, 0x38	; 56
 24e:	02 c0       	rjmp	.+4      	; 0x254 <MT6701_SSI_Angle+0x80>
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 95 00 	call	0x12a	; 0x12a <MT6701CRC>
 25c:	f8 01       	movw	r30, r16
 25e:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	83 70       	andi	r24, 0x03	; 3
 264:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	ab 81       	ldd	r26, Y+3	; 0x03
 26c:	bc 81       	ldd	r27, Y+4	; 0x04
 26e:	b6 95       	lsr	r27
 270:	a7 95       	ror	r26
 272:	97 95       	ror	r25
 274:	87 95       	ror	r24
 276:	b6 95       	lsr	r27
 278:	a7 95       	ror	r26
 27a:	97 95       	ror	r25
 27c:	87 95       	ror	r24
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	9a 81       	ldd	r25, Y+2	; 0x02
 286:	ab 81       	ldd	r26, Y+3	; 0x03
 288:	bc 81       	ldd	r27, Y+4	; 0x04
 28a:	ac 01       	movw	r20, r24
 28c:	bd 01       	movw	r22, r26
 28e:	68 94       	set
 290:	12 f8       	bld	r1, 2
 292:	76 95       	lsr	r23
 294:	67 95       	ror	r22
 296:	57 95       	ror	r21
 298:	47 95       	ror	r20
 29a:	16 94       	lsr	r1
 29c:	d1 f7       	brne	.-12     	; 0x292 <MT6701_SSI_Angle+0xbe>
 29e:	24 2f       	mov	r18, r20
 2a0:	21 70       	andi	r18, 0x01	; 1
 2a2:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	68 94       	set
 2aa:	13 f8       	bld	r1, 3
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	16 94       	lsr	r1
 2b6:	d1 f7       	brne	.-12     	; 0x2ac <MT6701_SSI_Angle+0xd8>
 2b8:	0e 94 ae 02 	call	0x55c	; 0x55c <__floatunsisf>
 2bc:	23 e5       	ldi	r18, 0x53	; 83
 2be:	34 e0       	ldi	r19, 0x04	; 4
 2c0:	49 ee       	ldi	r20, 0xE9	; 233
 2c2:	5e e3       	ldi	r21, 0x3E	; 62
 2c4:	0e 94 0d 02 	call	0x41a	; 0x41a <__divsf3>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	5f e3       	ldi	r21, 0x3F	; 63
 2d0:	0e 94 a1 01 	call	0x342	; 0x342 <__addsf3>
 2d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fixunssfsi>
 2d8:	f8 01       	movw	r30, r16
 2da:	60 83       	st	Z, r22
 2dc:	71 83       	std	Z+1, r23	; 0x01
 2de:	24 96       	adiw	r28, 0x04	; 4
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
 2ee:	e0 e0       	ldi	r30, 0x00	; 0
 2f0:	f8 e0       	ldi	r31, 0x08	; 8
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	95 e0       	ldi	r25, 0x05	; 5
 2f6:	80 87       	std	Z+8, r24	; 0x08
 2f8:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
 2fa:	80 ec       	ldi	r24, 0xC0	; 192
 2fc:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
 2fe:	82 ec       	ldi	r24, 0xC2	; 194
 300:	87 83       	std	Z+7, r24	; 0x07
 302:	08 95       	ret

00000304 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
 304:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f817c>
 308:	95 ff       	sbrs	r25, 5
 30a:	fc cf       	rjmp	.-8      	; 0x304 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
 30c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f817a>
 310:	08 95       	ret

00000312 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
 312:	80 e8       	ldi	r24, 0x80	; 128
 314:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f817c>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	9c e9       	ldi	r25, 0x9C	; 156
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 320:	08 c0       	rjmp	.+16     	; 0x332 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	a1 09       	sbc	r26, r1
 326:	b1 09       	sbc	r27, r1
 328:	21 f4       	brne	.+8      	; 0x332 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <Status+0x2>
            break;
 330:	04 c0       	rjmp	.+8      	; 0x33a <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 332:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f817c>
 336:	22 23       	and	r18, r18
 338:	a4 f7       	brge	.-24     	; 0x322 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
 33a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f8178>
}
 33e:	08 95       	ret

00000340 <__subsf3>:
 340:	50 58       	subi	r21, 0x80	; 128

00000342 <__addsf3>:
 342:	bb 27       	eor	r27, r27
 344:	aa 27       	eor	r26, r26
 346:	0e 94 b8 01 	call	0x370	; 0x370 <__addsf3x>
 34a:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_round>
 34e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_pscA>
 352:	38 f0       	brcs	.+14     	; 0x362 <__addsf3+0x20>
 354:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_pscB>
 358:	20 f0       	brcs	.+8      	; 0x362 <__addsf3+0x20>
 35a:	39 f4       	brne	.+14     	; 0x36a <__addsf3+0x28>
 35c:	9f 3f       	cpi	r25, 0xFF	; 255
 35e:	19 f4       	brne	.+6      	; 0x366 <__addsf3+0x24>
 360:	26 f4       	brtc	.+8      	; 0x36a <__addsf3+0x28>
 362:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_nan>
 366:	0e f4       	brtc	.+2      	; 0x36a <__addsf3+0x28>
 368:	e0 95       	com	r30
 36a:	e7 fb       	bst	r30, 7
 36c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_inf>

00000370 <__addsf3x>:
 370:	e9 2f       	mov	r30, r25
 372:	0e 94 13 03 	call	0x626	; 0x626 <__fp_split3>
 376:	58 f3       	brcs	.-42     	; 0x34e <__addsf3+0xc>
 378:	ba 17       	cp	r27, r26
 37a:	62 07       	cpc	r22, r18
 37c:	73 07       	cpc	r23, r19
 37e:	84 07       	cpc	r24, r20
 380:	95 07       	cpc	r25, r21
 382:	20 f0       	brcs	.+8      	; 0x38c <__addsf3x+0x1c>
 384:	79 f4       	brne	.+30     	; 0x3a4 <__addsf3x+0x34>
 386:	a6 f5       	brtc	.+104    	; 0x3f0 <__addsf3x+0x80>
 388:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_zero>
 38c:	0e f4       	brtc	.+2      	; 0x390 <__addsf3x+0x20>
 38e:	e0 95       	com	r30
 390:	0b 2e       	mov	r0, r27
 392:	ba 2f       	mov	r27, r26
 394:	a0 2d       	mov	r26, r0
 396:	0b 01       	movw	r0, r22
 398:	b9 01       	movw	r22, r18
 39a:	90 01       	movw	r18, r0
 39c:	0c 01       	movw	r0, r24
 39e:	ca 01       	movw	r24, r20
 3a0:	a0 01       	movw	r20, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	ff 27       	eor	r31, r31
 3a6:	59 1b       	sub	r21, r25
 3a8:	99 f0       	breq	.+38     	; 0x3d0 <__addsf3x+0x60>
 3aa:	59 3f       	cpi	r21, 0xF9	; 249
 3ac:	50 f4       	brcc	.+20     	; 0x3c2 <__addsf3x+0x52>
 3ae:	50 3e       	cpi	r21, 0xE0	; 224
 3b0:	68 f1       	brcs	.+90     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3b2:	1a 16       	cp	r1, r26
 3b4:	f0 40       	sbci	r31, 0x00	; 0
 3b6:	a2 2f       	mov	r26, r18
 3b8:	23 2f       	mov	r18, r19
 3ba:	34 2f       	mov	r19, r20
 3bc:	44 27       	eor	r20, r20
 3be:	58 5f       	subi	r21, 0xF8	; 248
 3c0:	f3 cf       	rjmp	.-26     	; 0x3a8 <__addsf3x+0x38>
 3c2:	46 95       	lsr	r20
 3c4:	37 95       	ror	r19
 3c6:	27 95       	ror	r18
 3c8:	a7 95       	ror	r26
 3ca:	f0 40       	sbci	r31, 0x00	; 0
 3cc:	53 95       	inc	r21
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <__addsf3x+0x52>
 3d0:	7e f4       	brtc	.+30     	; 0x3f0 <__addsf3x+0x80>
 3d2:	1f 16       	cp	r1, r31
 3d4:	ba 0b       	sbc	r27, r26
 3d6:	62 0b       	sbc	r22, r18
 3d8:	73 0b       	sbc	r23, r19
 3da:	84 0b       	sbc	r24, r20
 3dc:	ba f0       	brmi	.+46     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3de:	91 50       	subi	r25, 0x01	; 1
 3e0:	a1 f0       	breq	.+40     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e2:	ff 0f       	add	r31, r31
 3e4:	bb 1f       	adc	r27, r27
 3e6:	66 1f       	adc	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	c2 f7       	brpl	.-16     	; 0x3de <__addsf3x+0x6e>
 3ee:	0e c0       	rjmp	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f0:	ba 0f       	add	r27, r26
 3f2:	62 1f       	adc	r22, r18
 3f4:	73 1f       	adc	r23, r19
 3f6:	84 1f       	adc	r24, r20
 3f8:	48 f4       	brcc	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fa:	87 95       	ror	r24
 3fc:	77 95       	ror	r23
 3fe:	67 95       	ror	r22
 400:	b7 95       	ror	r27
 402:	f7 95       	ror	r31
 404:	9e 3f       	cpi	r25, 0xFE	; 254
 406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	b0 cf       	rjmp	.-160    	; 0x36a <__addsf3+0x28>
 40a:	93 95       	inc	r25
 40c:	88 0f       	add	r24, r24
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	99 27       	eor	r25, r25
 412:	ee 0f       	add	r30, r30
 414:	97 95       	ror	r25
 416:	87 95       	ror	r24
 418:	08 95       	ret

0000041a <__divsf3>:
 41a:	0e 94 21 02 	call	0x442	; 0x442 <__divsf3x>
 41e:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_round>
 422:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_pscB>
 426:	58 f0       	brcs	.+22     	; 0x43e <__divsf3+0x24>
 428:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_pscA>
 42c:	40 f0       	brcs	.+16     	; 0x43e <__divsf3+0x24>
 42e:	29 f4       	brne	.+10     	; 0x43a <__divsf3+0x20>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	29 f0       	breq	.+10     	; 0x43e <__divsf3+0x24>
 434:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_inf>
 438:	51 11       	cpse	r21, r1
 43a:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_szero>
 43e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_nan>

00000442 <__divsf3x>:
 442:	0e 94 13 03 	call	0x626	; 0x626 <__fp_split3>
 446:	68 f3       	brcs	.-38     	; 0x422 <__divsf3+0x8>

00000448 <__divsf3_pse>:
 448:	99 23       	and	r25, r25
 44a:	b1 f3       	breq	.-20     	; 0x438 <__divsf3+0x1e>
 44c:	55 23       	and	r21, r21
 44e:	91 f3       	breq	.-28     	; 0x434 <__divsf3+0x1a>
 450:	95 1b       	sub	r25, r21
 452:	55 0b       	sbc	r21, r21
 454:	bb 27       	eor	r27, r27
 456:	aa 27       	eor	r26, r26
 458:	62 17       	cp	r22, r18
 45a:	73 07       	cpc	r23, r19
 45c:	84 07       	cpc	r24, r20
 45e:	38 f0       	brcs	.+14     	; 0x46e <__divsf3_pse+0x26>
 460:	9f 5f       	subi	r25, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	44 1f       	adc	r20, r20
 46a:	aa 1f       	adc	r26, r26
 46c:	a9 f3       	breq	.-22     	; 0x458 <__divsf3_pse+0x10>
 46e:	35 d0       	rcall	.+106    	; 0x4da <__divsf3_pse+0x92>
 470:	0e 2e       	mov	r0, r30
 472:	3a f0       	brmi	.+14     	; 0x482 <__divsf3_pse+0x3a>
 474:	e0 e8       	ldi	r30, 0x80	; 128
 476:	32 d0       	rcall	.+100    	; 0x4dc <__divsf3_pse+0x94>
 478:	91 50       	subi	r25, 0x01	; 1
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	e6 95       	lsr	r30
 47e:	00 1c       	adc	r0, r0
 480:	ca f7       	brpl	.-14     	; 0x474 <__divsf3_pse+0x2c>
 482:	2b d0       	rcall	.+86     	; 0x4da <__divsf3_pse+0x92>
 484:	fe 2f       	mov	r31, r30
 486:	29 d0       	rcall	.+82     	; 0x4da <__divsf3_pse+0x92>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	bb 1f       	adc	r27, r27
 490:	26 17       	cp	r18, r22
 492:	37 07       	cpc	r19, r23
 494:	48 07       	cpc	r20, r24
 496:	ab 07       	cpc	r26, r27
 498:	b0 e8       	ldi	r27, 0x80	; 128
 49a:	09 f0       	breq	.+2      	; 0x49e <__divsf3_pse+0x56>
 49c:	bb 0b       	sbc	r27, r27
 49e:	80 2d       	mov	r24, r0
 4a0:	bf 01       	movw	r22, r30
 4a2:	ff 27       	eor	r31, r31
 4a4:	93 58       	subi	r25, 0x83	; 131
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	3a f0       	brmi	.+14     	; 0x4b8 <__divsf3_pse+0x70>
 4aa:	9e 3f       	cpi	r25, 0xFE	; 254
 4ac:	51 05       	cpc	r21, r1
 4ae:	78 f0       	brcs	.+30     	; 0x4ce <__divsf3_pse+0x86>
 4b0:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_inf>
 4b4:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_szero>
 4b8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ba:	e4 f3       	brlt	.-8      	; 0x4b4 <__divsf3_pse+0x6c>
 4bc:	98 3e       	cpi	r25, 0xE8	; 232
 4be:	d4 f3       	brlt	.-12     	; 0x4b4 <__divsf3_pse+0x6c>
 4c0:	86 95       	lsr	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9f 5f       	subi	r25, 0xFF	; 255
 4cc:	c9 f7       	brne	.-14     	; 0x4c0 <__divsf3_pse+0x78>
 4ce:	88 0f       	add	r24, r24
 4d0:	91 1d       	adc	r25, r1
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret
 4da:	e1 e0       	ldi	r30, 0x01	; 1
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	bb 1f       	adc	r27, r27
 4e4:	62 17       	cp	r22, r18
 4e6:	73 07       	cpc	r23, r19
 4e8:	84 07       	cpc	r24, r20
 4ea:	ba 07       	cpc	r27, r26
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__divsf3_pse+0xae>
 4ee:	62 1b       	sub	r22, r18
 4f0:	73 0b       	sbc	r23, r19
 4f2:	84 0b       	sbc	r24, r20
 4f4:	ba 0b       	sbc	r27, r26
 4f6:	ee 1f       	adc	r30, r30
 4f8:	88 f7       	brcc	.-30     	; 0x4dc <__divsf3_pse+0x94>
 4fa:	e0 95       	com	r30
 4fc:	08 95       	ret

000004fe <__fixunssfsi>:
 4fe:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_splitA>
 502:	88 f0       	brcs	.+34     	; 0x526 <__fixunssfsi+0x28>
 504:	9f 57       	subi	r25, 0x7F	; 127
 506:	98 f0       	brcs	.+38     	; 0x52e <__fixunssfsi+0x30>
 508:	b9 2f       	mov	r27, r25
 50a:	99 27       	eor	r25, r25
 50c:	b7 51       	subi	r27, 0x17	; 23
 50e:	b0 f0       	brcs	.+44     	; 0x53c <__fixunssfsi+0x3e>
 510:	e1 f0       	breq	.+56     	; 0x54a <__fixunssfsi+0x4c>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a f0       	brmi	.+6      	; 0x522 <__fixunssfsi+0x24>
 51c:	ba 95       	dec	r27
 51e:	c9 f7       	brne	.-14     	; 0x512 <__fixunssfsi+0x14>
 520:	14 c0       	rjmp	.+40     	; 0x54a <__fixunssfsi+0x4c>
 522:	b1 30       	cpi	r27, 0x01	; 1
 524:	91 f0       	breq	.+36     	; 0x54a <__fixunssfsi+0x4c>
 526:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_zero>
 52a:	b1 e0       	ldi	r27, 0x01	; 1
 52c:	08 95       	ret
 52e:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_zero>
 532:	67 2f       	mov	r22, r23
 534:	78 2f       	mov	r23, r24
 536:	88 27       	eor	r24, r24
 538:	b8 5f       	subi	r27, 0xF8	; 248
 53a:	39 f0       	breq	.+14     	; 0x54a <__fixunssfsi+0x4c>
 53c:	b9 3f       	cpi	r27, 0xF9	; 249
 53e:	cc f3       	brlt	.-14     	; 0x532 <__fixunssfsi+0x34>
 540:	86 95       	lsr	r24
 542:	77 95       	ror	r23
 544:	67 95       	ror	r22
 546:	b3 95       	inc	r27
 548:	d9 f7       	brne	.-10     	; 0x540 <__fixunssfsi+0x42>
 54a:	3e f4       	brtc	.+14     	; 0x55a <__fixunssfsi+0x5c>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__floatunsisf>:
 55c:	e8 94       	clt
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__floatsisf+0x12>

00000560 <__floatsisf>:
 560:	97 fb       	bst	r25, 7
 562:	3e f4       	brtc	.+14     	; 0x572 <__floatsisf+0x12>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	99 23       	and	r25, r25
 574:	a9 f0       	breq	.+42     	; 0x5a0 <__floatsisf+0x40>
 576:	f9 2f       	mov	r31, r25
 578:	96 e9       	ldi	r25, 0x96	; 150
 57a:	bb 27       	eor	r27, r27
 57c:	93 95       	inc	r25
 57e:	f6 95       	lsr	r31
 580:	87 95       	ror	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f1 11       	cpse	r31, r1
 58a:	f8 cf       	rjmp	.-16     	; 0x57c <__floatsisf+0x1c>
 58c:	fa f4       	brpl	.+62     	; 0x5cc <__floatsisf+0x6c>
 58e:	bb 0f       	add	r27, r27
 590:	11 f4       	brne	.+4      	; 0x596 <__floatsisf+0x36>
 592:	60 ff       	sbrs	r22, 0
 594:	1b c0       	rjmp	.+54     	; 0x5cc <__floatsisf+0x6c>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <__floatsisf+0x6c>
 5a0:	88 23       	and	r24, r24
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <__floatsisf+0x48>
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	11 c0       	rjmp	.+34     	; 0x5ca <__floatsisf+0x6a>
 5a8:	77 23       	and	r23, r23
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__floatsisf+0x54>
 5ac:	9e e8       	ldi	r25, 0x8E	; 142
 5ae:	87 2f       	mov	r24, r23
 5b0:	76 2f       	mov	r23, r22
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__floatsisf+0x5e>
 5b4:	66 23       	and	r22, r22
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__floatsisf+0x74>
 5b8:	96 e8       	ldi	r25, 0x86	; 134
 5ba:	86 2f       	mov	r24, r22
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	2a f0       	brmi	.+10     	; 0x5cc <__floatsisf+0x6c>
 5c2:	9a 95       	dec	r25
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	da f7       	brpl	.-10     	; 0x5c2 <__floatsisf+0x62>
 5cc:	88 0f       	add	r24, r24
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret

000005d6 <__fp_inf>:
 5d6:	97 f9       	bld	r25, 7
 5d8:	9f 67       	ori	r25, 0x7F	; 127
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <__fp_nan>:
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	80 ec       	ldi	r24, 0xC0	; 192
 5e6:	08 95       	ret

000005e8 <__fp_pscA>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	09 06       	cpc	r0, r25
 5f4:	08 95       	ret

000005f6 <__fp_pscB>:
 5f6:	00 24       	eor	r0, r0
 5f8:	0a 94       	dec	r0
 5fa:	12 16       	cp	r1, r18
 5fc:	13 06       	cpc	r1, r19
 5fe:	14 06       	cpc	r1, r20
 600:	05 06       	cpc	r0, r21
 602:	08 95       	ret

00000604 <__fp_round>:
 604:	09 2e       	mov	r0, r25
 606:	03 94       	inc	r0
 608:	00 0c       	add	r0, r0
 60a:	11 f4       	brne	.+4      	; 0x610 <__fp_round+0xc>
 60c:	88 23       	and	r24, r24
 60e:	52 f0       	brmi	.+20     	; 0x624 <__fp_round+0x20>
 610:	bb 0f       	add	r27, r27
 612:	40 f4       	brcc	.+16     	; 0x624 <__fp_round+0x20>
 614:	bf 2b       	or	r27, r31
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0x18>
 618:	60 ff       	sbrs	r22, 0
 61a:	04 c0       	rjmp	.+8      	; 0x624 <__fp_round+0x20>
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__fp_split3>:
 626:	57 fd       	sbrc	r21, 7
 628:	90 58       	subi	r25, 0x80	; 128
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	59 f0       	breq	.+22     	; 0x646 <__fp_splitA+0x10>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	71 f0       	breq	.+28     	; 0x650 <__fp_splitA+0x1a>
 634:	47 95       	ror	r20

00000636 <__fp_splitA>:
 636:	88 0f       	add	r24, r24
 638:	97 fb       	bst	r25, 7
 63a:	99 1f       	adc	r25, r25
 63c:	61 f0       	breq	.+24     	; 0x656 <__fp_splitA+0x20>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	79 f0       	breq	.+30     	; 0x660 <__fp_splitA+0x2a>
 642:	87 95       	ror	r24
 644:	08 95       	ret
 646:	12 16       	cp	r1, r18
 648:	13 06       	cpc	r1, r19
 64a:	14 06       	cpc	r1, r20
 64c:	55 1f       	adc	r21, r21
 64e:	f2 cf       	rjmp	.-28     	; 0x634 <__fp_split3+0xe>
 650:	46 95       	lsr	r20
 652:	f1 df       	rcall	.-30     	; 0x636 <__fp_splitA>
 654:	08 c0       	rjmp	.+16     	; 0x666 <__fp_splitA+0x30>
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	99 1f       	adc	r25, r25
 65e:	f1 cf       	rjmp	.-30     	; 0x642 <__fp_splitA+0xc>
 660:	86 95       	lsr	r24
 662:	71 05       	cpc	r23, r1
 664:	61 05       	cpc	r22, r1
 666:	08 94       	sec
 668:	08 95       	ret

0000066a <__fp_zero>:
 66a:	e8 94       	clt

0000066c <__fp_szero>:
 66c:	bb 27       	eor	r27, r27
 66e:	66 27       	eor	r22, r22
 670:	77 27       	eor	r23, r23
 672:	cb 01       	movw	r24, r22
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret

00000678 <ccp_write_io>:
 678:	dc 01       	movw	r26, r24
 67a:	28 ed       	ldi	r18, 0xD8	; 216
 67c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f79ac>
 680:	6c 93       	st	X, r22
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
