
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  00008542  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  00000616  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000688  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f3f  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000218b  00000000  00000000  000036e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b53  00000000  00000000  00005872  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ac  00000000  00000000  000063c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016b8  00000000  00000000  00006574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000367  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00007f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 31       	cpi	r26, 0x13	; 19
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  98:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 99 02 	call	0x532	; 0x532 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 99 02 	call	0x532	; 0x532 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
  b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f7b21>
  b8:	80 fd       	sbrc	r24, 0
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <CLOCK_INHF_clock_init+0x14>
  bc:	08 95       	ret

000000be <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
  c2:	8b 01       	movw	r16, r22
  c4:	9c 01       	movw	r18, r24
  c6:	0f 2e       	mov	r0, r31
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	fa 95       	dec	r31
  d4:	d1 f7       	brne	.-12     	; 0xca <crc6_mt6701_lookup+0xc>
  d6:	f0 2d       	mov	r31, r0
  d8:	0f 73       	andi	r16, 0x3F	; 63
  da:	11 27       	eor	r17, r17
  dc:	22 27       	eor	r18, r18
  de:	33 27       	eor	r19, r19
  e0:	f8 01       	movw	r30, r16
  e2:	ee 5b       	subi	r30, 0xBE	; 190
  e4:	fa 47       	sbci	r31, 0x7A	; 122
  e6:	40 81       	ld	r20, Z
  e8:	8b 01       	movw	r16, r22
  ea:	9c 01       	movw	r18, r24
  ec:	68 94       	set
  ee:	15 f8       	bld	r1, 5
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	17 95       	ror	r17
  f6:	07 95       	ror	r16
  f8:	16 94       	lsr	r1
  fa:	d1 f7       	brne	.-12     	; 0xf0 <crc6_mt6701_lookup+0x32>
  fc:	0f 73       	andi	r16, 0x3F	; 63
  fe:	11 27       	eor	r17, r17
 100:	22 27       	eor	r18, r18
 102:	33 27       	eor	r19, r19
 104:	04 27       	eor	r16, r20
 106:	f8 01       	movw	r30, r16
 108:	ee 5b       	subi	r30, 0xBE	; 190
 10a:	fa 47       	sbci	r31, 0x7A	; 122
 10c:	20 81       	ld	r18, Z
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	99 27       	eor	r25, r25
 116:	aa 27       	eor	r26, r26
 118:	bb 27       	eor	r27, r27
 11a:	82 27       	eor	r24, r18
 11c:	fc 01       	movw	r30, r24
 11e:	ee 5b       	subi	r30, 0xBE	; 190
 120:	fa 47       	sbci	r31, 0x7A	; 122
}
 122:	80 81       	ld	r24, Z
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
 12a:	cf 93       	push	r28
 12c:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
 136:	c8 2f       	mov	r28, r24
 138:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	68 94       	set
 140:	15 f8       	bld	r1, 5
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	77 95       	ror	r23
 148:	67 95       	ror	r22
 14a:	16 94       	lsr	r1
 14c:	d1 f7       	brne	.-12     	; 0x142 <MT6701CRC+0x18>
 14e:	60 83       	st	Z, r22
 150:	71 83       	std	Z+1, r23	; 0x01
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	c8 13       	cpse	r28, r24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <MT6701CRC+0x38>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	89 2f       	mov	r24, r25
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <GPIO_init>:
 * - PB2 as TX for dummy data sending with pull-up enabled.
 * - PB3 as RX (MISO, MT6701 DO) with pull-up enabled.
 * - PA7 as SS (MT6701 CSN) output, initially set high.
 */
void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
 168:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f80a0>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
 16c:	e0 e2       	ldi	r30, 0x20	; 32
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MAX), PB3 as input (USART0 RX as MISO (MT6701 DO))
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	92 83       	std	Z+2, r25	; 0x02
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
 17c:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f4 e0       	ldi	r31, 0x04	; 4
 182:	92 ec       	ldi	r25, 0xC2	; 194
 184:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
 186:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MIN)
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	82 83       	std	Z+2, r24	; 0x02
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
 18c:	90 ec       	ldi	r25, 0xC0	; 192
 18e:	95 83       	std	Z+5, r25	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
 190:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
 192:	85 8b       	std	Z+21, r24	; 0x15
 194:	08 95       	ret

00000196 <main>:
 * @return int (not used, since the function never exits).
 */
int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
 196:	0e 94 50 00 	call	0xa0	; 0xa0 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
 19e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MT6701_SSI_Angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f e7       	ldi	r18, 0x7F	; 127
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	96 e0       	ldi	r25, 0x06	; 6
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x18>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x22>
 1b8:	00 00       	nop
        _delay_ms(100); ///< Wait 100ms before the next read
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MT6701_SSI_Angle>
 1c0:	2f e7       	ldi	r18, 0x7F	; 127
 1c2:	8a e1       	ldi	r24, 0x1A	; 26
 1c4:	96 e0       	ldi	r25, 0x06	; 6
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x30>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x3a>
 1d0:	00 00       	nop
 1d2:	e7 cf       	rjmp	.-50     	; 0x1a2 <main+0xc>

000001d4 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <MT6701_SSI_Angle+0xa>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <MT6701_SSI_Angle+0xc>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
 1e6:	19 82       	std	Y+1, r1	; 0x01
 1e8:	1a 82       	std	Y+2, r1	; 0x02
 1ea:	1b 82       	std	Y+3, r1	; 0x03
 1ec:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
 1ee:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f7ec4>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	24 c0       	rjmp	.+72     	; 0x23e <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
 1f6:	8f e6       	ldi	r24, 0x6F	; 111
 1f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
 1fc:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f82c2>
 200:	86 ff       	sbrs	r24, 6
 202:	fc cf       	rjmp	.-8      	; 0x1fc <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f8 e0       	ldi	r31, 0x08	; 8
 208:	84 81       	ldd	r24, Z+4	; 0x04
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	ab 81       	ldd	r26, Y+3	; 0x03
 214:	bc 81       	ldd	r27, Y+4	; 0x04
 216:	ba 2f       	mov	r27, r26
 218:	a9 2f       	mov	r26, r25
 21a:	98 2f       	mov	r25, r24
 21c:	88 27       	eor	r24, r24
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	ab 83       	std	Y+3, r26	; 0x03
 224:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
 226:	0e 94 82 01 	call	0x304	; 0x304 <USART0_readChar>
 22a:	49 81       	ldd	r20, Y+1	; 0x01
 22c:	5a 81       	ldd	r21, Y+2	; 0x02
 22e:	6b 81       	ldd	r22, Y+3	; 0x03
 230:	7c 81       	ldd	r23, Y+4	; 0x04
 232:	48 2b       	or	r20, r24
 234:	49 83       	std	Y+1, r20	; 0x01
 236:	5a 83       	std	Y+2, r21	; 0x02
 238:	6b 83       	std	Y+3, r22	; 0x03
 23a:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 23c:	1f 5f       	subi	r17, 0xFF	; 255
 23e:	13 30       	cpi	r17, 0x03	; 3
 240:	d0 f2       	brcs	.-76     	; 0x1f6 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
 242:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f7ec3>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
 246:	00 38       	cpi	r16, 0x80	; 128
 248:	19 f4       	brne	.+6      	; 0x250 <MT6701_SSI_Angle+0x7c>
 24a:	08 e0       	ldi	r16, 0x08	; 8
 24c:	18 e3       	ldi	r17, 0x38	; 56
 24e:	02 c0       	rjmp	.+4      	; 0x254 <MT6701_SSI_Angle+0x80>
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 95 00 	call	0x12a	; 0x12a <MT6701CRC>
 25c:	f8 01       	movw	r30, r16
 25e:	87 83       	std	Z+7, r24	; 0x07
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	ab 81       	ldd	r26, Y+3	; 0x03
 266:	bc 81       	ldd	r27, Y+4	; 0x04
 268:	28 2f       	mov	r18, r24
 26a:	23 70       	andi	r18, 0x03	; 3
 26c:	24 83       	std	Z+4, r18	; 0x04
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
 26e:	ac 01       	movw	r20, r24
 270:	bd 01       	movw	r22, r26
 272:	76 95       	lsr	r23
 274:	67 95       	ror	r22
 276:	57 95       	ror	r21
 278:	47 95       	ror	r20
 27a:	76 95       	lsr	r23
 27c:	67 95       	ror	r22
 27e:	57 95       	ror	r21
 280:	47 95       	ror	r20
 282:	24 2f       	mov	r18, r20
 284:	21 70       	andi	r18, 0x01	; 1
 286:	25 83       	std	Z+5, r18	; 0x05
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
 288:	ac 01       	movw	r20, r24
 28a:	bd 01       	movw	r22, r26
 28c:	68 94       	set
 28e:	12 f8       	bld	r1, 2
 290:	76 95       	lsr	r23
 292:	67 95       	ror	r22
 294:	57 95       	ror	r21
 296:	47 95       	ror	r20
 298:	16 94       	lsr	r1
 29a:	d1 f7       	brne	.-12     	; 0x290 <MT6701_SSI_Angle+0xbc>
 29c:	24 2f       	mov	r18, r20
 29e:	21 70       	andi	r18, 0x01	; 1
 2a0:	26 83       	std	Z+6, r18	; 0x06
	    sensor->Angle = (double)(received_data >> 4) / 45.51111111;  // Compute angle in degrees
 2a2:	bc 01       	movw	r22, r24
 2a4:	cd 01       	movw	r24, r26
 2a6:	68 94       	set
 2a8:	13 f8       	bld	r1, 3
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	77 95       	ror	r23
 2b0:	67 95       	ror	r22
 2b2:	16 94       	lsr	r1
 2b4:	d1 f7       	brne	.-12     	; 0x2aa <MT6701_SSI_Angle+0xd6>
 2b6:	0e 94 0b 02 	call	0x416	; 0x416 <__floatunsisf>
 2ba:	21 e6       	ldi	r18, 0x61	; 97
 2bc:	3b e0       	ldi	r19, 0x0B	; 11
 2be:	46 e3       	ldi	r20, 0x36	; 54
 2c0:	52 e4       	ldi	r21, 0x42	; 66
 2c2:	0e 94 99 01 	call	0x332	; 0x332 <__divsf3>
 2c6:	f8 01       	movw	r30, r16
 2c8:	60 83       	st	Z, r22
 2ca:	71 83       	std	Z+1, r23	; 0x01
 2cc:	82 83       	std	Z+2, r24	; 0x02
 2ce:	93 83       	std	Z+3, r25	; 0x03
 2d0:	24 96       	adiw	r28, 0x04	; 4
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
 2e0:	e0 e0       	ldi	r30, 0x00	; 0
 2e2:	f8 e0       	ldi	r31, 0x08	; 8
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	95 e0       	ldi	r25, 0x05	; 5
 2e8:	80 87       	std	Z+8, r24	; 0x08
 2ea:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
 2ec:	80 ec       	ldi	r24, 0xC0	; 192
 2ee:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
 2f0:	82 ec       	ldi	r24, 0xC2	; 194
 2f2:	87 83       	std	Z+7, r24	; 0x07
 2f4:	08 95       	ret

000002f6 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
 2f6:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f82c2>
 2fa:	95 ff       	sbrs	r25, 5
 2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
 2fe:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f82c0>
 302:	08 95       	ret

00000304 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f82c2>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
 30a:	80 e4       	ldi	r24, 0x40	; 64
 30c:	9c e9       	ldi	r25, 0x9C	; 156
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 312:	08 c0       	rjmp	.+16     	; 0x324 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	a1 09       	sbc	r26, r1
 318:	b1 09       	sbc	r27, r1
 31a:	21 f4       	brne	.+8      	; 0x324 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
 322:	04 c0       	rjmp	.+8      	; 0x32c <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 324:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f82c2>
 328:	22 23       	and	r18, r18
 32a:	a4 f7       	brge	.-24     	; 0x314 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
 32c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f82be>
}
 330:	08 95       	ret

00000332 <__divsf3>:
 332:	0e 94 ad 01 	call	0x35a	; 0x35a <__divsf3x>
 336:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_round>
 33a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_pscB>
 33e:	58 f0       	brcs	.+22     	; 0x356 <__divsf3+0x24>
 340:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscA>
 344:	40 f0       	brcs	.+16     	; 0x356 <__divsf3+0x24>
 346:	29 f4       	brne	.+10     	; 0x352 <__divsf3+0x20>
 348:	5f 3f       	cpi	r21, 0xFF	; 255
 34a:	29 f0       	breq	.+10     	; 0x356 <__divsf3+0x24>
 34c:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 350:	51 11       	cpse	r21, r1
 352:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 356:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_nan>

0000035a <__divsf3x>:
 35a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_split3>
 35e:	68 f3       	brcs	.-38     	; 0x33a <__divsf3+0x8>

00000360 <__divsf3_pse>:
 360:	99 23       	and	r25, r25
 362:	b1 f3       	breq	.-20     	; 0x350 <__divsf3+0x1e>
 364:	55 23       	and	r21, r21
 366:	91 f3       	breq	.-28     	; 0x34c <__divsf3+0x1a>
 368:	95 1b       	sub	r25, r21
 36a:	55 0b       	sbc	r21, r21
 36c:	bb 27       	eor	r27, r27
 36e:	aa 27       	eor	r26, r26
 370:	62 17       	cp	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	38 f0       	brcs	.+14     	; 0x386 <__divsf3_pse+0x26>
 378:	9f 5f       	subi	r25, 0xFF	; 255
 37a:	5f 4f       	sbci	r21, 0xFF	; 255
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	44 1f       	adc	r20, r20
 382:	aa 1f       	adc	r26, r26
 384:	a9 f3       	breq	.-22     	; 0x370 <__divsf3_pse+0x10>
 386:	35 d0       	rcall	.+106    	; 0x3f2 <__divsf3_pse+0x92>
 388:	0e 2e       	mov	r0, r30
 38a:	3a f0       	brmi	.+14     	; 0x39a <__divsf3_pse+0x3a>
 38c:	e0 e8       	ldi	r30, 0x80	; 128
 38e:	32 d0       	rcall	.+100    	; 0x3f4 <__divsf3_pse+0x94>
 390:	91 50       	subi	r25, 0x01	; 1
 392:	50 40       	sbci	r21, 0x00	; 0
 394:	e6 95       	lsr	r30
 396:	00 1c       	adc	r0, r0
 398:	ca f7       	brpl	.-14     	; 0x38c <__divsf3_pse+0x2c>
 39a:	2b d0       	rcall	.+86     	; 0x3f2 <__divsf3_pse+0x92>
 39c:	fe 2f       	mov	r31, r30
 39e:	29 d0       	rcall	.+82     	; 0x3f2 <__divsf3_pse+0x92>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	bb 1f       	adc	r27, r27
 3a8:	26 17       	cp	r18, r22
 3aa:	37 07       	cpc	r19, r23
 3ac:	48 07       	cpc	r20, r24
 3ae:	ab 07       	cpc	r26, r27
 3b0:	b0 e8       	ldi	r27, 0x80	; 128
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__divsf3_pse+0x56>
 3b4:	bb 0b       	sbc	r27, r27
 3b6:	80 2d       	mov	r24, r0
 3b8:	bf 01       	movw	r22, r30
 3ba:	ff 27       	eor	r31, r31
 3bc:	93 58       	subi	r25, 0x83	; 131
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	3a f0       	brmi	.+14     	; 0x3d0 <__divsf3_pse+0x70>
 3c2:	9e 3f       	cpi	r25, 0xFE	; 254
 3c4:	51 05       	cpc	r21, r1
 3c6:	78 f0       	brcs	.+30     	; 0x3e6 <__divsf3_pse+0x86>
 3c8:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 3cc:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 3d0:	5f 3f       	cpi	r21, 0xFF	; 255
 3d2:	e4 f3       	brlt	.-8      	; 0x3cc <__divsf3_pse+0x6c>
 3d4:	98 3e       	cpi	r25, 0xE8	; 232
 3d6:	d4 f3       	brlt	.-12     	; 0x3cc <__divsf3_pse+0x6c>
 3d8:	86 95       	lsr	r24
 3da:	77 95       	ror	r23
 3dc:	67 95       	ror	r22
 3de:	b7 95       	ror	r27
 3e0:	f7 95       	ror	r31
 3e2:	9f 5f       	subi	r25, 0xFF	; 255
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__divsf3_pse+0x78>
 3e6:	88 0f       	add	r24, r24
 3e8:	91 1d       	adc	r25, r1
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	bb 1f       	adc	r27, r27
 3fc:	62 17       	cp	r22, r18
 3fe:	73 07       	cpc	r23, r19
 400:	84 07       	cpc	r24, r20
 402:	ba 07       	cpc	r27, r26
 404:	20 f0       	brcs	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	62 1b       	sub	r22, r18
 408:	73 0b       	sbc	r23, r19
 40a:	84 0b       	sbc	r24, r20
 40c:	ba 0b       	sbc	r27, r26
 40e:	ee 1f       	adc	r30, r30
 410:	88 f7       	brcc	.-30     	; 0x3f4 <__divsf3_pse+0x94>
 412:	e0 95       	com	r30
 414:	08 95       	ret

00000416 <__floatunsisf>:
 416:	e8 94       	clt
 418:	09 c0       	rjmp	.+18     	; 0x42c <__floatsisf+0x12>

0000041a <__floatsisf>:
 41a:	97 fb       	bst	r25, 7
 41c:	3e f4       	brtc	.+14     	; 0x42c <__floatsisf+0x12>
 41e:	90 95       	com	r25
 420:	80 95       	com	r24
 422:	70 95       	com	r23
 424:	61 95       	neg	r22
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	8f 4f       	sbci	r24, 0xFF	; 255
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	99 23       	and	r25, r25
 42e:	a9 f0       	breq	.+42     	; 0x45a <__floatsisf+0x40>
 430:	f9 2f       	mov	r31, r25
 432:	96 e9       	ldi	r25, 0x96	; 150
 434:	bb 27       	eor	r27, r27
 436:	93 95       	inc	r25
 438:	f6 95       	lsr	r31
 43a:	87 95       	ror	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b7 95       	ror	r27
 442:	f1 11       	cpse	r31, r1
 444:	f8 cf       	rjmp	.-16     	; 0x436 <__floatsisf+0x1c>
 446:	fa f4       	brpl	.+62     	; 0x486 <__floatsisf+0x6c>
 448:	bb 0f       	add	r27, r27
 44a:	11 f4       	brne	.+4      	; 0x450 <__floatsisf+0x36>
 44c:	60 ff       	sbrs	r22, 0
 44e:	1b c0       	rjmp	.+54     	; 0x486 <__floatsisf+0x6c>
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	8f 4f       	sbci	r24, 0xFF	; 255
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	16 c0       	rjmp	.+44     	; 0x486 <__floatsisf+0x6c>
 45a:	88 23       	and	r24, r24
 45c:	11 f0       	breq	.+4      	; 0x462 <__floatsisf+0x48>
 45e:	96 e9       	ldi	r25, 0x96	; 150
 460:	11 c0       	rjmp	.+34     	; 0x484 <__floatsisf+0x6a>
 462:	77 23       	and	r23, r23
 464:	21 f0       	breq	.+8      	; 0x46e <__floatsisf+0x54>
 466:	9e e8       	ldi	r25, 0x8E	; 142
 468:	87 2f       	mov	r24, r23
 46a:	76 2f       	mov	r23, r22
 46c:	05 c0       	rjmp	.+10     	; 0x478 <__floatsisf+0x5e>
 46e:	66 23       	and	r22, r22
 470:	71 f0       	breq	.+28     	; 0x48e <__floatsisf+0x74>
 472:	96 e8       	ldi	r25, 0x86	; 134
 474:	86 2f       	mov	r24, r22
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	2a f0       	brmi	.+10     	; 0x486 <__floatsisf+0x6c>
 47c:	9a 95       	dec	r25
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	da f7       	brpl	.-10     	; 0x47c <__floatsisf+0x62>
 486:	88 0f       	add	r24, r24
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	97 f9       	bld	r25, 7
 48e:	08 95       	ret

00000490 <__fp_inf>:
 490:	97 f9       	bld	r25, 7
 492:	9f 67       	ori	r25, 0x7F	; 127
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	08 95       	ret

0000049c <__fp_nan>:
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	08 95       	ret

000004a2 <__fp_pscA>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	16 16       	cp	r1, r22
 4a8:	17 06       	cpc	r1, r23
 4aa:	18 06       	cpc	r1, r24
 4ac:	09 06       	cpc	r0, r25
 4ae:	08 95       	ret

000004b0 <__fp_pscB>:
 4b0:	00 24       	eor	r0, r0
 4b2:	0a 94       	dec	r0
 4b4:	12 16       	cp	r1, r18
 4b6:	13 06       	cpc	r1, r19
 4b8:	14 06       	cpc	r1, r20
 4ba:	05 06       	cpc	r0, r21
 4bc:	08 95       	ret

000004be <__fp_round>:
 4be:	09 2e       	mov	r0, r25
 4c0:	03 94       	inc	r0
 4c2:	00 0c       	add	r0, r0
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0xc>
 4c6:	88 23       	and	r24, r24
 4c8:	52 f0       	brmi	.+20     	; 0x4de <__fp_round+0x20>
 4ca:	bb 0f       	add	r27, r27
 4cc:	40 f4       	brcc	.+16     	; 0x4de <__fp_round+0x20>
 4ce:	bf 2b       	or	r27, r31
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__fp_round+0x18>
 4d2:	60 ff       	sbrs	r22, 0
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <__fp_round+0x20>
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__fp_split3>:
 4e0:	57 fd       	sbrc	r21, 7
 4e2:	90 58       	subi	r25, 0x80	; 128
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	59 f0       	breq	.+22     	; 0x500 <__fp_splitA+0x10>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	71 f0       	breq	.+28     	; 0x50a <__fp_splitA+0x1a>
 4ee:	47 95       	ror	r20

000004f0 <__fp_splitA>:
 4f0:	88 0f       	add	r24, r24
 4f2:	97 fb       	bst	r25, 7
 4f4:	99 1f       	adc	r25, r25
 4f6:	61 f0       	breq	.+24     	; 0x510 <__fp_splitA+0x20>
 4f8:	9f 3f       	cpi	r25, 0xFF	; 255
 4fa:	79 f0       	breq	.+30     	; 0x51a <__fp_splitA+0x2a>
 4fc:	87 95       	ror	r24
 4fe:	08 95       	ret
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	55 1f       	adc	r21, r21
 508:	f2 cf       	rjmp	.-28     	; 0x4ee <__fp_split3+0xe>
 50a:	46 95       	lsr	r20
 50c:	f1 df       	rcall	.-30     	; 0x4f0 <__fp_splitA>
 50e:	08 c0       	rjmp	.+16     	; 0x520 <__fp_splitA+0x30>
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	18 06       	cpc	r1, r24
 516:	99 1f       	adc	r25, r25
 518:	f1 cf       	rjmp	.-30     	; 0x4fc <__fp_splitA+0xc>
 51a:	86 95       	lsr	r24
 51c:	71 05       	cpc	r23, r1
 51e:	61 05       	cpc	r22, r1
 520:	08 94       	sec
 522:	08 95       	ret

00000524 <__fp_zero>:
 524:	e8 94       	clt

00000526 <__fp_szero>:
 526:	bb 27       	eor	r27, r27
 528:	66 27       	eor	r22, r22
 52a:	77 27       	eor	r23, r23
 52c:	cb 01       	movw	r24, r22
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <ccp_write_io>:
 532:	dc 01       	movw	r26, r24
 534:	28 ed       	ldi	r18, 0xD8	; 216
 536:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f7af2>
 53a:	6c 93       	st	X, r22
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
