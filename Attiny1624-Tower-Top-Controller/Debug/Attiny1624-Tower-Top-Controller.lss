
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00001427  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  00009238  00001238  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000dd  00803800  00803800  00001427  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  000014c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003b93  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024fa  00000000  00000000  000051f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001111  00000000  00000000  000076ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000308  00000000  00000000  00008800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d70  00000000  00000000  00008b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008bc  00000000  00000000  0000a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ad 3d       	cpi	r26, 0xDD	; 221
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 34 02 	call	0x468	; 0x468 <main>
      98:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 */ 
 #include "Settings.h"
 #include "ADCVar.h"

 void ADC0_init(){
	 ADC0.CTRLA = ADC_ENABLE_bm; //adc enable
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	 ADC0.CTRLB = ADC_PRESC_DIV4_gc; // 20M / 4 = 5MHz ADC clock (MAX adc clock is 6M)
      a8:	81 83       	std	Z+1, r24	; 0x01
	 ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
      aa:	80 ea       	ldi	r24, 0xA0	; 160
      ac:	82 83       	std	Z+2, r24	; 0x02
	 ADC0.CTRLE = 0; //How long to take a one sample (ADC clock cycles) so it will take 0+ 0.5 = half cycle
      ae:	10 86       	std	Z+8, r1	; 0x08
	 ADC0.CTRLF = ADC_SAMPNUM_NONE_gc ; //samples:
      b0:	11 86       	std	Z+9, r1	; 0x09
	 ADC0.COMMAND = ADC_MODE_SINGLE_12BIT_gc; // 1 sample
      b2:	80 e1       	ldi	r24, 0x10	; 16
      b4:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      b6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f72ce>
      ba:	80 fd       	sbrc	r24, 0
      bc:	fc cf       	rjmp	.-8      	; 0xb6 <ADC0_init+0x16>

 }
      be:	08 95       	ret

000000c0 <ADC0_Read>:

 uint16_t ADC0_Read(){
	 ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
      c0:	e0 e0       	ldi	r30, 0x00	; 0
      c2:	f6 e0       	ldi	r31, 0x06	; 6
      c4:	82 85       	ldd	r24, Z+10	; 0x0a
      c6:	81 60       	ori	r24, 0x01	; 1
      c8:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      ca:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f72ce>
      ce:	80 fd       	sbrc	r24, 0
      d0:	fc cf       	rjmp	.-8      	; 0xca <ADC0_Read+0xa>
	 while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm));
      d2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f72cd>
      d6:	81 ff       	sbrs	r24, 1
      d8:	fc cf       	rjmp	.-8      	; 0xd2 <ADC0_Read+0x12>
	 ADC0.INTFLAGS = ADC_SAMPRDY_bm; //clear result ready flag
      da:	e0 e0       	ldi	r30, 0x00	; 0
      dc:	f6 e0       	ldi	r31, 0x06	; 6
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	85 83       	std	Z+5, r24	; 0x05
	 return ADC0.SAMPLE; //return average ADC value of 1024 measurements
      e2:	84 89       	ldd	r24, Z+20	; 0x14
      e4:	95 89       	ldd	r25, Z+21	; 0x15
 }
      e6:	08 95       	ret

000000e8 <ReadSolarCells>:
	else		
		voltageORcurrent->Result = (channel == Voltage) ?  ADC0_Read()*0.25 : ADC0_Read()*0.0625;  // Read ADC value, scale it, and round the result

}*/

void ReadSolarCells(solarrcells_t channel) {
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	00 d0       	rcall	.+0      	; 0xf6 <ReadSolarCells+0xe>
      f6:	00 d0       	rcall	.+0      	; 0xf8 <ReadSolarCells+0x10>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	08 2f       	mov	r16, r24
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
      fe:	85 30       	cpi	r24, 0x05	; 5
     100:	39 f4       	brne	.+14     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
     102:	0f 2e       	mov	r0, r31
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ef 2e       	mov	r14, r31
     108:	f8 e3       	ldi	r31, 0x38	; 56
     10a:	ff 2e       	mov	r15, r31
     10c:	f0 2d       	mov	r31, r0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
     110:	0f 2e       	mov	r0, r31
     112:	f7 e6       	ldi	r31, 0x67	; 103
     114:	ef 2e       	mov	r14, r31
     116:	f8 e3       	ldi	r31, 0x38	; 56
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
	ADC0.MUXPOS = channel;
     11c:	00 93 0c 06 	sts	0x060C, r16	; 0x80060c <crc6_table+0x7f72d4>

	// Vref pasirinkimo seka (atitinka 1.024V, 2.048V, 4.096V, Vdd (5V))
	const uint8_t vref_options[4] = {ADC_REFSEL_1024MV_gc, ADC_REFSEL_2048MV_gc, ADC_REFSEL_4096MV_gc, ADC_REFSEL_VDD_gc};
     120:	84 e0       	ldi	r24, 0x04	; 4
     122:	89 83       	std	Y+1, r24	; 0x01
     124:	85 e0       	ldi	r24, 0x05	; 5
     126:	8a 83       	std	Y+2, r24	; 0x02
     128:	87 e0       	ldi	r24, 0x07	; 7
     12a:	8b 83       	std	Y+3, r24	; 0x03
     12c:	1c 82       	std	Y+4, r1	; 0x04
	
	uint8_t vref_index = 0;
     12e:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t adcValue;

	// Pasirenkame optimalø Vref
	do {
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | vref_options[vref_index];
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b6 e0       	ldi	r27, 0x06	; 6
     134:	12 96       	adiw	r26, 0x02	; 2
     136:	8c 91       	ld	r24, X
     138:	12 97       	sbiw	r26, 0x02	; 2
     13a:	e1 e0       	ldi	r30, 0x01	; 1
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	ec 0f       	add	r30, r28
     140:	fd 1f       	adc	r31, r29
     142:	e1 0f       	add	r30, r17
     144:	f1 1d       	adc	r31, r1
     146:	90 81       	ld	r25, Z
     148:	88 7f       	andi	r24, 0xF8	; 248
     14a:	89 2b       	or	r24, r25
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	8c 93       	st	X, r24
		adcValue = ADC0_Read();
     150:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
	} while (adcValue >= 0xFF0 && ++vref_index < 4);
     154:	80 3f       	cpi	r24, 0xF0	; 240
     156:	2f e0       	ldi	r18, 0x0F	; 15
     158:	92 07       	cpc	r25, r18
     15a:	18 f0       	brcs	.+6      	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     15c:	1f 5f       	subi	r17, 0xFF	; 255
     15e:	14 30       	cpi	r17, 0x04	; 4
     160:	38 f3       	brcs	.-50     	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>

	// Srovës skaièiavimas
	if (channel == Current) {
     162:	04 30       	cpi	r16, 0x04	; 4
     164:	f1 f4       	brne	.+60     	; 0x1a2 <__EEPROM_REGION_LENGTH__+0xa2>
		voltageORcurrent->Result = (vref_index < 3) ? (adcValue >> (4 - vref_index)) : ((double)adcValue / 3.2768);
     166:	13 30       	cpi	r17, 0x03	; 3
     168:	58 f4       	brcc	.+22     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
     16a:	24 e0       	ldi	r18, 0x04	; 4
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	21 1b       	sub	r18, r17
     170:	31 09       	sbc	r19, r1
     172:	bc 01       	movw	r22, r24
     174:	02 c0       	rjmp	.+4      	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
     176:	76 95       	lsr	r23
     178:	67 95       	ror	r22
     17a:	2a 95       	dec	r18
     17c:	e2 f7       	brpl	.-8      	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
     17e:	0d c0       	rjmp	.+26     	; 0x19a <__EEPROM_REGION_LENGTH__+0x9a>
     180:	bc 01       	movw	r22, r24
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatunsisf>
     18a:	27 e1       	ldi	r18, 0x17	; 23
     18c:	37 eb       	ldi	r19, 0xB7	; 183
     18e:	41 e5       	ldi	r20, 0x51	; 81
     190:	50 e4       	ldi	r21, 0x40	; 64
     192:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     196:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
     19a:	f7 01       	movw	r30, r14
     19c:	60 83       	st	Z, r22
     19e:	71 83       	std	Z+1, r23	; 0x01
     1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}
	// Átampos skaièiavimas
	else if (vref_index < 3) {
     1a2:	13 30       	cpi	r17, 0x03	; 3
     1a4:	68 f4       	brcc	.+26     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
		voltageORcurrent->Result = adcValue >> (2 - vref_index); // 1.024V ? /4, 2.048V ? /2, 4.096V ? /1
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	21 1b       	sub	r18, r17
     1ac:	31 09       	sbc	r19, r1
     1ae:	bc 01       	movw	r22, r24
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__EEPROM_REGION_LENGTH__+0xb6>
     1b2:	76 95       	lsr	r23
     1b4:	67 95       	ror	r22
     1b6:	2a 95       	dec	r18
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <__EEPROM_REGION_LENGTH__+0xb2>
     1ba:	f7 01       	movw	r30, r14
     1bc:	60 83       	st	Z, r22
     1be:	71 83       	std	Z+1, r23	; 0x01
	}
}
     1c0:	24 96       	adiw	r28, 0x04	; 4
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	80 e6       	ldi	r24, 0x60	; 96
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	81 e6       	ldi	r24, 0x61	; 97
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
     1e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6d2b>
     1ec:	80 fd       	sbrc	r24, 0
     1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <CLOCK_INHF_clock_init+0x14>
     1f0:	08 95       	ret

000001f2 <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     1f6:	8b 01       	movw	r16, r22
     1f8:	9c 01       	movw	r18, r24
     1fa:	0f 2e       	mov	r0, r31
     1fc:	fc e0       	ldi	r31, 0x0C	; 12
     1fe:	36 95       	lsr	r19
     200:	27 95       	ror	r18
     202:	17 95       	ror	r17
     204:	07 95       	ror	r16
     206:	fa 95       	dec	r31
     208:	d1 f7       	brne	.-12     	; 0x1fe <crc6_mt6701_lookup+0xc>
     20a:	f0 2d       	mov	r31, r0
     20c:	0f 73       	andi	r16, 0x3F	; 63
     20e:	11 27       	eor	r17, r17
     210:	22 27       	eor	r18, r18
     212:	33 27       	eor	r19, r19
     214:	f8 01       	movw	r30, r16
     216:	e8 5c       	subi	r30, 0xC8	; 200
     218:	fc 46       	sbci	r31, 0x6C	; 108
     21a:	40 81       	ld	r20, Z
     21c:	8b 01       	movw	r16, r22
     21e:	9c 01       	movw	r18, r24
     220:	68 94       	set
     222:	15 f8       	bld	r1, 5
     224:	36 95       	lsr	r19
     226:	27 95       	ror	r18
     228:	17 95       	ror	r17
     22a:	07 95       	ror	r16
     22c:	16 94       	lsr	r1
     22e:	d1 f7       	brne	.-12     	; 0x224 <crc6_mt6701_lookup+0x32>
     230:	0f 73       	andi	r16, 0x3F	; 63
     232:	11 27       	eor	r17, r17
     234:	22 27       	eor	r18, r18
     236:	33 27       	eor	r19, r19
     238:	04 27       	eor	r16, r20
     23a:	f8 01       	movw	r30, r16
     23c:	e8 5c       	subi	r30, 0xC8	; 200
     23e:	fc 46       	sbci	r31, 0x6C	; 108
     240:	20 81       	ld	r18, Z
     242:	dc 01       	movw	r26, r24
     244:	cb 01       	movw	r24, r22
     246:	8f 73       	andi	r24, 0x3F	; 63
     248:	99 27       	eor	r25, r25
     24a:	aa 27       	eor	r26, r26
     24c:	bb 27       	eor	r27, r27
     24e:	82 27       	eor	r24, r18
     250:	fc 01       	movw	r30, r24
     252:	e8 5c       	subi	r30, 0xC8	; 200
     254:	fc 46       	sbci	r31, 0x6C	; 108
}
     256:	80 81       	ld	r24, Z
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     25e:	cf 93       	push	r28
     260:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     262:	80 81       	ld	r24, Z
     264:	91 81       	ldd	r25, Z+1	; 0x01
     266:	a2 81       	ldd	r26, Z+2	; 0x02
     268:	b3 81       	ldd	r27, Z+3	; 0x03
     26a:	c8 2f       	mov	r28, r24
     26c:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	68 94       	set
     274:	15 f8       	bld	r1, 5
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	77 95       	ror	r23
     27c:	67 95       	ror	r22
     27e:	16 94       	lsr	r1
     280:	d1 f7       	brne	.-12     	; 0x276 <MT6701CRC+0x18>
     282:	60 83       	st	Z, r22
     284:	71 83       	std	Z+1, r23	; 0x01
     286:	82 83       	std	Z+2, r24	; 0x02
     288:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     28a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	c8 13       	cpse	r28, r24
     292:	01 c0       	rjmp	.+2      	; 0x296 <MT6701CRC+0x38>
     294:	90 e0       	ldi	r25, 0x00	; 0
}
     296:	89 2f       	mov	r24, r25
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     29c:	2f 92       	push	r2
     29e:	3f 92       	push	r3
     2a0:	4f 92       	push	r4
     2a2:	5f 92       	push	r5
     2a4:	6f 92       	push	r6
     2a6:	7f 92       	push	r7
     2a8:	8f 92       	push	r8
     2aa:	9f 92       	push	r9
     2ac:	af 92       	push	r10
     2ae:	bf 92       	push	r11
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	2b 97       	sbiw	r28, 0x0b	; 11
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	c2 2e       	mov	r12, r18
     2cc:	b3 2e       	mov	r11, r19
     2ce:	a4 2e       	mov	r10, r20
     2d0:	95 2e       	mov	r9, r21
     2d2:	86 2e       	mov	r8, r22
     2d4:	77 2e       	mov	r7, r23
     2d6:	68 2e       	mov	r6, r24
     2d8:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2da:	f2 2e       	mov	r15, r18
     2dc:	03 2f       	mov	r16, r19
     2de:	14 2f       	mov	r17, r20
     2e0:	5a 87       	std	Y+10, r21	; 0x0a
     2e2:	69 83       	std	Y+1, r22	; 0x01
     2e4:	b7 2f       	mov	r27, r23
     2e6:	d8 2e       	mov	r13, r24
     2e8:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     2ee:	14 c0       	rjmp	.+40     	; 0x318 <crc8_cdma2000+0x7c>
        length++;
     2f0:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     2f2:	2f 2d       	mov	r18, r15
     2f4:	30 2f       	mov	r19, r16
     2f6:	41 2f       	mov	r20, r17
     2f8:	5a 85       	ldd	r21, Y+10	; 0x0a
     2fa:	69 81       	ldd	r22, Y+1	; 0x01
     2fc:	7b 2f       	mov	r23, r27
     2fe:	8d 2d       	mov	r24, r13
     300:	9e 2d       	mov	r25, r14
     302:	08 e0       	ldi	r16, 0x08	; 8
     304:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__lshrdi3>
     308:	f2 2e       	mov	r15, r18
     30a:	03 2f       	mov	r16, r19
     30c:	14 2f       	mov	r17, r20
     30e:	5a 87       	std	Y+10, r21	; 0x0a
     310:	69 83       	std	Y+1, r22	; 0x01
     312:	b7 2f       	mov	r27, r23
     314:	d8 2e       	mov	r13, r24
     316:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     318:	2f 2d       	mov	r18, r15
     31a:	30 2f       	mov	r19, r16
     31c:	41 2f       	mov	r20, r17
     31e:	5a 85       	ldd	r21, Y+10	; 0x0a
     320:	69 81       	ldd	r22, Y+1	; 0x01
     322:	7b 2f       	mov	r23, r27
     324:	8d 2d       	mov	r24, r13
     326:	9e 2d       	mov	r25, r14
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	0e 94 06 06 	call	0xc0c	; 0xc0c <__cmpdi2_s8>
     32e:	01 f7       	brne	.-64     	; 0x2f0 <crc8_cdma2000+0x54>
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	8a 87       	std	Y+10, r24	; 0x0a
     334:	cb 86       	std	Y+11, r12	; 0x0b
     336:	b9 82       	std	Y+1, r11	; 0x01
     338:	4a 2c       	mov	r4, r10
     33a:	39 2c       	mov	r3, r9
     33c:	28 2c       	mov	r2, r8
     33e:	1a c0       	rjmp	.+52     	; 0x374 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     340:	8d 01       	movw	r16, r26
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	00 0f       	add	r16, r16
     348:	11 1f       	adc	r17, r17
     34a:	00 0f       	add	r16, r16
     34c:	11 1f       	adc	r17, r17
     34e:	2b 85       	ldd	r18, Y+11	; 0x0b
     350:	39 81       	ldd	r19, Y+1	; 0x01
     352:	44 2d       	mov	r20, r4
     354:	53 2d       	mov	r21, r3
     356:	62 2d       	mov	r22, r2
     358:	77 2d       	mov	r23, r7
     35a:	86 2d       	mov	r24, r6
     35c:	95 2d       	mov	r25, r5
     35e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__lshrdi3>
     362:	8a 84       	ldd	r8, Y+10	; 0x0a
     364:	82 26       	eor	r8, r18
     366:	91 2c       	mov	r9, r1
     368:	f4 01       	movw	r30, r8
     36a:	e8 5c       	subi	r30, 0xC8	; 200
     36c:	fd 46       	sbci	r31, 0x6D	; 109
     36e:	80 81       	ld	r24, Z
     370:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     372:	fd 01       	movw	r30, r26
     374:	df 01       	movw	r26, r30
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	ef 2b       	or	r30, r31
     37a:	11 f7       	brne	.-60     	; 0x340 <crc8_cdma2000+0xa4>
     37c:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     37e:	2b 96       	adiw	r28, 0x0b	; 11
     380:	cd bf       	out	0x3d, r28	; 61
     382:	de bf       	out	0x3e, r29	; 62
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	08 95       	ret

000003aa <FIR>:
 *  Author: Saulius
 */ 
#include "Settings.h"


void FIR(solarrcells_t channel) {
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	c8 2f       	mov	r28, r24
	ReadSolarCells(channel); //Read Solar cells Voltage or current depending from selected channel
     3b0:	0e 94 74 00 	call	0xe8	; 0xe8 <ReadSolarCells>
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //If channel is for voltage we will use ReadVoltage object to store data otherwise ReadCurrent
     3b4:	c5 30       	cpi	r28, 0x05	; 5
     3b6:	19 f4       	brne	.+6      	; 0x3be <FIR+0x14>
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	d8 e3       	ldi	r29, 0x38	; 56
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <FIR+0x18>
     3be:	c7 e6       	ldi	r28, 0x67	; 103
     3c0:	d8 e3       	ldi	r29, 0x38	; 56
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result; //depending of selected object savo measured voltage or current to filter data storage array
     3c2:	9e 01       	movw	r18, r28
     3c4:	2a 59       	subi	r18, 0x9A	; 154
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	d9 01       	movw	r26, r18
     3ca:	ec 91       	ld	r30, X
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	88 81       	ld	r24, Y
     3d0:	99 81       	ldd	r25, Y+1	; 0x01
     3d2:	31 96       	adiw	r30, 0x01	; 1
     3d4:	ee 0f       	add	r30, r30
     3d6:	ff 1f       	adc	r31, r31
     3d8:	ec 0f       	add	r30, r28
     3da:	fd 1f       	adc	r31, r29
     3dc:	80 83       	st	Z, r24
     3de:	91 83       	std	Z+1, r25	; 0x01
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS; //and increasing its index nuber till reach defined FIR_STEPS value after that reseting index to 0
     3e0:	8c 91       	ld	r24, X
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	62 e3       	ldi	r22, 0x32	; 50
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	0e 94 99 05 	call	0xb32	; 0xb32 <__divmodhi4>
     3ee:	f9 01       	movw	r30, r18
     3f0:	80 83       	st	Z, r24
	uint32_t sum = 0; //uint32_t can hold max up to 65535 uint16_t values so maximum FIR_STEPS can be 65535 (way too much)
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     3f2:	80 e0       	ldi	r24, 0x00	; 0
void FIR(solarrcells_t channel) {
	ReadSolarCells(channel); //Read Solar cells Voltage or current depending from selected channel
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //If channel is for voltage we will use ReadVoltage object to store data otherwise ReadCurrent
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result; //depending of selected object savo measured voltage or current to filter data storage array
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS; //and increasing its index nuber till reach defined FIR_STEPS value after that reseting index to 0
	uint32_t sum = 0; //uint32_t can hold max up to 65535 uint16_t values so maximum FIR_STEPS can be 65535 (way too much)
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	ba 01       	movw	r22, r20
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		sum += voltageORcurrent->Filter[i]; // calculating average rsult of all array sum divided from defined FIR_STEPS value
     3fc:	e8 2f       	mov	r30, r24
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	31 96       	adiw	r30, 0x01	; 1
     402:	ee 0f       	add	r30, r30
     404:	ff 1f       	adc	r31, r31
     406:	ec 0f       	add	r30, r28
     408:	fd 1f       	adc	r31, r29
     40a:	20 81       	ld	r18, Z
     40c:	31 81       	ldd	r19, Z+1	; 0x01
     40e:	42 0f       	add	r20, r18
     410:	53 1f       	adc	r21, r19
     412:	61 1d       	adc	r22, r1
     414:	71 1d       	adc	r23, r1
	ReadSolarCells(channel); //Read Solar cells Voltage or current depending from selected channel
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //If channel is for voltage we will use ReadVoltage object to store data otherwise ReadCurrent
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result; //depending of selected object savo measured voltage or current to filter data storage array
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS; //and increasing its index nuber till reach defined FIR_STEPS value after that reseting index to 0
	uint32_t sum = 0; //uint32_t can hold max up to 65535 uint16_t values so maximum FIR_STEPS can be 65535 (way too much)
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	82 33       	cpi	r24, 0x32	; 50
     41a:	80 f3       	brcs	.-32     	; 0x3fc <FIR+0x52>
		sum += voltageORcurrent->Filter[i]; // calculating average rsult of all array sum divided from defined FIR_STEPS value
	}
	voltageORcurrent->Result = sum / FIR_STEPS; //reuse Result variable to save final value
     41c:	cb 01       	movw	r24, r22
     41e:	ba 01       	movw	r22, r20
     420:	22 e3       	ldi	r18, 0x32	; 50
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
     42c:	28 83       	st	Y, r18
     42e:	39 83       	std	Y+1, r19	; 0x01
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     436:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f72aa>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     43a:	e0 e2       	ldi	r30, 0x20	; 32
     43c:	f4 e0       	ldi	r31, 0x04	; 4
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     442:	88 e0       	ldi	r24, 0x08	; 8
     444:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
     446:	99 e0       	ldi	r25, 0x09	; 9
     448:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
     44a:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     44c:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     44e:	e0 e0       	ldi	r30, 0x00	; 0
     450:	f4 e0       	ldi	r31, 0x04	; 4
     452:	92 ec       	ldi	r25, 0xC2	; 194
     454:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
     456:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     45c:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     45e:	80 ec       	ldi	r24, 0xC0	; 192
     460:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
     462:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
     464:	95 8b       	std	Z+21, r25	; 0x15
     466:	08 95       	ret

00000468 <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
     468:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
     46c:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     470:	0e 94 78 03 	call	0x6f0	; 0x6f0 <USART0_init>
	USART1_init();
     474:	0e 94 a1 03 	call	0x742	; 0x742 <USART1_init>
	ADC0_init();
     478:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     47c:	80 e8       	ldi	r24, 0x80	; 128
     47e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     482:	80 e4       	ldi	r24, 0x40	; 64
     484:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MT6701_SSI_Angle>
		//ReadSolarCells(Voltage); //uncomment if filtration no needded
		//ReadSolarCells(Current); //uncomment if filtration no needded
		FIR(Voltage); //comment if using ReadSolarCells(Voltage);
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <FIR>
		FIR(Current); //comment if using ReadSolarCells(Current);
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	0e 94 d5 01 	call	0x3aa	; 0x3aa <FIR>
		uint8_t y = YEndSwitches();
     494:	0e 94 ef 03 	call	0x7de	; 0x7de <YEndSwitches>
     498:	38 2e       	mov	r3, r24
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);
     49a:	c4 ed       	ldi	r28, 0xD4	; 212
     49c:	d8 e3       	ldi	r29, 0x38	; 56
     49e:	88 80       	ld	r8, Y
     4a0:	99 80       	ldd	r9, Y+1	; 0x01
     4a2:	28 2d       	mov	r18, r8
     4a4:	39 2d       	mov	r19, r9
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0c e2       	ldi	r16, 0x2C	; 44
     4b4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ashldi3>
     4b8:	92 2e       	mov	r9, r18
     4ba:	a3 2e       	mov	r10, r19
     4bc:	b4 2e       	mov	r11, r20
     4be:	15 2f       	mov	r17, r21
     4c0:	c6 2e       	mov	r12, r22
     4c2:	d7 2e       	mov	r13, r23
     4c4:	f8 2f       	mov	r31, r24
     4c6:	e9 2f       	mov	r30, r25
     4c8:	0f 2e       	mov	r0, r31
     4ca:	fe ec       	ldi	r31, 0xCE	; 206
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f8 e3       	ldi	r31, 0x38	; 56
     4d0:	ff 2e       	mov	r15, r31
     4d2:	f0 2d       	mov	r31, r0
     4d4:	d7 01       	movw	r26, r14
     4d6:	4d 91       	ld	r20, X+
     4d8:	5c 91       	ld	r21, X
     4da:	24 2f       	mov	r18, r20
     4dc:	35 2f       	mov	r19, r21
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0c e1       	ldi	r16, 0x1C	; 28
     4ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ashldi3>
     4f0:	92 2a       	or	r9, r18
     4f2:	a3 2a       	or	r10, r19
     4f4:	b4 2a       	or	r11, r20
     4f6:	15 2b       	or	r17, r21
     4f8:	7c 2c       	mov	r7, r12
     4fa:	76 2a       	or	r7, r22
     4fc:	8d 2c       	mov	r8, r13
     4fe:	87 2a       	or	r8, r23
     500:	f8 2b       	or	r31, r24
     502:	e9 2b       	or	r30, r25
     504:	0f 2e       	mov	r0, r31
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	cf 2e       	mov	r12, r31
     50a:	f8 e3       	ldi	r31, 0x38	; 56
     50c:	df 2e       	mov	r13, r31
     50e:	f0 2d       	mov	r31, r0
     510:	d6 01       	movw	r26, r12
     512:	8d 91       	ld	r24, X+
     514:	9c 91       	ld	r25, X
     516:	ac 01       	movw	r20, r24
     518:	24 2f       	mov	r18, r20
     51a:	35 2f       	mov	r19, r21
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	00 e1       	ldi	r16, 0x10	; 16
     52a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ashldi3>
     52e:	29 29       	or	r18, r9
     530:	3a 29       	or	r19, r10
     532:	4b 29       	or	r20, r11
     534:	51 2b       	or	r21, r17
     536:	67 29       	or	r22, r7
     538:	78 29       	or	r23, r8
     53a:	07 e6       	ldi	r16, 0x67	; 103
     53c:	18 e3       	ldi	r17, 0x38	; 56
     53e:	d8 01       	movw	r26, r16
     540:	4d 90       	ld	r4, X+
     542:	5c 90       	ld	r5, X
     544:	61 2c       	mov	r6, r1
     546:	71 2c       	mov	r7, r1
     548:	44 0c       	add	r4, r4
     54a:	55 1c       	adc	r5, r5
     54c:	66 1c       	adc	r6, r6
     54e:	77 1c       	adc	r7, r7
     550:	44 0c       	add	r4, r4
     552:	55 1c       	adc	r5, r5
     554:	66 1c       	adc	r6, r6
     556:	77 1c       	adc	r7, r7
     558:	44 0c       	add	r4, r4
     55a:	55 1c       	adc	r5, r5
     55c:	66 1c       	adc	r6, r6
     55e:	77 1c       	adc	r7, r7
     560:	44 0c       	add	r4, r4
     562:	55 1c       	adc	r5, r5
     564:	66 1c       	adc	r6, r6
     566:	77 1c       	adc	r7, r7
     568:	24 29       	or	r18, r4
     56a:	35 29       	or	r19, r5
     56c:	46 29       	or	r20, r6
     56e:	57 29       	or	r21, r7
     570:	23 29       	or	r18, r3
     572:	8f 2b       	or	r24, r31
     574:	9e 2b       	or	r25, r30
     576:	0e 94 4e 01 	call	0x29c	; 0x29c <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     57a:	f8 01       	movw	r30, r16
     57c:	70 81       	ld	r23, Z
     57e:	e1 81       	ldd	r30, Z+1	; 0x01

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     580:	d6 01       	movw	r26, r12
     582:	5c 91       	ld	r21, X
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	6c 91       	ld	r22, X


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     588:	d7 01       	movw	r26, r14
     58a:	3c 91       	ld	r19, X
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	4c 91       	ld	r20, X



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     590:	98 81       	ld	r25, Y
     592:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     594:	1f 92       	push	r1
     596:	8f 93       	push	r24
     598:	1f 92       	push	r1
     59a:	3f 92       	push	r3
     59c:	ef 93       	push	r30
     59e:	7f 93       	push	r23
     5a0:	6f 93       	push	r22
     5a2:	5f 93       	push	r21
     5a4:	4f 93       	push	r20
     5a6:	3f 93       	push	r19
     5a8:	2f 93       	push	r18
     5aa:	9f 93       	push	r25
     5ac:	88 e7       	ldi	r24, 0x78	; 120
     5ae:	93 e9       	ldi	r25, 0x93	; 147
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b8:	bf e7       	ldi	r27, 0x7F	; 127
     5ba:	ea e1       	ldi	r30, 0x1A	; 26
     5bc:	f6 e0       	ldi	r31, 0x06	; 6
     5be:	b1 50       	subi	r27, 0x01	; 1
     5c0:	e0 40       	sbci	r30, 0x00	; 0
     5c2:	f0 40       	sbci	r31, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <main+0x156>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x160>
     5c8:	00 00       	nop
     5ca:	8d b7       	in	r24, 0x3d	; 61
     5cc:	9e b7       	in	r25, 0x3e	; 62
     5ce:	0e 96       	adiw	r24, 0x0e	; 14
     5d0:	8d bf       	out	0x3d, r24	; 61
     5d2:	9e bf       	out	0x3e, r25	; 62
     5d4:	53 cf       	rjmp	.-346    	; 0x47c <main+0x14>

000005d6 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <MT6701_SSI_Angle+0xa>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <MT6701_SSI_Angle+0xc>
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     5e8:	19 82       	std	Y+1, r1	; 0x01
     5ea:	1a 82       	std	Y+2, r1	; 0x02
     5ec:	1b 82       	std	Y+3, r1	; 0x03
     5ee:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     5f0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f70ce>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	24 c0       	rjmp	.+72     	; 0x640 <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     5f8:	8f e6       	ldi	r24, 0x6F	; 111
     5fa:	0e 94 83 03 	call	0x706	; 0x706 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     5fe:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f74cc>
     602:	86 ff       	sbrs	r24, 6
     604:	fc cf       	rjmp	.-8      	; 0x5fe <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     606:	e0 e0       	ldi	r30, 0x00	; 0
     608:	f8 e0       	ldi	r31, 0x08	; 8
     60a:	84 81       	ldd	r24, Z+4	; 0x04
     60c:	80 64       	ori	r24, 0x40	; 64
     60e:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	ab 81       	ldd	r26, Y+3	; 0x03
     616:	bc 81       	ldd	r27, Y+4	; 0x04
     618:	ba 2f       	mov	r27, r26
     61a:	a9 2f       	mov	r26, r25
     61c:	98 2f       	mov	r25, r24
     61e:	88 27       	eor	r24, r24
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	ab 83       	std	Y+3, r26	; 0x03
     626:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     628:	0e 94 8a 03 	call	0x714	; 0x714 <USART0_readChar>
     62c:	49 81       	ldd	r20, Y+1	; 0x01
     62e:	5a 81       	ldd	r21, Y+2	; 0x02
     630:	6b 81       	ldd	r22, Y+3	; 0x03
     632:	7c 81       	ldd	r23, Y+4	; 0x04
     634:	48 2b       	or	r20, r24
     636:	49 83       	std	Y+1, r20	; 0x01
     638:	5a 83       	std	Y+2, r21	; 0x02
     63a:	6b 83       	std	Y+3, r22	; 0x03
     63c:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     63e:	1f 5f       	subi	r17, 0xFF	; 255
     640:	13 30       	cpi	r17, 0x03	; 3
     642:	d0 f2       	brcs	.-76     	; 0x5f8 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     644:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f70cd>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     648:	00 38       	cpi	r16, 0x80	; 128
     64a:	19 f4       	brne	.+6      	; 0x652 <MT6701_SSI_Angle+0x7c>
     64c:	04 ed       	ldi	r16, 0xD4	; 212
     64e:	18 e3       	ldi	r17, 0x38	; 56
     650:	02 c0       	rjmp	.+4      	; 0x656 <MT6701_SSI_Angle+0x80>
     652:	0e ec       	ldi	r16, 0xCE	; 206
     654:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	0e 94 2f 01 	call	0x25e	; 0x25e <MT6701CRC>
     65e:	f8 01       	movw	r30, r16
     660:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	83 70       	andi	r24, 0x03	; 3
     666:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	ab 81       	ldd	r26, Y+3	; 0x03
     66e:	bc 81       	ldd	r27, Y+4	; 0x04
     670:	b6 95       	lsr	r27
     672:	a7 95       	ror	r26
     674:	97 95       	ror	r25
     676:	87 95       	ror	r24
     678:	b6 95       	lsr	r27
     67a:	a7 95       	ror	r26
     67c:	97 95       	ror	r25
     67e:	87 95       	ror	r24
     680:	81 70       	andi	r24, 0x01	; 1
     682:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	ab 81       	ldd	r26, Y+3	; 0x03
     68a:	bc 81       	ldd	r27, Y+4	; 0x04
     68c:	ac 01       	movw	r20, r24
     68e:	bd 01       	movw	r22, r26
     690:	68 94       	set
     692:	12 f8       	bld	r1, 2
     694:	76 95       	lsr	r23
     696:	67 95       	ror	r22
     698:	57 95       	ror	r21
     69a:	47 95       	ror	r20
     69c:	16 94       	lsr	r1
     69e:	d1 f7       	brne	.-12     	; 0x694 <MT6701_SSI_Angle+0xbe>
     6a0:	24 2f       	mov	r18, r20
     6a2:	21 70       	andi	r18, 0x01	; 1
     6a4:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	68 94       	set
     6ac:	13 f8       	bld	r1, 3
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	77 95       	ror	r23
     6b4:	67 95       	ror	r22
     6b6:	16 94       	lsr	r1
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <MT6701_SSI_Angle+0xd8>
     6ba:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatunsisf>
     6be:	23 e5       	ldi	r18, 0x53	; 83
     6c0:	34 e0       	ldi	r19, 0x04	; 4
     6c2:	49 ee       	ldi	r20, 0xE9	; 233
     6c4:	5e e3       	ldi	r21, 0x3E	; 62
     6c6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	5f e3       	ldi	r21, 0x3F	; 63
     6d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3>
     6d6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
     6da:	f8 01       	movw	r30, r16
     6dc:	60 83       	st	Z, r22
     6de:	71 83       	std	Z+1, r23	; 0x01
     6e0:	24 96       	adiw	r28, 0x04	; 4
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     6f0:	e0 e0       	ldi	r30, 0x00	; 0
     6f2:	f8 e0       	ldi	r31, 0x08	; 8
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	95 e0       	ldi	r25, 0x05	; 5
     6f8:	80 87       	std	Z+8, r24	; 0x08
     6fa:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     6fc:	80 ec       	ldi	r24, 0xC0	; 192
     6fe:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     700:	82 ec       	ldi	r24, 0xC2	; 194
     702:	87 83       	std	Z+7, r24	; 0x07
     704:	08 95       	ret

00000706 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     706:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f74cc>
     70a:	95 ff       	sbrs	r25, 5
     70c:	fc cf       	rjmp	.-8      	; 0x706 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     70e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f74ca>
     712:	08 95       	ret

00000714 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f74cc>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     71a:	80 e4       	ldi	r24, 0x40	; 64
     71c:	9c e9       	ldi	r25, 0x9C	; 156
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     722:	08 c0       	rjmp	.+16     	; 0x734 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	21 f4       	brne	.+8      	; 0x734 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 dc 38 	sts	0x38DC, r24	; 0x8038dc <Status+0x2>
            break;
     732:	04 c0       	rjmp	.+8      	; 0x73c <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     734:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f74cc>
     738:	22 23       	and	r18, r18
     73a:	a4 f7       	brge	.-24     	; 0x724 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     73c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f74c8>
}
     740:	08 95       	ret

00000742 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     742:	e0 e2       	ldi	r30, 0x20	; 32
     744:	f8 e0       	ldi	r31, 0x08	; 8
     746:	80 e4       	ldi	r24, 0x40	; 64
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	80 87       	std	Z+8, r24	; 0x08
     74c:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     74e:	82 e4       	ldi	r24, 0x42	; 66
     750:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	87 83       	std	Z+7, r24	; 0x07
     756:	08 95       	ret

00000758 <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     758:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f74ec>
     75c:	95 ff       	sbrs	r25, 5
     75e:	fc cf       	rjmp	.-8      	; 0x758 <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     760:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f74ea>
     764:	08 95       	ret

00000766 <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     770:	c0 e0       	ldi	r28, 0x00	; 0
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	07 c0       	rjmp	.+14     	; 0x784 <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     776:	f8 01       	movw	r30, r16
     778:	ec 0f       	add	r30, r28
     77a:	fd 1f       	adc	r31, r29
     77c:	80 81       	ld	r24, Z
     77e:	0e 94 ac 03 	call	0x758	; 0x758 <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     782:	21 96       	adiw	r28, 0x01	; 1
     784:	f8 01       	movw	r30, r16
     786:	01 90       	ld	r0, Z+
     788:	00 20       	and	r0, r0
     78a:	e9 f7       	brne	.-6      	; 0x786 <USART1_sendString+0x20>
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	e0 1b       	sub	r30, r16
     790:	f1 0b       	sbc	r31, r17
     792:	ce 17       	cp	r28, r30
     794:	df 07       	cpc	r29, r31
     796:	78 f3       	brcs	.-34     	; 0x776 <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	6e 97       	sbiw	r28, 0x1e	; 30
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	9e 01       	movw	r18, r28
     7b2:	2d 5d       	subi	r18, 0xDD	; 221
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	f9 01       	movw	r30, r18
     7b8:	41 91       	ld	r20, Z+
     7ba:	51 91       	ld	r21, Z+
     7bc:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     7be:	6e e1       	ldi	r22, 0x1E	; 30
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	0e 94 26 06 	call	0xc4c	; 0xc4c <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	0e 94 b3 03 	call	0x766	; 0x766 <USART1_sendString>
     7d2:	6e 96       	adiw	r28, 0x1e	; 30
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
     7de:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f70f0>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	89 27       	eor	r24, r25
     7e6:	81 70       	andi	r24, 0x01	; 1
     7e8:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f70d0>
     7ec:	92 fd       	sbrc	r25, 2
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <YEndSwitches+0x16>
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <YEndSwitches+0x18>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	89 2b       	or	r24, r25
     7f8:	08 95       	ret

000007fa <__subsf3>:
     7fa:	50 58       	subi	r21, 0x80	; 128

000007fc <__addsf3>:
     7fc:	bb 27       	eor	r27, r27
     7fe:	aa 27       	eor	r26, r26
     800:	0e 94 15 04 	call	0x82a	; 0x82a <__addsf3x>
     804:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
     808:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
     80c:	38 f0       	brcs	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80e:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
     812:	20 f0       	brcs	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     814:	39 f4       	brne	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     816:	9f 3f       	cpi	r25, 0xFF	; 255
     818:	19 f4       	brne	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81a:	26 f4       	brtc	.+8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     81c:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>
     820:	0e f4       	brtc	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	e0 95       	com	r30
     824:	e7 fb       	bst	r30, 7
     826:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>

0000082a <__addsf3x>:
     82a:	e9 2f       	mov	r30, r25
     82c:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
     830:	58 f3       	brcs	.-42     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     832:	ba 17       	cp	r27, r26
     834:	62 07       	cpc	r22, r18
     836:	73 07       	cpc	r23, r19
     838:	84 07       	cpc	r24, r20
     83a:	95 07       	cpc	r25, r21
     83c:	20 f0       	brcs	.+8      	; 0x846 <__addsf3x+0x1c>
     83e:	79 f4       	brne	.+30     	; 0x85e <__addsf3x+0x34>
     840:	a6 f5       	brtc	.+104    	; 0x8aa <__addsf3x+0x80>
     842:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
     846:	0e f4       	brtc	.+2      	; 0x84a <__addsf3x+0x20>
     848:	e0 95       	com	r30
     84a:	0b 2e       	mov	r0, r27
     84c:	ba 2f       	mov	r27, r26
     84e:	a0 2d       	mov	r26, r0
     850:	0b 01       	movw	r0, r22
     852:	b9 01       	movw	r22, r18
     854:	90 01       	movw	r18, r0
     856:	0c 01       	movw	r0, r24
     858:	ca 01       	movw	r24, r20
     85a:	a0 01       	movw	r20, r0
     85c:	11 24       	eor	r1, r1
     85e:	ff 27       	eor	r31, r31
     860:	59 1b       	sub	r21, r25
     862:	99 f0       	breq	.+38     	; 0x88a <__addsf3x+0x60>
     864:	59 3f       	cpi	r21, 0xF9	; 249
     866:	50 f4       	brcc	.+20     	; 0x87c <__addsf3x+0x52>
     868:	50 3e       	cpi	r21, 0xE0	; 224
     86a:	68 f1       	brcs	.+90     	; 0x8c6 <__addsf3x+0x9c>
     86c:	1a 16       	cp	r1, r26
     86e:	f0 40       	sbci	r31, 0x00	; 0
     870:	a2 2f       	mov	r26, r18
     872:	23 2f       	mov	r18, r19
     874:	34 2f       	mov	r19, r20
     876:	44 27       	eor	r20, r20
     878:	58 5f       	subi	r21, 0xF8	; 248
     87a:	f3 cf       	rjmp	.-26     	; 0x862 <__addsf3x+0x38>
     87c:	46 95       	lsr	r20
     87e:	37 95       	ror	r19
     880:	27 95       	ror	r18
     882:	a7 95       	ror	r26
     884:	f0 40       	sbci	r31, 0x00	; 0
     886:	53 95       	inc	r21
     888:	c9 f7       	brne	.-14     	; 0x87c <__addsf3x+0x52>
     88a:	7e f4       	brtc	.+30     	; 0x8aa <__addsf3x+0x80>
     88c:	1f 16       	cp	r1, r31
     88e:	ba 0b       	sbc	r27, r26
     890:	62 0b       	sbc	r22, r18
     892:	73 0b       	sbc	r23, r19
     894:	84 0b       	sbc	r24, r20
     896:	ba f0       	brmi	.+46     	; 0x8c6 <__addsf3x+0x9c>
     898:	91 50       	subi	r25, 0x01	; 1
     89a:	a1 f0       	breq	.+40     	; 0x8c4 <__addsf3x+0x9a>
     89c:	ff 0f       	add	r31, r31
     89e:	bb 1f       	adc	r27, r27
     8a0:	66 1f       	adc	r22, r22
     8a2:	77 1f       	adc	r23, r23
     8a4:	88 1f       	adc	r24, r24
     8a6:	c2 f7       	brpl	.-16     	; 0x898 <__addsf3x+0x6e>
     8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <__addsf3x+0x9c>
     8aa:	ba 0f       	add	r27, r26
     8ac:	62 1f       	adc	r22, r18
     8ae:	73 1f       	adc	r23, r19
     8b0:	84 1f       	adc	r24, r20
     8b2:	48 f4       	brcc	.+18     	; 0x8c6 <__addsf3x+0x9c>
     8b4:	87 95       	ror	r24
     8b6:	77 95       	ror	r23
     8b8:	67 95       	ror	r22
     8ba:	b7 95       	ror	r27
     8bc:	f7 95       	ror	r31
     8be:	9e 3f       	cpi	r25, 0xFE	; 254
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <__addsf3x+0x9a>
     8c2:	b0 cf       	rjmp	.-160    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     8c4:	93 95       	inc	r25
     8c6:	88 0f       	add	r24, r24
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <__addsf3x+0xa2>
     8ca:	99 27       	eor	r25, r25
     8cc:	ee 0f       	add	r30, r30
     8ce:	97 95       	ror	r25
     8d0:	87 95       	ror	r24
     8d2:	08 95       	ret

000008d4 <__divsf3>:
     8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
     8d8:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_round>
     8dc:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_pscB>
     8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
     8e2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscA>
     8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
     8ea:	5f 3f       	cpi	r21, 0xFF	; 255
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
     8ee:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
     8f2:	51 11       	cpse	r21, r1
     8f4:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
     8f8:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_nan>

000008fc <__divsf3x>:
     8fc:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_split3>
     900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
     902:	99 23       	and	r25, r25
     904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
     906:	55 23       	and	r21, r21
     908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
     90a:	95 1b       	sub	r25, r21
     90c:	55 0b       	sbc	r21, r21
     90e:	bb 27       	eor	r27, r27
     910:	aa 27       	eor	r26, r26
     912:	62 17       	cp	r22, r18
     914:	73 07       	cpc	r23, r19
     916:	84 07       	cpc	r24, r20
     918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
     91a:	9f 5f       	subi	r25, 0xFF	; 255
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	44 1f       	adc	r20, r20
     924:	aa 1f       	adc	r26, r26
     926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
     928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
     92a:	0e 2e       	mov	r0, r30
     92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
     92e:	e0 e8       	ldi	r30, 0x80	; 128
     930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
     932:	91 50       	subi	r25, 0x01	; 1
     934:	50 40       	sbci	r21, 0x00	; 0
     936:	e6 95       	lsr	r30
     938:	00 1c       	adc	r0, r0
     93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
     93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
     93e:	fe 2f       	mov	r31, r30
     940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	88 1f       	adc	r24, r24
     948:	bb 1f       	adc	r27, r27
     94a:	26 17       	cp	r18, r22
     94c:	37 07       	cpc	r19, r23
     94e:	48 07       	cpc	r20, r24
     950:	ab 07       	cpc	r26, r27
     952:	b0 e8       	ldi	r27, 0x80	; 128
     954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
     956:	bb 0b       	sbc	r27, r27
     958:	80 2d       	mov	r24, r0
     95a:	bf 01       	movw	r22, r30
     95c:	ff 27       	eor	r31, r31
     95e:	93 58       	subi	r25, 0x83	; 131
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	51 05       	cpc	r21, r1
     968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
     96a:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_inf>
     96e:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_szero>
     972:	5f 3f       	cpi	r21, 0xFF	; 255
     974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
     976:	98 3e       	cpi	r25, 0xE8	; 232
     978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
     97a:	86 95       	lsr	r24
     97c:	77 95       	ror	r23
     97e:	67 95       	ror	r22
     980:	b7 95       	ror	r27
     982:	f7 95       	ror	r31
     984:	9f 5f       	subi	r25, 0xFF	; 255
     986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
     988:	88 0f       	add	r24, r24
     98a:	91 1d       	adc	r25, r1
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	97 f9       	bld	r25, 7
     992:	08 95       	ret
     994:	e1 e0       	ldi	r30, 0x01	; 1
     996:	66 0f       	add	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	88 1f       	adc	r24, r24
     99c:	bb 1f       	adc	r27, r27
     99e:	62 17       	cp	r22, r18
     9a0:	73 07       	cpc	r23, r19
     9a2:	84 07       	cpc	r24, r20
     9a4:	ba 07       	cpc	r27, r26
     9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
     9a8:	62 1b       	sub	r22, r18
     9aa:	73 0b       	sbc	r23, r19
     9ac:	84 0b       	sbc	r24, r20
     9ae:	ba 0b       	sbc	r27, r26
     9b0:	ee 1f       	adc	r30, r30
     9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
     9b4:	e0 95       	com	r30
     9b6:	08 95       	ret

000009b8 <__fixunssfsi>:
     9b8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_splitA>
     9bc:	88 f0       	brcs	.+34     	; 0x9e0 <__fixunssfsi+0x28>
     9be:	9f 57       	subi	r25, 0x7F	; 127
     9c0:	98 f0       	brcs	.+38     	; 0x9e8 <__fixunssfsi+0x30>
     9c2:	b9 2f       	mov	r27, r25
     9c4:	99 27       	eor	r25, r25
     9c6:	b7 51       	subi	r27, 0x17	; 23
     9c8:	b0 f0       	brcs	.+44     	; 0x9f6 <__fixunssfsi+0x3e>
     9ca:	e1 f0       	breq	.+56     	; 0xa04 <__fixunssfsi+0x4c>
     9cc:	66 0f       	add	r22, r22
     9ce:	77 1f       	adc	r23, r23
     9d0:	88 1f       	adc	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	1a f0       	brmi	.+6      	; 0x9dc <__fixunssfsi+0x24>
     9d6:	ba 95       	dec	r27
     9d8:	c9 f7       	brne	.-14     	; 0x9cc <__fixunssfsi+0x14>
     9da:	14 c0       	rjmp	.+40     	; 0xa04 <__fixunssfsi+0x4c>
     9dc:	b1 30       	cpi	r27, 0x01	; 1
     9de:	91 f0       	breq	.+36     	; 0xa04 <__fixunssfsi+0x4c>
     9e0:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_zero>
     9e4:	b1 e0       	ldi	r27, 0x01	; 1
     9e6:	08 95       	ret
     9e8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__fp_zero>
     9ec:	67 2f       	mov	r22, r23
     9ee:	78 2f       	mov	r23, r24
     9f0:	88 27       	eor	r24, r24
     9f2:	b8 5f       	subi	r27, 0xF8	; 248
     9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x4c>
     9f6:	b9 3f       	cpi	r27, 0xF9	; 249
     9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x34>
     9fa:	86 95       	lsr	r24
     9fc:	77 95       	ror	r23
     9fe:	67 95       	ror	r22
     a00:	b3 95       	inc	r27
     a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x42>
     a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x5c>
     a06:	90 95       	com	r25
     a08:	80 95       	com	r24
     a0a:	70 95       	com	r23
     a0c:	61 95       	neg	r22
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	8f 4f       	sbci	r24, 0xFF	; 255
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	08 95       	ret

00000a16 <__floatunsisf>:
     a16:	e8 94       	clt
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
     a1a:	97 fb       	bst	r25, 7
     a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
     a1e:	90 95       	com	r25
     a20:	80 95       	com	r24
     a22:	70 95       	com	r23
     a24:	61 95       	neg	r22
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	8f 4f       	sbci	r24, 0xFF	; 255
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	99 23       	and	r25, r25
     a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
     a30:	f9 2f       	mov	r31, r25
     a32:	96 e9       	ldi	r25, 0x96	; 150
     a34:	bb 27       	eor	r27, r27
     a36:	93 95       	inc	r25
     a38:	f6 95       	lsr	r31
     a3a:	87 95       	ror	r24
     a3c:	77 95       	ror	r23
     a3e:	67 95       	ror	r22
     a40:	b7 95       	ror	r27
     a42:	f1 11       	cpse	r31, r1
     a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
     a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
     a48:	bb 0f       	add	r27, r27
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
     a4c:	60 ff       	sbrs	r22, 0
     a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
     a5a:	88 23       	and	r24, r24
     a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
     a5e:	96 e9       	ldi	r25, 0x96	; 150
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
     a62:	77 23       	and	r23, r23
     a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
     a66:	9e e8       	ldi	r25, 0x8E	; 142
     a68:	87 2f       	mov	r24, r23
     a6a:	76 2f       	mov	r23, r22
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
     a6e:	66 23       	and	r22, r22
     a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
     a72:	96 e8       	ldi	r25, 0x86	; 134
     a74:	86 2f       	mov	r24, r22
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
     a7c:	9a 95       	dec	r25
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
     a86:	88 0f       	add	r24, r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	97 f9       	bld	r25, 7
     a8e:	08 95       	ret

00000a90 <__fp_inf>:
     a90:	97 f9       	bld	r25, 7
     a92:	9f 67       	ori	r25, 0x7F	; 127
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	08 95       	ret

00000a9c <__fp_nan>:
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	80 ec       	ldi	r24, 0xC0	; 192
     aa0:	08 95       	ret

00000aa2 <__fp_pscA>:
     aa2:	00 24       	eor	r0, r0
     aa4:	0a 94       	dec	r0
     aa6:	16 16       	cp	r1, r22
     aa8:	17 06       	cpc	r1, r23
     aaa:	18 06       	cpc	r1, r24
     aac:	09 06       	cpc	r0, r25
     aae:	08 95       	ret

00000ab0 <__fp_pscB>:
     ab0:	00 24       	eor	r0, r0
     ab2:	0a 94       	dec	r0
     ab4:	12 16       	cp	r1, r18
     ab6:	13 06       	cpc	r1, r19
     ab8:	14 06       	cpc	r1, r20
     aba:	05 06       	cpc	r0, r21
     abc:	08 95       	ret

00000abe <__fp_round>:
     abe:	09 2e       	mov	r0, r25
     ac0:	03 94       	inc	r0
     ac2:	00 0c       	add	r0, r0
     ac4:	11 f4       	brne	.+4      	; 0xaca <__fp_round+0xc>
     ac6:	88 23       	and	r24, r24
     ac8:	52 f0       	brmi	.+20     	; 0xade <__fp_round+0x20>
     aca:	bb 0f       	add	r27, r27
     acc:	40 f4       	brcc	.+16     	; 0xade <__fp_round+0x20>
     ace:	bf 2b       	or	r27, r31
     ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0x18>
     ad2:	60 ff       	sbrs	r22, 0
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__fp_round+0x20>
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	8f 4f       	sbci	r24, 0xFF	; 255
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	08 95       	ret

00000ae0 <__fp_split3>:
     ae0:	57 fd       	sbrc	r21, 7
     ae2:	90 58       	subi	r25, 0x80	; 128
     ae4:	44 0f       	add	r20, r20
     ae6:	55 1f       	adc	r21, r21
     ae8:	59 f0       	breq	.+22     	; 0xb00 <__fp_splitA+0x10>
     aea:	5f 3f       	cpi	r21, 0xFF	; 255
     aec:	71 f0       	breq	.+28     	; 0xb0a <__fp_splitA+0x1a>
     aee:	47 95       	ror	r20

00000af0 <__fp_splitA>:
     af0:	88 0f       	add	r24, r24
     af2:	97 fb       	bst	r25, 7
     af4:	99 1f       	adc	r25, r25
     af6:	61 f0       	breq	.+24     	; 0xb10 <__fp_splitA+0x20>
     af8:	9f 3f       	cpi	r25, 0xFF	; 255
     afa:	79 f0       	breq	.+30     	; 0xb1a <__fp_splitA+0x2a>
     afc:	87 95       	ror	r24
     afe:	08 95       	ret
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	14 06       	cpc	r1, r20
     b06:	55 1f       	adc	r21, r21
     b08:	f2 cf       	rjmp	.-28     	; 0xaee <__fp_split3+0xe>
     b0a:	46 95       	lsr	r20
     b0c:	f1 df       	rcall	.-30     	; 0xaf0 <__fp_splitA>
     b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__fp_splitA+0x30>
     b10:	16 16       	cp	r1, r22
     b12:	17 06       	cpc	r1, r23
     b14:	18 06       	cpc	r1, r24
     b16:	99 1f       	adc	r25, r25
     b18:	f1 cf       	rjmp	.-30     	; 0xafc <__fp_splitA+0xc>
     b1a:	86 95       	lsr	r24
     b1c:	71 05       	cpc	r23, r1
     b1e:	61 05       	cpc	r22, r1
     b20:	08 94       	sec
     b22:	08 95       	ret

00000b24 <__fp_zero>:
     b24:	e8 94       	clt

00000b26 <__fp_szero>:
     b26:	bb 27       	eor	r27, r27
     b28:	66 27       	eor	r22, r22
     b2a:	77 27       	eor	r23, r23
     b2c:	cb 01       	movw	r24, r22
     b2e:	97 f9       	bld	r25, 7
     b30:	08 95       	ret

00000b32 <__divmodhi4>:
     b32:	97 fb       	bst	r25, 7
     b34:	07 2e       	mov	r0, r23
     b36:	16 f4       	brtc	.+4      	; 0xb3c <__divmodhi4+0xa>
     b38:	00 94       	com	r0
     b3a:	07 d0       	rcall	.+14     	; 0xb4a <__divmodhi4_neg1>
     b3c:	77 fd       	sbrc	r23, 7
     b3e:	09 d0       	rcall	.+18     	; 0xb52 <__divmodhi4_neg2>
     b40:	0e 94 12 06 	call	0xc24	; 0xc24 <__udivmodhi4>
     b44:	07 fc       	sbrc	r0, 7
     b46:	05 d0       	rcall	.+10     	; 0xb52 <__divmodhi4_neg2>
     b48:	3e f4       	brtc	.+14     	; 0xb58 <__divmodhi4_exit>

00000b4a <__divmodhi4_neg1>:
     b4a:	90 95       	com	r25
     b4c:	81 95       	neg	r24
     b4e:	9f 4f       	sbci	r25, 0xFF	; 255
     b50:	08 95       	ret

00000b52 <__divmodhi4_neg2>:
     b52:	70 95       	com	r23
     b54:	61 95       	neg	r22
     b56:	7f 4f       	sbci	r23, 0xFF	; 255

00000b58 <__divmodhi4_exit>:
     b58:	08 95       	ret

00000b5a <__udivmodsi4>:
     b5a:	a1 e2       	ldi	r26, 0x21	; 33
     b5c:	1a 2e       	mov	r1, r26
     b5e:	aa 1b       	sub	r26, r26
     b60:	bb 1b       	sub	r27, r27
     b62:	fd 01       	movw	r30, r26
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <__udivmodsi4_ep>

00000b66 <__udivmodsi4_loop>:
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	ee 1f       	adc	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	a2 17       	cp	r26, r18
     b70:	b3 07       	cpc	r27, r19
     b72:	e4 07       	cpc	r30, r20
     b74:	f5 07       	cpc	r31, r21
     b76:	20 f0       	brcs	.+8      	; 0xb80 <__udivmodsi4_ep>
     b78:	a2 1b       	sub	r26, r18
     b7a:	b3 0b       	sbc	r27, r19
     b7c:	e4 0b       	sbc	r30, r20
     b7e:	f5 0b       	sbc	r31, r21

00000b80 <__udivmodsi4_ep>:
     b80:	66 1f       	adc	r22, r22
     b82:	77 1f       	adc	r23, r23
     b84:	88 1f       	adc	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	1a 94       	dec	r1
     b8a:	69 f7       	brne	.-38     	; 0xb66 <__udivmodsi4_loop>
     b8c:	60 95       	com	r22
     b8e:	70 95       	com	r23
     b90:	80 95       	com	r24
     b92:	90 95       	com	r25
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	bd 01       	movw	r22, r26
     b9a:	cf 01       	movw	r24, r30
     b9c:	08 95       	ret

00000b9e <__ashldi3>:
     b9e:	0f 93       	push	r16
     ba0:	08 30       	cpi	r16, 0x08	; 8
     ba2:	90 f0       	brcs	.+36     	; 0xbc8 <__ashldi3+0x2a>
     ba4:	98 2f       	mov	r25, r24
     ba6:	87 2f       	mov	r24, r23
     ba8:	76 2f       	mov	r23, r22
     baa:	65 2f       	mov	r22, r21
     bac:	54 2f       	mov	r21, r20
     bae:	43 2f       	mov	r20, r19
     bb0:	32 2f       	mov	r19, r18
     bb2:	22 27       	eor	r18, r18
     bb4:	08 50       	subi	r16, 0x08	; 8
     bb6:	f4 cf       	rjmp	.-24     	; 0xba0 <__ashldi3+0x2>
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	44 1f       	adc	r20, r20
     bbe:	55 1f       	adc	r21, r21
     bc0:	66 1f       	adc	r22, r22
     bc2:	77 1f       	adc	r23, r23
     bc4:	88 1f       	adc	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 95       	dec	r16
     bca:	b2 f7       	brpl	.-20     	; 0xbb8 <__ashldi3+0x1a>
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <__ashrdi3>:
     bd0:	97 fb       	bst	r25, 7
     bd2:	10 f8       	bld	r1, 0

00000bd4 <__lshrdi3>:
     bd4:	16 94       	lsr	r1
     bd6:	00 08       	sbc	r0, r0
     bd8:	0f 93       	push	r16
     bda:	08 30       	cpi	r16, 0x08	; 8
     bdc:	98 f0       	brcs	.+38     	; 0xc04 <__lshrdi3+0x30>
     bde:	08 50       	subi	r16, 0x08	; 8
     be0:	23 2f       	mov	r18, r19
     be2:	34 2f       	mov	r19, r20
     be4:	45 2f       	mov	r20, r21
     be6:	56 2f       	mov	r21, r22
     be8:	67 2f       	mov	r22, r23
     bea:	78 2f       	mov	r23, r24
     bec:	89 2f       	mov	r24, r25
     bee:	90 2d       	mov	r25, r0
     bf0:	f4 cf       	rjmp	.-24     	; 0xbda <__lshrdi3+0x6>
     bf2:	05 94       	asr	r0
     bf4:	97 95       	ror	r25
     bf6:	87 95       	ror	r24
     bf8:	77 95       	ror	r23
     bfa:	67 95       	ror	r22
     bfc:	57 95       	ror	r21
     bfe:	47 95       	ror	r20
     c00:	37 95       	ror	r19
     c02:	27 95       	ror	r18
     c04:	0a 95       	dec	r16
     c06:	aa f7       	brpl	.-22     	; 0xbf2 <__lshrdi3+0x1e>
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <__cmpdi2_s8>:
     c0c:	00 24       	eor	r0, r0
     c0e:	a7 fd       	sbrc	r26, 7
     c10:	00 94       	com	r0
     c12:	2a 17       	cp	r18, r26
     c14:	30 05       	cpc	r19, r0
     c16:	40 05       	cpc	r20, r0
     c18:	50 05       	cpc	r21, r0
     c1a:	60 05       	cpc	r22, r0
     c1c:	70 05       	cpc	r23, r0
     c1e:	80 05       	cpc	r24, r0
     c20:	90 05       	cpc	r25, r0
     c22:	08 95       	ret

00000c24 <__udivmodhi4>:
     c24:	aa 1b       	sub	r26, r26
     c26:	bb 1b       	sub	r27, r27
     c28:	51 e1       	ldi	r21, 0x11	; 17
     c2a:	07 c0       	rjmp	.+14     	; 0xc3a <__udivmodhi4_ep>

00000c2c <__udivmodhi4_loop>:
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	a6 17       	cp	r26, r22
     c32:	b7 07       	cpc	r27, r23
     c34:	10 f0       	brcs	.+4      	; 0xc3a <__udivmodhi4_ep>
     c36:	a6 1b       	sub	r26, r22
     c38:	b7 0b       	sbc	r27, r23

00000c3a <__udivmodhi4_ep>:
     c3a:	88 1f       	adc	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	5a 95       	dec	r21
     c40:	a9 f7       	brne	.-22     	; 0xc2c <__udivmodhi4_loop>
     c42:	80 95       	com	r24
     c44:	90 95       	com	r25
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	08 95       	ret

00000c4c <vsnprintf>:
     c4c:	ae e0       	ldi	r26, 0x0E	; 14
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ec e2       	ldi	r30, 0x2C	; 44
     c52:	f6 e0       	ldi	r31, 0x06	; 6
     c54:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__prologue_saves__+0x1c>
     c58:	8c 01       	movw	r16, r24
     c5a:	fa 01       	movw	r30, r20
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	8c 83       	std	Y+4, r24	; 0x04
     c60:	09 83       	std	Y+1, r16	; 0x01
     c62:	1a 83       	std	Y+2, r17	; 0x02
     c64:	77 ff       	sbrs	r23, 7
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vsnprintf+0x20>
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e8       	ldi	r23, 0x80	; 128
     c6c:	cb 01       	movw	r24, r22
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	a9 01       	movw	r20, r18
     c76:	bf 01       	movw	r22, r30
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 52 06 	call	0xca4	; 0xca4 <vfprintf>
     c80:	4d 81       	ldd	r20, Y+5	; 0x05
     c82:	5e 81       	ldd	r21, Y+6	; 0x06
     c84:	57 fd       	sbrc	r21, 7
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <vsnprintf+0x50>
     c88:	2f 81       	ldd	r18, Y+7	; 0x07
     c8a:	38 85       	ldd	r19, Y+8	; 0x08
     c8c:	42 17       	cp	r20, r18
     c8e:	53 07       	cpc	r21, r19
     c90:	0c f4       	brge	.+2      	; 0xc94 <vsnprintf+0x48>
     c92:	9a 01       	movw	r18, r20
     c94:	f8 01       	movw	r30, r16
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	10 82       	st	Z, r1
     c9c:	2e 96       	adiw	r28, 0x0e	; 14
     c9e:	e4 e0       	ldi	r30, 0x04	; 4
     ca0:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__epilogue_restores__+0x1c>

00000ca4 <vfprintf>:
     ca4:	ab e0       	ldi	r26, 0x0B	; 11
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e5       	ldi	r30, 0x58	; 88
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__prologue_saves__>
     cb0:	6c 01       	movw	r12, r24
     cb2:	7b 01       	movw	r14, r22
     cb4:	8a 01       	movw	r16, r20
     cb6:	fc 01       	movw	r30, r24
     cb8:	16 82       	std	Z+6, r1	; 0x06
     cba:	17 82       	std	Z+7, r1	; 0x07
     cbc:	83 81       	ldd	r24, Z+3	; 0x03
     cbe:	81 ff       	sbrs	r24, 1
     cc0:	cc c1       	rjmp	.+920    	; 0x105a <vfprintf+0x3b6>
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	3c 01       	movw	r6, r24
     cc8:	f6 01       	movw	r30, r12
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	f7 01       	movw	r30, r14
     cce:	93 fd       	sbrc	r25, 3
     cd0:	85 91       	lpm	r24, Z+
     cd2:	93 ff       	sbrs	r25, 3
     cd4:	81 91       	ld	r24, Z+
     cd6:	7f 01       	movw	r14, r30
     cd8:	88 23       	and	r24, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <vfprintf+0x3a>
     cdc:	ba c1       	rjmp	.+884    	; 0x1052 <vfprintf+0x3ae>
     cde:	85 32       	cpi	r24, 0x25	; 37
     ce0:	39 f4       	brne	.+14     	; 0xcf0 <vfprintf+0x4c>
     ce2:	93 fd       	sbrc	r25, 3
     ce4:	85 91       	lpm	r24, Z+
     ce6:	93 ff       	sbrs	r25, 3
     ce8:	81 91       	ld	r24, Z+
     cea:	7f 01       	movw	r14, r30
     cec:	85 32       	cpi	r24, 0x25	; 37
     cee:	29 f4       	brne	.+10     	; 0xcfa <vfprintf+0x56>
     cf0:	b6 01       	movw	r22, r12
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
     cf8:	e7 cf       	rjmp	.-50     	; 0xcc8 <vfprintf+0x24>
     cfa:	91 2c       	mov	r9, r1
     cfc:	21 2c       	mov	r2, r1
     cfe:	31 2c       	mov	r3, r1
     d00:	ff e1       	ldi	r31, 0x1F	; 31
     d02:	f3 15       	cp	r31, r3
     d04:	d8 f0       	brcs	.+54     	; 0xd3c <vfprintf+0x98>
     d06:	8b 32       	cpi	r24, 0x2B	; 43
     d08:	79 f0       	breq	.+30     	; 0xd28 <vfprintf+0x84>
     d0a:	38 f4       	brcc	.+14     	; 0xd1a <vfprintf+0x76>
     d0c:	80 32       	cpi	r24, 0x20	; 32
     d0e:	79 f0       	breq	.+30     	; 0xd2e <vfprintf+0x8a>
     d10:	83 32       	cpi	r24, 0x23	; 35
     d12:	a1 f4       	brne	.+40     	; 0xd3c <vfprintf+0x98>
     d14:	23 2d       	mov	r18, r3
     d16:	20 61       	ori	r18, 0x10	; 16
     d18:	1d c0       	rjmp	.+58     	; 0xd54 <vfprintf+0xb0>
     d1a:	8d 32       	cpi	r24, 0x2D	; 45
     d1c:	61 f0       	breq	.+24     	; 0xd36 <vfprintf+0x92>
     d1e:	80 33       	cpi	r24, 0x30	; 48
     d20:	69 f4       	brne	.+26     	; 0xd3c <vfprintf+0x98>
     d22:	23 2d       	mov	r18, r3
     d24:	21 60       	ori	r18, 0x01	; 1
     d26:	16 c0       	rjmp	.+44     	; 0xd54 <vfprintf+0xb0>
     d28:	83 2d       	mov	r24, r3
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	38 2e       	mov	r3, r24
     d2e:	e3 2d       	mov	r30, r3
     d30:	e4 60       	ori	r30, 0x04	; 4
     d32:	3e 2e       	mov	r3, r30
     d34:	2a c0       	rjmp	.+84     	; 0xd8a <vfprintf+0xe6>
     d36:	f3 2d       	mov	r31, r3
     d38:	f8 60       	ori	r31, 0x08	; 8
     d3a:	1d c0       	rjmp	.+58     	; 0xd76 <vfprintf+0xd2>
     d3c:	37 fc       	sbrc	r3, 7
     d3e:	2d c0       	rjmp	.+90     	; 0xd9a <vfprintf+0xf6>
     d40:	20 ed       	ldi	r18, 0xD0	; 208
     d42:	28 0f       	add	r18, r24
     d44:	2a 30       	cpi	r18, 0x0A	; 10
     d46:	40 f0       	brcs	.+16     	; 0xd58 <vfprintf+0xb4>
     d48:	8e 32       	cpi	r24, 0x2E	; 46
     d4a:	b9 f4       	brne	.+46     	; 0xd7a <vfprintf+0xd6>
     d4c:	36 fc       	sbrc	r3, 6
     d4e:	81 c1       	rjmp	.+770    	; 0x1052 <vfprintf+0x3ae>
     d50:	23 2d       	mov	r18, r3
     d52:	20 64       	ori	r18, 0x40	; 64
     d54:	32 2e       	mov	r3, r18
     d56:	19 c0       	rjmp	.+50     	; 0xd8a <vfprintf+0xe6>
     d58:	36 fe       	sbrs	r3, 6
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <vfprintf+0xc4>
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	98 9e       	mul	r9, r24
     d60:	20 0d       	add	r18, r0
     d62:	11 24       	eor	r1, r1
     d64:	92 2e       	mov	r9, r18
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <vfprintf+0xe6>
     d68:	ea e0       	ldi	r30, 0x0A	; 10
     d6a:	2e 9e       	mul	r2, r30
     d6c:	20 0d       	add	r18, r0
     d6e:	11 24       	eor	r1, r1
     d70:	22 2e       	mov	r2, r18
     d72:	f3 2d       	mov	r31, r3
     d74:	f0 62       	ori	r31, 0x20	; 32
     d76:	3f 2e       	mov	r3, r31
     d78:	08 c0       	rjmp	.+16     	; 0xd8a <vfprintf+0xe6>
     d7a:	8c 36       	cpi	r24, 0x6C	; 108
     d7c:	21 f4       	brne	.+8      	; 0xd86 <vfprintf+0xe2>
     d7e:	83 2d       	mov	r24, r3
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	38 2e       	mov	r3, r24
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0xe6>
     d86:	88 36       	cpi	r24, 0x68	; 104
     d88:	41 f4       	brne	.+16     	; 0xd9a <vfprintf+0xf6>
     d8a:	f7 01       	movw	r30, r14
     d8c:	93 fd       	sbrc	r25, 3
     d8e:	85 91       	lpm	r24, Z+
     d90:	93 ff       	sbrs	r25, 3
     d92:	81 91       	ld	r24, Z+
     d94:	7f 01       	movw	r14, r30
     d96:	81 11       	cpse	r24, r1
     d98:	b3 cf       	rjmp	.-154    	; 0xd00 <vfprintf+0x5c>
     d9a:	98 2f       	mov	r25, r24
     d9c:	9f 7d       	andi	r25, 0xDF	; 223
     d9e:	95 54       	subi	r25, 0x45	; 69
     da0:	93 30       	cpi	r25, 0x03	; 3
     da2:	28 f4       	brcc	.+10     	; 0xdae <vfprintf+0x10a>
     da4:	0c 5f       	subi	r16, 0xFC	; 252
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	9f e3       	ldi	r25, 0x3F	; 63
     daa:	99 83       	std	Y+1, r25	; 0x01
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <vfprintf+0x124>
     dae:	83 36       	cpi	r24, 0x63	; 99
     db0:	31 f0       	breq	.+12     	; 0xdbe <vfprintf+0x11a>
     db2:	83 37       	cpi	r24, 0x73	; 115
     db4:	71 f0       	breq	.+28     	; 0xdd2 <vfprintf+0x12e>
     db6:	83 35       	cpi	r24, 0x53	; 83
     db8:	09 f0       	breq	.+2      	; 0xdbc <vfprintf+0x118>
     dba:	59 c0       	rjmp	.+178    	; 0xe6e <vfprintf+0x1ca>
     dbc:	21 c0       	rjmp	.+66     	; 0xe00 <vfprintf+0x15c>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 81       	ld	r24, Z
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	0e 5f       	subi	r16, 0xFE	; 254
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	88 24       	eor	r8, r8
     dca:	83 94       	inc	r8
     dcc:	91 2c       	mov	r9, r1
     dce:	53 01       	movw	r10, r6
     dd0:	13 c0       	rjmp	.+38     	; 0xdf8 <vfprintf+0x154>
     dd2:	28 01       	movw	r4, r16
     dd4:	f2 e0       	ldi	r31, 0x02	; 2
     dd6:	4f 0e       	add	r4, r31
     dd8:	51 1c       	adc	r5, r1
     dda:	f8 01       	movw	r30, r16
     ddc:	a0 80       	ld	r10, Z
     dde:	b1 80       	ldd	r11, Z+1	; 0x01
     de0:	36 fe       	sbrs	r3, 6
     de2:	03 c0       	rjmp	.+6      	; 0xdea <vfprintf+0x146>
     de4:	69 2d       	mov	r22, r9
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <vfprintf+0x14a>
     dea:	6f ef       	ldi	r22, 0xFF	; 255
     dec:	7f ef       	ldi	r23, 0xFF	; 255
     dee:	c5 01       	movw	r24, r10
     df0:	0e 94 3e 08 	call	0x107c	; 0x107c <strnlen>
     df4:	4c 01       	movw	r8, r24
     df6:	82 01       	movw	r16, r4
     df8:	f3 2d       	mov	r31, r3
     dfa:	ff 77       	andi	r31, 0x7F	; 127
     dfc:	3f 2e       	mov	r3, r31
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <vfprintf+0x188>
     e00:	28 01       	movw	r4, r16
     e02:	22 e0       	ldi	r18, 0x02	; 2
     e04:	42 0e       	add	r4, r18
     e06:	51 1c       	adc	r5, r1
     e08:	f8 01       	movw	r30, r16
     e0a:	a0 80       	ld	r10, Z
     e0c:	b1 80       	ldd	r11, Z+1	; 0x01
     e0e:	36 fe       	sbrs	r3, 6
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <vfprintf+0x174>
     e12:	69 2d       	mov	r22, r9
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x178>
     e18:	6f ef       	ldi	r22, 0xFF	; 255
     e1a:	7f ef       	ldi	r23, 0xFF	; 255
     e1c:	c5 01       	movw	r24, r10
     e1e:	0e 94 33 08 	call	0x1066	; 0x1066 <strnlen_P>
     e22:	4c 01       	movw	r8, r24
     e24:	f3 2d       	mov	r31, r3
     e26:	f0 68       	ori	r31, 0x80	; 128
     e28:	3f 2e       	mov	r3, r31
     e2a:	82 01       	movw	r16, r4
     e2c:	33 fc       	sbrc	r3, 3
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <vfprintf+0x1c2>
     e30:	82 2d       	mov	r24, r2
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 16       	cp	r8, r24
     e36:	99 06       	cpc	r9, r25
     e38:	b0 f4       	brcc	.+44     	; 0xe66 <vfprintf+0x1c2>
     e3a:	b6 01       	movw	r22, r12
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
     e44:	2a 94       	dec	r2
     e46:	f4 cf       	rjmp	.-24     	; 0xe30 <vfprintf+0x18c>
     e48:	f5 01       	movw	r30, r10
     e4a:	37 fc       	sbrc	r3, 7
     e4c:	85 91       	lpm	r24, Z+
     e4e:	37 fe       	sbrs	r3, 7
     e50:	81 91       	ld	r24, Z+
     e52:	5f 01       	movw	r10, r30
     e54:	b6 01       	movw	r22, r12
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
     e5c:	21 10       	cpse	r2, r1
     e5e:	2a 94       	dec	r2
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	82 1a       	sub	r8, r18
     e64:	91 08       	sbc	r9, r1
     e66:	81 14       	cp	r8, r1
     e68:	91 04       	cpc	r9, r1
     e6a:	71 f7       	brne	.-36     	; 0xe48 <vfprintf+0x1a4>
     e6c:	e8 c0       	rjmp	.+464    	; 0x103e <vfprintf+0x39a>
     e6e:	84 36       	cpi	r24, 0x64	; 100
     e70:	11 f0       	breq	.+4      	; 0xe76 <vfprintf+0x1d2>
     e72:	89 36       	cpi	r24, 0x69	; 105
     e74:	41 f5       	brne	.+80     	; 0xec6 <vfprintf+0x222>
     e76:	f8 01       	movw	r30, r16
     e78:	37 fe       	sbrs	r3, 7
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <vfprintf+0x1e6>
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	0c 5f       	subi	r16, 0xFC	; 252
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <vfprintf+0x1f6>
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	07 2e       	mov	r0, r23
     e90:	00 0c       	add	r0, r0
     e92:	88 0b       	sbc	r24, r24
     e94:	99 0b       	sbc	r25, r25
     e96:	0e 5f       	subi	r16, 0xFE	; 254
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	f3 2d       	mov	r31, r3
     e9c:	ff 76       	andi	r31, 0x6F	; 111
     e9e:	3f 2e       	mov	r3, r31
     ea0:	97 ff       	sbrs	r25, 7
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <vfprintf+0x212>
     ea4:	90 95       	com	r25
     ea6:	80 95       	com	r24
     ea8:	70 95       	com	r23
     eaa:	61 95       	neg	r22
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	8f 4f       	sbci	r24, 0xFF	; 255
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	f0 68       	ori	r31, 0x80	; 128
     eb4:	3f 2e       	mov	r3, r31
     eb6:	2a e0       	ldi	r18, 0x0A	; 10
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a3 01       	movw	r20, r6
     ebc:	0e 94 85 08 	call	0x110a	; 0x110a <__ultoa_invert>
     ec0:	88 2e       	mov	r8, r24
     ec2:	86 18       	sub	r8, r6
     ec4:	45 c0       	rjmp	.+138    	; 0xf50 <vfprintf+0x2ac>
     ec6:	85 37       	cpi	r24, 0x75	; 117
     ec8:	31 f4       	brne	.+12     	; 0xed6 <vfprintf+0x232>
     eca:	23 2d       	mov	r18, r3
     ecc:	2f 7e       	andi	r18, 0xEF	; 239
     ece:	b2 2e       	mov	r11, r18
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	25 c0       	rjmp	.+74     	; 0xf20 <vfprintf+0x27c>
     ed6:	93 2d       	mov	r25, r3
     ed8:	99 7f       	andi	r25, 0xF9	; 249
     eda:	b9 2e       	mov	r11, r25
     edc:	8f 36       	cpi	r24, 0x6F	; 111
     ede:	c1 f0       	breq	.+48     	; 0xf10 <vfprintf+0x26c>
     ee0:	18 f4       	brcc	.+6      	; 0xee8 <vfprintf+0x244>
     ee2:	88 35       	cpi	r24, 0x58	; 88
     ee4:	79 f0       	breq	.+30     	; 0xf04 <vfprintf+0x260>
     ee6:	b5 c0       	rjmp	.+362    	; 0x1052 <vfprintf+0x3ae>
     ee8:	80 37       	cpi	r24, 0x70	; 112
     eea:	19 f0       	breq	.+6      	; 0xef2 <vfprintf+0x24e>
     eec:	88 37       	cpi	r24, 0x78	; 120
     eee:	21 f0       	breq	.+8      	; 0xef8 <vfprintf+0x254>
     ef0:	b0 c0       	rjmp	.+352    	; 0x1052 <vfprintf+0x3ae>
     ef2:	e9 2f       	mov	r30, r25
     ef4:	e0 61       	ori	r30, 0x10	; 16
     ef6:	be 2e       	mov	r11, r30
     ef8:	b4 fe       	sbrs	r11, 4
     efa:	0d c0       	rjmp	.+26     	; 0xf16 <vfprintf+0x272>
     efc:	fb 2d       	mov	r31, r11
     efe:	f4 60       	ori	r31, 0x04	; 4
     f00:	bf 2e       	mov	r11, r31
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <vfprintf+0x272>
     f04:	34 fe       	sbrs	r3, 4
     f06:	0a c0       	rjmp	.+20     	; 0xf1c <vfprintf+0x278>
     f08:	29 2f       	mov	r18, r25
     f0a:	26 60       	ori	r18, 0x06	; 6
     f0c:	b2 2e       	mov	r11, r18
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <vfprintf+0x278>
     f10:	28 e0       	ldi	r18, 0x08	; 8
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <vfprintf+0x27c>
     f16:	20 e1       	ldi	r18, 0x10	; 16
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <vfprintf+0x27c>
     f1c:	20 e1       	ldi	r18, 0x10	; 16
     f1e:	32 e0       	ldi	r19, 0x02	; 2
     f20:	f8 01       	movw	r30, r16
     f22:	b7 fe       	sbrs	r11, 7
     f24:	07 c0       	rjmp	.+14     	; 0xf34 <vfprintf+0x290>
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	0c 5f       	subi	r16, 0xFC	; 252
     f30:	1f 4f       	sbci	r17, 0xFF	; 255
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <vfprintf+0x29c>
     f34:	60 81       	ld	r22, Z
     f36:	71 81       	ldd	r23, Z+1	; 0x01
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 5f       	subi	r16, 0xFE	; 254
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	a3 01       	movw	r20, r6
     f42:	0e 94 85 08 	call	0x110a	; 0x110a <__ultoa_invert>
     f46:	88 2e       	mov	r8, r24
     f48:	86 18       	sub	r8, r6
     f4a:	fb 2d       	mov	r31, r11
     f4c:	ff 77       	andi	r31, 0x7F	; 127
     f4e:	3f 2e       	mov	r3, r31
     f50:	36 fe       	sbrs	r3, 6
     f52:	0d c0       	rjmp	.+26     	; 0xf6e <vfprintf+0x2ca>
     f54:	23 2d       	mov	r18, r3
     f56:	2e 7f       	andi	r18, 0xFE	; 254
     f58:	a2 2e       	mov	r10, r18
     f5a:	89 14       	cp	r8, r9
     f5c:	58 f4       	brcc	.+22     	; 0xf74 <vfprintf+0x2d0>
     f5e:	34 fe       	sbrs	r3, 4
     f60:	0b c0       	rjmp	.+22     	; 0xf78 <vfprintf+0x2d4>
     f62:	32 fc       	sbrc	r3, 2
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <vfprintf+0x2d4>
     f66:	83 2d       	mov	r24, r3
     f68:	8e 7e       	andi	r24, 0xEE	; 238
     f6a:	a8 2e       	mov	r10, r24
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <vfprintf+0x2d4>
     f6e:	b8 2c       	mov	r11, r8
     f70:	a3 2c       	mov	r10, r3
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x2d6>
     f74:	b8 2c       	mov	r11, r8
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <vfprintf+0x2d6>
     f78:	b9 2c       	mov	r11, r9
     f7a:	a4 fe       	sbrs	r10, 4
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <vfprintf+0x2f8>
     f7e:	fe 01       	movw	r30, r28
     f80:	e8 0d       	add	r30, r8
     f82:	f1 1d       	adc	r31, r1
     f84:	80 81       	ld	r24, Z
     f86:	80 33       	cpi	r24, 0x30	; 48
     f88:	21 f4       	brne	.+8      	; 0xf92 <vfprintf+0x2ee>
     f8a:	9a 2d       	mov	r25, r10
     f8c:	99 7e       	andi	r25, 0xE9	; 233
     f8e:	a9 2e       	mov	r10, r25
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <vfprintf+0x300>
     f92:	a2 fe       	sbrs	r10, 2
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <vfprintf+0x2fe>
     f96:	b3 94       	inc	r11
     f98:	b3 94       	inc	r11
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <vfprintf+0x300>
     f9c:	8a 2d       	mov	r24, r10
     f9e:	86 78       	andi	r24, 0x86	; 134
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <vfprintf+0x300>
     fa2:	b3 94       	inc	r11
     fa4:	a3 fc       	sbrc	r10, 3
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <vfprintf+0x326>
     fa8:	a0 fe       	sbrs	r10, 0
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <vfprintf+0x314>
     fac:	b2 14       	cp	r11, r2
     fae:	88 f4       	brcc	.+34     	; 0xfd2 <vfprintf+0x32e>
     fb0:	28 0c       	add	r2, r8
     fb2:	92 2c       	mov	r9, r2
     fb4:	9b 18       	sub	r9, r11
     fb6:	0e c0       	rjmp	.+28     	; 0xfd4 <vfprintf+0x330>
     fb8:	b2 14       	cp	r11, r2
     fba:	60 f4       	brcc	.+24     	; 0xfd4 <vfprintf+0x330>
     fbc:	b6 01       	movw	r22, r12
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
     fc6:	b3 94       	inc	r11
     fc8:	f7 cf       	rjmp	.-18     	; 0xfb8 <vfprintf+0x314>
     fca:	b2 14       	cp	r11, r2
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <vfprintf+0x330>
     fce:	2b 18       	sub	r2, r11
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <vfprintf+0x332>
     fd2:	98 2c       	mov	r9, r8
     fd4:	21 2c       	mov	r2, r1
     fd6:	a4 fe       	sbrs	r10, 4
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <vfprintf+0x356>
     fda:	b6 01       	movw	r22, r12
     fdc:	80 e3       	ldi	r24, 0x30	; 48
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
     fe4:	a2 fe       	sbrs	r10, 2
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <vfprintf+0x372>
     fe8:	a1 fc       	sbrc	r10, 1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vfprintf+0x34e>
     fec:	88 e7       	ldi	r24, 0x78	; 120
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0x352>
     ff2:	88 e5       	ldi	r24, 0x58	; 88
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	b6 01       	movw	r22, r12
     ff8:	0c c0       	rjmp	.+24     	; 0x1012 <vfprintf+0x36e>
     ffa:	8a 2d       	mov	r24, r10
     ffc:	86 78       	andi	r24, 0x86	; 134
     ffe:	59 f0       	breq	.+22     	; 0x1016 <vfprintf+0x372>
    1000:	a1 fe       	sbrs	r10, 1
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0x364>
    1004:	8b e2       	ldi	r24, 0x2B	; 43
    1006:	01 c0       	rjmp	.+2      	; 0x100a <vfprintf+0x366>
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	a7 fc       	sbrc	r10, 7
    100c:	8d e2       	ldi	r24, 0x2D	; 45
    100e:	b6 01       	movw	r22, r12
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1016:	89 14       	cp	r8, r9
    1018:	38 f4       	brcc	.+14     	; 0x1028 <vfprintf+0x384>
    101a:	b6 01       	movw	r22, r12
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    1024:	9a 94       	dec	r9
    1026:	f7 cf       	rjmp	.-18     	; 0x1016 <vfprintf+0x372>
    1028:	8a 94       	dec	r8
    102a:	f3 01       	movw	r30, r6
    102c:	e8 0d       	add	r30, r8
    102e:	f1 1d       	adc	r31, r1
    1030:	80 81       	ld	r24, Z
    1032:	b6 01       	movw	r22, r12
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    103a:	81 10       	cpse	r8, r1
    103c:	f5 cf       	rjmp	.-22     	; 0x1028 <vfprintf+0x384>
    103e:	22 20       	and	r2, r2
    1040:	09 f4       	brne	.+2      	; 0x1044 <vfprintf+0x3a0>
    1042:	42 ce       	rjmp	.-892    	; 0xcc8 <vfprintf+0x24>
    1044:	b6 01       	movw	r22, r12
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 49 08 	call	0x1092	; 0x1092 <fputc>
    104e:	2a 94       	dec	r2
    1050:	f6 cf       	rjmp	.-20     	; 0x103e <vfprintf+0x39a>
    1052:	f6 01       	movw	r30, r12
    1054:	86 81       	ldd	r24, Z+6	; 0x06
    1056:	97 81       	ldd	r25, Z+7	; 0x07
    1058:	02 c0       	rjmp	.+4      	; 0x105e <vfprintf+0x3ba>
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	9f ef       	ldi	r25, 0xFF	; 255
    105e:	2b 96       	adiw	r28, 0x0b	; 11
    1060:	e2 e1       	ldi	r30, 0x12	; 18
    1062:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__epilogue_restores__>

00001066 <strnlen_P>:
    1066:	fc 01       	movw	r30, r24
    1068:	05 90       	lpm	r0, Z+
    106a:	61 50       	subi	r22, 0x01	; 1
    106c:	70 40       	sbci	r23, 0x00	; 0
    106e:	01 10       	cpse	r0, r1
    1070:	d8 f7       	brcc	.-10     	; 0x1068 <strnlen_P+0x2>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	8e 0f       	add	r24, r30
    1078:	9f 1f       	adc	r25, r31
    107a:	08 95       	ret

0000107c <strnlen>:
    107c:	fc 01       	movw	r30, r24
    107e:	61 50       	subi	r22, 0x01	; 1
    1080:	70 40       	sbci	r23, 0x00	; 0
    1082:	01 90       	ld	r0, Z+
    1084:	01 10       	cpse	r0, r1
    1086:	d8 f7       	brcc	.-10     	; 0x107e <strnlen+0x2>
    1088:	80 95       	com	r24
    108a:	90 95       	com	r25
    108c:	8e 0f       	add	r24, r30
    108e:	9f 1f       	adc	r25, r31
    1090:	08 95       	ret

00001092 <fputc>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	fb 01       	movw	r30, r22
    109c:	23 81       	ldd	r18, Z+3	; 0x03
    109e:	21 fd       	sbrc	r18, 1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <fputc+0x16>
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	2c c0       	rjmp	.+88     	; 0x1100 <fputc+0x6e>
    10a8:	22 ff       	sbrs	r18, 2
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <fputc+0x46>
    10ac:	46 81       	ldd	r20, Z+6	; 0x06
    10ae:	57 81       	ldd	r21, Z+7	; 0x07
    10b0:	24 81       	ldd	r18, Z+4	; 0x04
    10b2:	35 81       	ldd	r19, Z+5	; 0x05
    10b4:	42 17       	cp	r20, r18
    10b6:	53 07       	cpc	r21, r19
    10b8:	44 f4       	brge	.+16     	; 0x10ca <fputc+0x38>
    10ba:	a0 81       	ld	r26, Z
    10bc:	b1 81       	ldd	r27, Z+1	; 0x01
    10be:	9d 01       	movw	r18, r26
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	20 83       	st	Z, r18
    10c6:	31 83       	std	Z+1, r19	; 0x01
    10c8:	8c 93       	st	X, r24
    10ca:	26 81       	ldd	r18, Z+6	; 0x06
    10cc:	37 81       	ldd	r19, Z+7	; 0x07
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	26 83       	std	Z+6, r18	; 0x06
    10d4:	37 83       	std	Z+7, r19	; 0x07
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <fputc+0x6e>
    10d8:	8b 01       	movw	r16, r22
    10da:	ec 01       	movw	r28, r24
    10dc:	fb 01       	movw	r30, r22
    10de:	00 84       	ldd	r0, Z+8	; 0x08
    10e0:	f1 85       	ldd	r31, Z+9	; 0x09
    10e2:	e0 2d       	mov	r30, r0
    10e4:	09 95       	icall
    10e6:	89 2b       	or	r24, r25
    10e8:	e1 f6       	brne	.-72     	; 0x10a2 <fputc+0x10>
    10ea:	d8 01       	movw	r26, r16
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	16 96       	adiw	r26, 0x06	; 6
    10f8:	8d 93       	st	X+, r24
    10fa:	9c 93       	st	X, r25
    10fc:	17 97       	sbiw	r26, 0x07	; 7
    10fe:	ce 01       	movw	r24, r28
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <__ultoa_invert>:
    110a:	fa 01       	movw	r30, r20
    110c:	aa 27       	eor	r26, r26
    110e:	28 30       	cpi	r18, 0x08	; 8
    1110:	51 f1       	breq	.+84     	; 0x1166 <__ultoa_invert+0x5c>
    1112:	20 31       	cpi	r18, 0x10	; 16
    1114:	81 f1       	breq	.+96     	; 0x1176 <__ultoa_invert+0x6c>
    1116:	e8 94       	clt
    1118:	6f 93       	push	r22
    111a:	6e 7f       	andi	r22, 0xFE	; 254
    111c:	6e 5f       	subi	r22, 0xFE	; 254
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	af 4f       	sbci	r26, 0xFF	; 255
    1126:	b1 e0       	ldi	r27, 0x01	; 1
    1128:	3e d0       	rcall	.+124    	; 0x11a6 <__ultoa_invert+0x9c>
    112a:	b4 e0       	ldi	r27, 0x04	; 4
    112c:	3c d0       	rcall	.+120    	; 0x11a6 <__ultoa_invert+0x9c>
    112e:	67 0f       	add	r22, r23
    1130:	78 1f       	adc	r23, r24
    1132:	89 1f       	adc	r24, r25
    1134:	9a 1f       	adc	r25, r26
    1136:	a1 1d       	adc	r26, r1
    1138:	68 0f       	add	r22, r24
    113a:	79 1f       	adc	r23, r25
    113c:	8a 1f       	adc	r24, r26
    113e:	91 1d       	adc	r25, r1
    1140:	a1 1d       	adc	r26, r1
    1142:	6a 0f       	add	r22, r26
    1144:	71 1d       	adc	r23, r1
    1146:	81 1d       	adc	r24, r1
    1148:	91 1d       	adc	r25, r1
    114a:	a1 1d       	adc	r26, r1
    114c:	20 d0       	rcall	.+64     	; 0x118e <__ultoa_invert+0x84>
    114e:	09 f4       	brne	.+2      	; 0x1152 <__ultoa_invert+0x48>
    1150:	68 94       	set
    1152:	3f 91       	pop	r19
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	26 9f       	mul	r18, r22
    1158:	11 24       	eor	r1, r1
    115a:	30 19       	sub	r19, r0
    115c:	30 5d       	subi	r19, 0xD0	; 208
    115e:	31 93       	st	Z+, r19
    1160:	de f6       	brtc	.-74     	; 0x1118 <__ultoa_invert+0xe>
    1162:	cf 01       	movw	r24, r30
    1164:	08 95       	ret
    1166:	46 2f       	mov	r20, r22
    1168:	47 70       	andi	r20, 0x07	; 7
    116a:	40 5d       	subi	r20, 0xD0	; 208
    116c:	41 93       	st	Z+, r20
    116e:	b3 e0       	ldi	r27, 0x03	; 3
    1170:	0f d0       	rcall	.+30     	; 0x1190 <__ultoa_invert+0x86>
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__ultoa_invert+0x5c>
    1174:	f6 cf       	rjmp	.-20     	; 0x1162 <__ultoa_invert+0x58>
    1176:	46 2f       	mov	r20, r22
    1178:	4f 70       	andi	r20, 0x0F	; 15
    117a:	40 5d       	subi	r20, 0xD0	; 208
    117c:	4a 33       	cpi	r20, 0x3A	; 58
    117e:	18 f0       	brcs	.+6      	; 0x1186 <__ultoa_invert+0x7c>
    1180:	49 5d       	subi	r20, 0xD9	; 217
    1182:	31 fd       	sbrc	r19, 1
    1184:	40 52       	subi	r20, 0x20	; 32
    1186:	41 93       	st	Z+, r20
    1188:	02 d0       	rcall	.+4      	; 0x118e <__ultoa_invert+0x84>
    118a:	a9 f7       	brne	.-22     	; 0x1176 <__ultoa_invert+0x6c>
    118c:	ea cf       	rjmp	.-44     	; 0x1162 <__ultoa_invert+0x58>
    118e:	b4 e0       	ldi	r27, 0x04	; 4
    1190:	a6 95       	lsr	r26
    1192:	97 95       	ror	r25
    1194:	87 95       	ror	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	ba 95       	dec	r27
    119c:	c9 f7       	brne	.-14     	; 0x1190 <__ultoa_invert+0x86>
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	61 05       	cpc	r22, r1
    11a2:	71 05       	cpc	r23, r1
    11a4:	08 95       	ret
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	0a 2e       	mov	r0, r26
    11ac:	06 94       	lsr	r0
    11ae:	57 95       	ror	r21
    11b0:	47 95       	ror	r20
    11b2:	37 95       	ror	r19
    11b4:	27 95       	ror	r18
    11b6:	ba 95       	dec	r27
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__ultoa_invert+0xa2>
    11ba:	62 0f       	add	r22, r18
    11bc:	73 1f       	adc	r23, r19
    11be:	84 1f       	adc	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	a0 1d       	adc	r26, r0
    11c4:	08 95       	ret

000011c6 <ccp_write_io>:
    11c6:	dc 01       	movw	r26, r24
    11c8:	28 ed       	ldi	r18, 0xD8	; 216
    11ca:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6cfc>
    11ce:	6c 93       	st	X, r22
    11d0:	08 95       	ret

000011d2 <__prologue_saves__>:
    11d2:	2f 92       	push	r2
    11d4:	3f 92       	push	r3
    11d6:	4f 92       	push	r4
    11d8:	5f 92       	push	r5
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	ca 1b       	sub	r28, r26
    11fc:	db 0b       	sbc	r29, r27
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	09 94       	ijmp

00001204 <__epilogue_restores__>:
    1204:	2a 88       	ldd	r2, Y+18	; 0x12
    1206:	39 88       	ldd	r3, Y+17	; 0x11
    1208:	48 88       	ldd	r4, Y+16	; 0x10
    120a:	5f 84       	ldd	r5, Y+15	; 0x0f
    120c:	6e 84       	ldd	r6, Y+14	; 0x0e
    120e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1210:	8c 84       	ldd	r8, Y+12	; 0x0c
    1212:	9b 84       	ldd	r9, Y+11	; 0x0b
    1214:	aa 84       	ldd	r10, Y+10	; 0x0a
    1216:	b9 84       	ldd	r11, Y+9	; 0x09
    1218:	c8 84       	ldd	r12, Y+8	; 0x08
    121a:	df 80       	ldd	r13, Y+7	; 0x07
    121c:	ee 80       	ldd	r14, Y+6	; 0x06
    121e:	fd 80       	ldd	r15, Y+5	; 0x05
    1220:	0c 81       	ldd	r16, Y+4	; 0x04
    1222:	1b 81       	ldd	r17, Y+3	; 0x03
    1224:	aa 81       	ldd	r26, Y+2	; 0x02
    1226:	b9 81       	ldd	r27, Y+1	; 0x01
    1228:	ce 0f       	add	r28, r30
    122a:	d1 1d       	adc	r29, r1
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	ed 01       	movw	r28, r26
    1232:	08 95       	ret

00001234 <_exit>:
    1234:	f8 94       	cli

00001236 <__stop_program>:
    1236:	ff cf       	rjmp	.-2      	; 0x1236 <__stop_program>
