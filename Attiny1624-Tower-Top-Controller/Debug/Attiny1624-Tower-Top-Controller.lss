
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000015bf  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  000093d0  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000065  00803800  00803800  000015bf  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  00001660  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003be6  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002529  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010f1  00000000  00000000  00007907  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000308  00000000  00000000  000089f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d79  00000000  00000000  00008d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008fa  00000000  00000000  0000aa79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000b373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 36       	cpi	r26, 0x65	; 101
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 46 02 	call	0x48c	; 0x48c <main>
      98:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 * - Applies timebase for proper sampling setup.
 * - Uses 1024-sample accumulation for noise reduction.
 * - Configures burst mode.
 */
void ADC0_init() {
	ADC0.CTRLA = ADC_ENABLE_bm; ///< Enable ADC
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV10_gc; ///< Set ADC clock prescaler to divide by 10
      a8:	84 e0       	ldi	r24, 0x04	; 4
      aa:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp); ///< Set ADC timebase
      ac:	80 ea       	ldi	r24, 0xA0	; 160
      ae:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLE = 0; ///< Set sampling length to 0.5 ADC cycles
      b0:	10 86       	std	Z+8, r1	; 0x08
	ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc; ///< Accumulate 1024 samples for each result
      b2:	8a e0       	ldi	r24, 0x0A	; 10
      b4:	81 87       	std	Z+9, r24	; 0x09
	ADC0.COMMAND = ADC_MODE_BURST_SCALING_gc; ///< Use burst mode for better averaging
      b6:	80 e5       	ldi	r24, 0x50	; 80
      b8:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait until ADC is ready
      ba:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f7136>
      be:	80 fd       	sbrc	r24, 0
      c0:	fc cf       	rjmp	.-8      	; 0xba <ADC0_init+0x1a>
}
      c2:	08 95       	ret

000000c4 <ADC0_Read>:
 *
 * @param channel The ADC multiplexer positive input channel.
 * @return 16-bit averaged ADC result.
 */
uint16_t ADC0_Read(uint8_t channel) {
	ADC0.MUXPOS = channel;
      c4:	e0 e0       	ldi	r30, 0x00	; 0
      c6:	f6 e0       	ldi	r31, 0x06	; 6
      c8:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; ///< Start conversion
      ca:	82 85       	ldd	r24, Z+10	; 0x0a
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait for ADC to become ready
      d0:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f7136>
      d4:	80 fd       	sbrc	r24, 0
      d6:	fc cf       	rjmp	.-8      	; 0xd0 <ADC0_Read+0xc>
	while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm)); ///< Wait until the result is ready
      d8:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f7135>
      dc:	81 ff       	sbrs	r24, 1
      de:	fc cf       	rjmp	.-8      	; 0xd8 <ADC0_Read+0x14>
	ADC0.INTFLAGS = ADC_SAMPRDY_bm; ///< Clear the sample ready flag
      e0:	e0 e0       	ldi	r30, 0x00	; 0
      e2:	f6 e0       	ldi	r31, 0x06	; 6
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	85 83       	std	Z+5, r24	; 0x05
	return ADC0.SAMPLE; ///< Return averaged result
      e8:	84 89       	ldd	r24, Z+20	; 0x14
      ea:	95 89       	ldd	r25, Z+21	; 0x15
}
      ec:	08 95       	ret

000000ee <ReadSolarCells>:
 *   then reads current with VDD as reference and applies correction.
 * - For voltage: Uses 2.048V reference for AMC1311-based voltage sensor and applies scaling.
 *
 * @param channel Selects between voltage and current input channels.
 */
void ReadSolarCells(solarrcells_t channel) {
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	c8 2f       	mov	r28, r24
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	19 f4       	brne	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	18 e3       	ldi	r17, 0x38	; 56
     106:	02 c0       	rjmp	.+4      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
     108:	0b e2       	ldi	r16, 0x2B	; 43
     10a:	18 e3       	ldi	r17, 0x38	; 56

	if (channel == Current) {
     10c:	cb 30       	cpi	r28, 0x0B	; 11
     10e:	09 f0       	breq	.+2      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
     110:	49 c0       	rjmp	.+146    	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
		// Current measurement depends on MCU VDD; we need to measure VDD to calibrate range.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_1024MV_gc;
     112:	0f 2e       	mov	r0, r31
     114:	e1 2c       	mov	r14, r1
     116:	f6 e0       	ldi	r31, 0x06	; 6
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	f7 01       	movw	r30, r14
     11e:	82 81       	ldd	r24, Z+2	; 0x02
     120:	88 7f       	andi	r24, 0xF8	; 248
     122:	84 60       	ori	r24, 0x04	; 4
     124:	82 83       	std	Z+2, r24	; 0x02
		float mcuVoltage = 0.0025 * ADC0_Read(ADC_MUXPOS_VDDDIV10_gc); ///< VDD = 10 × ADC result × 1.024 / 4096
     126:	81 e3       	ldi	r24, 0x31	; 49
     128:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     12c:	bc 01       	movw	r22, r24
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatunsisf>
     136:	2a e0       	ldi	r18, 0x0A	; 10
     138:	37 ed       	ldi	r19, 0xD7	; 215
     13a:	43 e2       	ldi	r20, 0x23	; 35
     13c:	5b e3       	ldi	r21, 0x3B	; 59
     13e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulsf3>
		uint16_t tmc1100Range = round(mcuVoltage * 250); ///< Calibrated TMCS1100 range depending on VDD
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	4a e7       	ldi	r20, 0x7A	; 122
     148:	53 e4       	ldi	r21, 0x43	; 67
     14a:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulsf3>
     14e:	0e 94 18 06 	call	0xc30	; 0xc30 <round>
     152:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_VDD_gc;
     156:	f7 01       	movw	r30, r14
     158:	22 81       	ldd	r18, Z+2	; 0x02
     15a:	28 7f       	andi	r18, 0xF8	; 248
     15c:	22 83       	std	Z+2, r18	; 0x02
		uint16_t current = ((float)tmc1100Range / 4096) * ADC0_Read(channel);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatunsisf>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e8       	ldi	r20, 0x80	; 128
     16c:	59 e3       	ldi	r21, 0x39	; 57
     16e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulsf3>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     17c:	bc 01       	movw	r22, r24
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatunsisf>
     186:	a7 01       	movw	r20, r14
     188:	96 01       	movw	r18, r12
     18a:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulsf3>
     18e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
		voltageORcurrent->Result = current > TMCS1100_ZERO_I ? current - TMCS1100_ZERO_I : current;
     192:	6d 30       	cpi	r22, 0x0D	; 13
     194:	71 05       	cpc	r23, r1
     196:	10 f0       	brcs	.+4      	; 0x19c <__EEPROM_REGION_LENGTH__+0x9c>
     198:	6c 50       	subi	r22, 0x0C	; 12
     19a:	71 09       	sbc	r23, r1
     19c:	f8 01       	movw	r30, r16
     19e:	60 83       	st	Z, r22
     1a0:	71 83       	std	Z+1, r23	; 0x01
     1a2:	19 c0       	rjmp	.+50     	; 0x1d6 <__EEPROM_REGION_LENGTH__+0xd6>
	}
	else {
		// Voltage measurement uses a fixed 2.048V reference, independent of VDD.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_2048MV_gc;
     1a4:	e0 e0       	ldi	r30, 0x00	; 0
     1a6:	f6 e0       	ldi	r31, 0x06	; 6
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	88 7f       	andi	r24, 0xF8	; 248
     1ac:	85 60       	ori	r24, 0x05	; 5
     1ae:	82 83       	std	Z+2, r24	; 0x02
		voltageORcurrent->Result = AMC1311_COEF * ADC0_Read(channel);
     1b0:	8c 2f       	mov	r24, r28
     1b2:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     1b6:	bc 01       	movw	r22, r24
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatunsisf>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e4       	ldi	r20, 0x40	; 64
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__mulsf3>
     1cc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
     1d0:	f8 01       	movw	r30, r16
     1d2:	60 83       	st	Z, r22
     1d4:	71 83       	std	Z+1, r23	; 0x01
	}
}
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	08 95       	ret

000001e6 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Wait for external clock change to stable */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm)
     1e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6b93>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f3       	brlt	.-8      	; 0x1e6 <CLOCK_XOSCHF_clock_init>
	{};
	/* Enable external (20 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKSEL_OSC20M_gc);
     1ee:	63 e0       	ldi	r22, 0x03	; 3
     1f0:	80 e6       	ldi	r24, 0x60	; 96
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 af 09 	call	0x135e	; 0x135e <ccp_write_io>

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	81 e6       	ldi	r24, 0x61	; 97
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 af 09 	call	0x135e	; 0x135e <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     202:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6b93>
     206:	80 fd       	sbrc	r24, 0
     208:	fc cf       	rjmp	.-8      	; 0x202 <CLOCK_XOSCHF_clock_init+0x1c>
	{};
	/* Configuration complete;*/
}
     20a:	08 95       	ret

0000020c <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     210:	8b 01       	movw	r16, r22
     212:	9c 01       	movw	r18, r24
     214:	0f 2e       	mov	r0, r31
     216:	fc e0       	ldi	r31, 0x0C	; 12
     218:	36 95       	lsr	r19
     21a:	27 95       	ror	r18
     21c:	17 95       	ror	r17
     21e:	07 95       	ror	r16
     220:	fa 95       	dec	r31
     222:	d1 f7       	brne	.-12     	; 0x218 <crc6_mt6701_lookup+0xc>
     224:	f0 2d       	mov	r31, r0
     226:	0f 73       	andi	r16, 0x3F	; 63
     228:	11 27       	eor	r17, r17
     22a:	22 27       	eor	r18, r18
     22c:	33 27       	eor	r19, r19
     22e:	f8 01       	movw	r30, r16
     230:	e0 53       	subi	r30, 0x30	; 48
     232:	fb 46       	sbci	r31, 0x6B	; 107
     234:	40 81       	ld	r20, Z
     236:	8b 01       	movw	r16, r22
     238:	9c 01       	movw	r18, r24
     23a:	68 94       	set
     23c:	15 f8       	bld	r1, 5
     23e:	36 95       	lsr	r19
     240:	27 95       	ror	r18
     242:	17 95       	ror	r17
     244:	07 95       	ror	r16
     246:	16 94       	lsr	r1
     248:	d1 f7       	brne	.-12     	; 0x23e <crc6_mt6701_lookup+0x32>
     24a:	0f 73       	andi	r16, 0x3F	; 63
     24c:	11 27       	eor	r17, r17
     24e:	22 27       	eor	r18, r18
     250:	33 27       	eor	r19, r19
     252:	04 27       	eor	r16, r20
     254:	f8 01       	movw	r30, r16
     256:	e0 53       	subi	r30, 0x30	; 48
     258:	fb 46       	sbci	r31, 0x6B	; 107
     25a:	20 81       	ld	r18, Z
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	8f 73       	andi	r24, 0x3F	; 63
     262:	99 27       	eor	r25, r25
     264:	aa 27       	eor	r26, r26
     266:	bb 27       	eor	r27, r27
     268:	82 27       	eor	r24, r18
     26a:	fc 01       	movw	r30, r24
     26c:	e0 53       	subi	r30, 0x30	; 48
     26e:	fb 46       	sbci	r31, 0x6B	; 107
}
     270:	80 81       	ld	r24, Z
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     278:	cf 93       	push	r28
     27a:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	a2 81       	ldd	r26, Z+2	; 0x02
     282:	b3 81       	ldd	r27, Z+3	; 0x03
     284:	c8 2f       	mov	r28, r24
     286:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	68 94       	set
     28e:	15 f8       	bld	r1, 5
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	77 95       	ror	r23
     296:	67 95       	ror	r22
     298:	16 94       	lsr	r1
     29a:	d1 f7       	brne	.-12     	; 0x290 <MT6701CRC+0x18>
     29c:	60 83       	st	Z, r22
     29e:	71 83       	std	Z+1, r23	; 0x01
     2a0:	82 83       	std	Z+2, r24	; 0x02
     2a2:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     2a4:	0e 94 06 01 	call	0x20c	; 0x20c <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	c8 13       	cpse	r28, r24
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <MT6701CRC+0x38>
     2ae:	90 e0       	ldi	r25, 0x00	; 0
}
     2b0:	89 2f       	mov	r24, r25
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     2b6:	2f 92       	push	r2
     2b8:	3f 92       	push	r3
     2ba:	4f 92       	push	r4
     2bc:	5f 92       	push	r5
     2be:	6f 92       	push	r6
     2c0:	7f 92       	push	r7
     2c2:	8f 92       	push	r8
     2c4:	9f 92       	push	r9
     2c6:	af 92       	push	r10
     2c8:	bf 92       	push	r11
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	2b 97       	sbiw	r28, 0x0b	; 11
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	c2 2e       	mov	r12, r18
     2e6:	b3 2e       	mov	r11, r19
     2e8:	a4 2e       	mov	r10, r20
     2ea:	95 2e       	mov	r9, r21
     2ec:	86 2e       	mov	r8, r22
     2ee:	77 2e       	mov	r7, r23
     2f0:	68 2e       	mov	r6, r24
     2f2:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2f4:	f2 2e       	mov	r15, r18
     2f6:	03 2f       	mov	r16, r19
     2f8:	14 2f       	mov	r17, r20
     2fa:	5a 87       	std	Y+10, r21	; 0x0a
     2fc:	69 83       	std	Y+1, r22	; 0x01
     2fe:	b7 2f       	mov	r27, r23
     300:	d8 2e       	mov	r13, r24
     302:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     304:	e0 e0       	ldi	r30, 0x00	; 0
     306:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     308:	14 c0       	rjmp	.+40     	; 0x332 <crc8_cdma2000+0x7c>
        length++;
     30a:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     30c:	2f 2d       	mov	r18, r15
     30e:	30 2f       	mov	r19, r16
     310:	41 2f       	mov	r20, r17
     312:	5a 85       	ldd	r21, Y+10	; 0x0a
     314:	69 81       	ldd	r22, Y+1	; 0x01
     316:	7b 2f       	mov	r23, r27
     318:	8d 2d       	mov	r24, r13
     31a:	9e 2d       	mov	r25, r14
     31c:	08 e0       	ldi	r16, 0x08	; 8
     31e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__lshrdi3>
     322:	f2 2e       	mov	r15, r18
     324:	03 2f       	mov	r16, r19
     326:	14 2f       	mov	r17, r20
     328:	5a 87       	std	Y+10, r21	; 0x0a
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	b7 2f       	mov	r27, r23
     32e:	d8 2e       	mov	r13, r24
     330:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     332:	2f 2d       	mov	r18, r15
     334:	30 2f       	mov	r19, r16
     336:	41 2f       	mov	r20, r17
     338:	5a 85       	ldd	r21, Y+10	; 0x0a
     33a:	69 81       	ldd	r22, Y+1	; 0x01
     33c:	7b 2f       	mov	r23, r27
     33e:	8d 2d       	mov	r24, r13
     340:	9e 2d       	mov	r25, r14
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	0e 94 d2 06 	call	0xda4	; 0xda4 <__cmpdi2_s8>
     348:	01 f7       	brne	.-64     	; 0x30a <crc8_cdma2000+0x54>
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	8a 87       	std	Y+10, r24	; 0x0a
     34e:	cb 86       	std	Y+11, r12	; 0x0b
     350:	b9 82       	std	Y+1, r11	; 0x01
     352:	4a 2c       	mov	r4, r10
     354:	39 2c       	mov	r3, r9
     356:	28 2c       	mov	r2, r8
     358:	1a c0       	rjmp	.+52     	; 0x38e <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     35a:	8d 01       	movw	r16, r26
     35c:	00 0f       	add	r16, r16
     35e:	11 1f       	adc	r17, r17
     360:	00 0f       	add	r16, r16
     362:	11 1f       	adc	r17, r17
     364:	00 0f       	add	r16, r16
     366:	11 1f       	adc	r17, r17
     368:	2b 85       	ldd	r18, Y+11	; 0x0b
     36a:	39 81       	ldd	r19, Y+1	; 0x01
     36c:	44 2d       	mov	r20, r4
     36e:	53 2d       	mov	r21, r3
     370:	62 2d       	mov	r22, r2
     372:	77 2d       	mov	r23, r7
     374:	86 2d       	mov	r24, r6
     376:	95 2d       	mov	r25, r5
     378:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__lshrdi3>
     37c:	8a 84       	ldd	r8, Y+10	; 0x0a
     37e:	82 26       	eor	r8, r18
     380:	91 2c       	mov	r9, r1
     382:	f4 01       	movw	r30, r8
     384:	e0 53       	subi	r30, 0x30	; 48
     386:	fc 46       	sbci	r31, 0x6C	; 108
     388:	80 81       	ld	r24, Z
     38a:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     38c:	fd 01       	movw	r30, r26
     38e:	df 01       	movw	r26, r30
     390:	11 97       	sbiw	r26, 0x01	; 1
     392:	ef 2b       	or	r30, r31
     394:	11 f7       	brne	.-60     	; 0x35a <crc8_cdma2000+0xa4>
     396:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     398:	2b 96       	adiw	r28, 0x0b	; 11
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	9f 90       	pop	r9
     3b4:	8f 90       	pop	r8
     3b6:	7f 90       	pop	r7
     3b8:	6f 90       	pop	r6
     3ba:	5f 90       	pop	r5
     3bc:	4f 90       	pop	r4
     3be:	3f 90       	pop	r3
     3c0:	2f 90       	pop	r2
     3c2:	08 95       	ret

000003c4 <FIR>:
 * - The new measurement is added to a circular buffer.
 * - The filtered result is calculated as the average of all samples in the buffer.
 *
 * @param channel Specifies whether to process voltage or current (Voltage or Current).
 */
void FIR(solarrcells_t channel) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	c8 2f       	mov	r28, r24
	ReadSolarCells(channel); ///< Read raw measurement from the selected ADC channel
     3ca:	0e 94 77 00 	call	0xee	; 0xee <ReadSolarCells>

	// Select target ADC_VALUES structure based on the channel (voltage or current)
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
     3ce:	c2 30       	cpi	r28, 0x02	; 2
     3d0:	19 f4       	brne	.+6      	; 0x3d8 <FIR+0x14>
     3d2:	c0 e0       	ldi	r28, 0x00	; 0
     3d4:	d8 e3       	ldi	r29, 0x38	; 56
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <FIR+0x18>
     3d8:	cb e2       	ldi	r28, 0x2B	; 43
     3da:	d8 e3       	ldi	r29, 0x38	; 56

	// Store the latest measurement into the filter buffer at the current index
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result;
     3dc:	ea a5       	ldd	r30, Y+42	; 0x2a
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	88 81       	ld	r24, Y
     3e2:	99 81       	ldd	r25, Y+1	; 0x01
     3e4:	31 96       	adiw	r30, 0x01	; 1
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	ec 0f       	add	r30, r28
     3ec:	fd 1f       	adc	r31, r29
     3ee:	80 83       	st	Z, r24
     3f0:	91 83       	std	Z+1, r25	; 0x01

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;
     3f2:	8a a5       	ldd	r24, Y+42	; 0x2a
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	64 e1       	ldi	r22, 0x14	; 20
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	0e 94 65 06 	call	0xcca	; 0xcca <__divmodhi4>
     400:	8a a7       	std	Y+42, r24	; 0x2a

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     402:	80 e0       	ldi	r24, 0x00	; 0

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	ba 01       	movw	r22, r20
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     40a:	0e c0       	rjmp	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		sum += voltageORcurrent->Filter[i];
     40c:	e8 2f       	mov	r30, r24
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	31 96       	adiw	r30, 0x01	; 1
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	ec 0f       	add	r30, r28
     418:	fd 1f       	adc	r31, r29
     41a:	20 81       	ld	r18, Z
     41c:	31 81       	ldd	r19, Z+1	; 0x01
     41e:	42 0f       	add	r20, r18
     420:	53 1f       	adc	r21, r19
     422:	61 1d       	adc	r22, r1
     424:	71 1d       	adc	r23, r1
	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     426:	8f 5f       	subi	r24, 0xFF	; 255
     428:	84 31       	cpi	r24, 0x14	; 20
     42a:	80 f3       	brcs	.-32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		sum += voltageORcurrent->Filter[i];
	}

	// Store the filtered result as the average of the buffer
	voltageORcurrent->Result = sum / FIR_STEPS;
     42c:	cb 01       	movw	r24, r22
     42e:	ba 01       	movw	r22, r20
     430:	24 e1       	ldi	r18, 0x14	; 20
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodsi4>
     43c:	28 83       	st	Y, r18
     43e:	39 83       	std	Y+1, r19	; 0x01
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     446:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f7112>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b4 e0       	ldi	r27, 0x04	; 4
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	11 96       	adiw	r26, 0x01	; 1
     452:	8c 93       	st	X, r24
     454:	11 97       	sbiw	r26, 0x01	; 1
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     456:	88 e0       	ldi	r24, 0x08	; 8
     458:	52 96       	adiw	r26, 0x12	; 18
     45a:	8c 93       	st	X, r24
     45c:	52 97       	sbiw	r26, 0x12	; 18
    PORTB.DIRCLR =  PIN3_bm; ///< PB3 as input (USART0 RX as MISO (MT6701 DO))	
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	8c 93       	st	X, r24
     462:	12 97       	sbiw	r26, 0x02	; 2
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     464:	53 96       	adiw	r26, 0x13	; 19
     466:	8c 93       	st	X, r24
     468:	53 97       	sbiw	r26, 0x13	; 19

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     46a:	e0 e0       	ldi	r30, 0x00	; 0
     46c:	f4 e0       	ldi	r31, 0x04	; 4
     46e:	92 ec       	ldi	r25, 0xC2	; 194
     470:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_INVEN_bm; ///< Invert for PA1 (USART1 TX LED TX) to save LED life and consumed energy
     472:	90 e8       	ldi	r25, 0x80	; 128
     474:	91 8b       	std	Z+17, r25	; 0x11
	PORTA.DIRCLR = PIN4_bm | PIN5_bm; ///< Set PA4 as input (Y MAX), Set PB0 as input (Y MIN)
     476:	90 e3       	ldi	r25, 0x30	; 48
     478:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     47a:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA5 (Y MIN)
     47c:	85 8b       	std	Z+21, r24	; 0x15
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     47e:	80 ec       	ldi	r24, 0xC0	; 192
     480:	85 83       	std	Z+5, r24	; 0x05

	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PB0 (SC Current)
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	50 96       	adiw	r26, 0x10	; 16
     486:	8c 93       	st	X, r24
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA2 (SC Voltage)
     488:	82 8b       	std	Z+18, r24	; 0x12
     48a:	08 95       	ret

0000048c <main>:
 * @return int (not used, since the function never exits).
 */

int main(void)
{
	CLOCK_XOSCHF_clock_init(); ///< Initialize exteral system clock
     48c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <CLOCK_XOSCHF_clock_init>
    //CLOCK_INHF_clock_init(); 
    GPIO_init(); ///< Initialize GPIO pins
     490:	0e 94 23 02 	call	0x446	; 0x446 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     494:	0e 94 8a 03 	call	0x714	; 0x714 <USART0_init>
	USART1_init();
     498:	0e 94 b3 03 	call	0x766	; 0x766 <USART1_init>
	ADC0_init();
     49c:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
		//Test for extenal- internal clock
		//PORTA.OUTTGL = PIN1_bm;
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     4a0:	80 e8       	ldi	r24, 0x80	; 128
     4a2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MT6701_SSI_Angle>
		//ReadSolarCells(Voltage); //uncomment if filtration no needded
		//ReadSolarCells(Current); //uncomment if filtration no needded
		FIR(Voltage); //comment if using ReadSolarCells(Voltage);
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <FIR>
		FIR(Current); //comment if using ReadSolarCells(Current);
     4b2:	8b e0       	ldi	r24, 0x0B	; 11
     4b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <FIR>
		uint8_t y = YEndSwitches();
     4b8:	0e 94 01 04 	call	0x802	; 0x802 <YEndSwitches>
     4bc:	38 2e       	mov	r3, r24
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);
     4be:	cc e5       	ldi	r28, 0x5C	; 92
     4c0:	d8 e3       	ldi	r29, 0x38	; 56
     4c2:	88 80       	ld	r8, Y
     4c4:	99 80       	ldd	r9, Y+1	; 0x01
     4c6:	28 2d       	mov	r18, r8
     4c8:	39 2d       	mov	r19, r9
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0c e2       	ldi	r16, 0x2C	; 44
     4d8:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ashldi3>
     4dc:	92 2e       	mov	r9, r18
     4de:	a3 2e       	mov	r10, r19
     4e0:	b4 2e       	mov	r11, r20
     4e2:	15 2f       	mov	r17, r21
     4e4:	c6 2e       	mov	r12, r22
     4e6:	d7 2e       	mov	r13, r23
     4e8:	f8 2f       	mov	r31, r24
     4ea:	e9 2f       	mov	r30, r25
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f6 e5       	ldi	r31, 0x56	; 86
     4f0:	ef 2e       	mov	r14, r31
     4f2:	f8 e3       	ldi	r31, 0x38	; 56
     4f4:	ff 2e       	mov	r15, r31
     4f6:	f0 2d       	mov	r31, r0
     4f8:	d7 01       	movw	r26, r14
     4fa:	4d 91       	ld	r20, X+
     4fc:	5c 91       	ld	r21, X
     4fe:	24 2f       	mov	r18, r20
     500:	35 2f       	mov	r19, r21
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0c e1       	ldi	r16, 0x1C	; 28
     510:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ashldi3>
     514:	92 2a       	or	r9, r18
     516:	a3 2a       	or	r10, r19
     518:	b4 2a       	or	r11, r20
     51a:	15 2b       	or	r17, r21
     51c:	7c 2c       	mov	r7, r12
     51e:	76 2a       	or	r7, r22
     520:	8d 2c       	mov	r8, r13
     522:	87 2a       	or	r8, r23
     524:	f8 2b       	or	r31, r24
     526:	e9 2b       	or	r30, r25
     528:	0f 2e       	mov	r0, r31
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	cf 2e       	mov	r12, r31
     52e:	f8 e3       	ldi	r31, 0x38	; 56
     530:	df 2e       	mov	r13, r31
     532:	f0 2d       	mov	r31, r0
     534:	d6 01       	movw	r26, r12
     536:	8d 91       	ld	r24, X+
     538:	9c 91       	ld	r25, X
     53a:	ac 01       	movw	r20, r24
     53c:	24 2f       	mov	r18, r20
     53e:	35 2f       	mov	r19, r21
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	00 e1       	ldi	r16, 0x10	; 16
     54e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__ashldi3>
     552:	29 29       	or	r18, r9
     554:	3a 29       	or	r19, r10
     556:	4b 29       	or	r20, r11
     558:	51 2b       	or	r21, r17
     55a:	67 29       	or	r22, r7
     55c:	78 29       	or	r23, r8
     55e:	0b e2       	ldi	r16, 0x2B	; 43
     560:	18 e3       	ldi	r17, 0x38	; 56
     562:	d8 01       	movw	r26, r16
     564:	4d 90       	ld	r4, X+
     566:	5c 90       	ld	r5, X
     568:	61 2c       	mov	r6, r1
     56a:	71 2c       	mov	r7, r1
     56c:	44 0c       	add	r4, r4
     56e:	55 1c       	adc	r5, r5
     570:	66 1c       	adc	r6, r6
     572:	77 1c       	adc	r7, r7
     574:	44 0c       	add	r4, r4
     576:	55 1c       	adc	r5, r5
     578:	66 1c       	adc	r6, r6
     57a:	77 1c       	adc	r7, r7
     57c:	44 0c       	add	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	66 1c       	adc	r6, r6
     582:	77 1c       	adc	r7, r7
     584:	44 0c       	add	r4, r4
     586:	55 1c       	adc	r5, r5
     588:	66 1c       	adc	r6, r6
     58a:	77 1c       	adc	r7, r7
     58c:	24 29       	or	r18, r4
     58e:	35 29       	or	r19, r5
     590:	46 29       	or	r20, r6
     592:	57 29       	or	r21, r7
     594:	23 29       	or	r18, r3
     596:	8f 2b       	or	r24, r31
     598:	9e 2b       	or	r25, r30
     59a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     59e:	f8 01       	movw	r30, r16
     5a0:	70 81       	ld	r23, Z
     5a2:	e1 81       	ldd	r30, Z+1	; 0x01

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     5a4:	d6 01       	movw	r26, r12
     5a6:	5c 91       	ld	r21, X
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	6c 91       	ld	r22, X
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     5ac:	d7 01       	movw	r26, r14
     5ae:	3c 91       	ld	r19, X
     5b0:	11 96       	adiw	r26, 0x01	; 1
     5b2:	4c 91       	ld	r20, X
		uint8_t y = YEndSwitches();
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     5b4:	98 81       	ld	r25, Y
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
		FIR(Current); //comment if using ReadSolarCells(Current);
		uint8_t y = YEndSwitches();
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     5b8:	1f 92       	push	r1
     5ba:	8f 93       	push	r24
     5bc:	1f 92       	push	r1
     5be:	3f 92       	push	r3
     5c0:	ef 93       	push	r30
     5c2:	7f 93       	push	r23
     5c4:	6f 93       	push	r22
     5c6:	5f 93       	push	r21
     5c8:	4f 93       	push	r20
     5ca:	3f 93       	push	r19
     5cc:	2f 93       	push	r18
     5ce:	9f 93       	push	r25
     5d0:	80 e1       	ldi	r24, 0x10	; 16
     5d2:	95 e9       	ldi	r25, 0x95	; 149
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5dc:	bf e7       	ldi	r27, 0x7F	; 127
     5de:	ea e1       	ldi	r30, 0x1A	; 26
     5e0:	f6 e0       	ldi	r31, 0x06	; 6
     5e2:	b1 50       	subi	r27, 0x01	; 1
     5e4:	e0 40       	sbci	r30, 0x00	; 0
     5e6:	f0 40       	sbci	r31, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x156>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x160>
     5ec:	00 00       	nop
     5ee:	8d b7       	in	r24, 0x3d	; 61
     5f0:	9e b7       	in	r25, 0x3e	; 62
     5f2:	0e 96       	adiw	r24, 0x0e	; 14
     5f4:	8d bf       	out	0x3d, r24	; 61
     5f6:	9e bf       	out	0x3e, r25	; 62
     5f8:	53 cf       	rjmp	.-346    	; 0x4a0 <main+0x14>

000005fa <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <MT6701_SSI_Angle+0xa>
     604:	00 d0       	rcall	.+0      	; 0x606 <MT6701_SSI_Angle+0xc>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     60c:	19 82       	std	Y+1, r1	; 0x01
     60e:	1a 82       	std	Y+2, r1	; 0x02
     610:	1b 82       	std	Y+3, r1	; 0x03
     612:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     614:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f6f36>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	24 c0       	rjmp	.+72     	; 0x664 <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     61c:	8f e6       	ldi	r24, 0x6F	; 111
     61e:	0e 94 95 03 	call	0x72a	; 0x72a <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     622:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f7334>
     626:	86 ff       	sbrs	r24, 6
     628:	fc cf       	rjmp	.-8      	; 0x622 <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     62a:	e0 e0       	ldi	r30, 0x00	; 0
     62c:	f8 e0       	ldi	r31, 0x08	; 8
     62e:	84 81       	ldd	r24, Z+4	; 0x04
     630:	80 64       	ori	r24, 0x40	; 64
     632:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	ab 81       	ldd	r26, Y+3	; 0x03
     63a:	bc 81       	ldd	r27, Y+4	; 0x04
     63c:	ba 2f       	mov	r27, r26
     63e:	a9 2f       	mov	r26, r25
     640:	98 2f       	mov	r25, r24
     642:	88 27       	eor	r24, r24
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	ab 83       	std	Y+3, r26	; 0x03
     64a:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     64c:	0e 94 9c 03 	call	0x738	; 0x738 <USART0_readChar>
     650:	49 81       	ldd	r20, Y+1	; 0x01
     652:	5a 81       	ldd	r21, Y+2	; 0x02
     654:	6b 81       	ldd	r22, Y+3	; 0x03
     656:	7c 81       	ldd	r23, Y+4	; 0x04
     658:	48 2b       	or	r20, r24
     65a:	49 83       	std	Y+1, r20	; 0x01
     65c:	5a 83       	std	Y+2, r21	; 0x02
     65e:	6b 83       	std	Y+3, r22	; 0x03
     660:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     662:	1f 5f       	subi	r17, 0xFF	; 255
     664:	13 30       	cpi	r17, 0x03	; 3
     666:	d0 f2       	brcs	.-76     	; 0x61c <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     668:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f6f35>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     66c:	00 38       	cpi	r16, 0x80	; 128
     66e:	19 f4       	brne	.+6      	; 0x676 <MT6701_SSI_Angle+0x7c>
     670:	0c e5       	ldi	r16, 0x5C	; 92
     672:	18 e3       	ldi	r17, 0x38	; 56
     674:	02 c0       	rjmp	.+4      	; 0x67a <MT6701_SSI_Angle+0x80>
     676:	06 e5       	ldi	r16, 0x56	; 86
     678:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 3c 01 	call	0x278	; 0x278 <MT6701CRC>
     682:	f8 01       	movw	r30, r16
     684:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	83 70       	andi	r24, 0x03	; 3
     68a:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	ab 81       	ldd	r26, Y+3	; 0x03
     692:	bc 81       	ldd	r27, Y+4	; 0x04
     694:	b6 95       	lsr	r27
     696:	a7 95       	ror	r26
     698:	97 95       	ror	r25
     69a:	87 95       	ror	r24
     69c:	b6 95       	lsr	r27
     69e:	a7 95       	ror	r26
     6a0:	97 95       	ror	r25
     6a2:	87 95       	ror	r24
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	ab 81       	ldd	r26, Y+3	; 0x03
     6ae:	bc 81       	ldd	r27, Y+4	; 0x04
     6b0:	ac 01       	movw	r20, r24
     6b2:	bd 01       	movw	r22, r26
     6b4:	68 94       	set
     6b6:	12 f8       	bld	r1, 2
     6b8:	76 95       	lsr	r23
     6ba:	67 95       	ror	r22
     6bc:	57 95       	ror	r21
     6be:	47 95       	ror	r20
     6c0:	16 94       	lsr	r1
     6c2:	d1 f7       	brne	.-12     	; 0x6b8 <MT6701_SSI_Angle+0xbe>
     6c4:	24 2f       	mov	r18, r20
     6c6:	21 70       	andi	r18, 0x01	; 1
     6c8:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	68 94       	set
     6d0:	13 f8       	bld	r1, 3
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	77 95       	ror	r23
     6d8:	67 95       	ror	r22
     6da:	16 94       	lsr	r1
     6dc:	d1 f7       	brne	.-12     	; 0x6d2 <MT6701_SSI_Angle+0xd8>
     6de:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatunsisf>
     6e2:	23 e5       	ldi	r18, 0x53	; 83
     6e4:	34 e0       	ldi	r19, 0x04	; 4
     6e6:	49 ee       	ldi	r20, 0xE9	; 233
     6e8:	5e e3       	ldi	r21, 0x3E	; 62
     6ea:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__divsf3>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	5f e3       	ldi	r21, 0x3F	; 63
     6f6:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3>
     6fa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
     6fe:	f8 01       	movw	r30, r16
     700:	60 83       	st	Z, r22
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	24 96       	adiw	r28, 0x04	; 4
     706:	cd bf       	out	0x3d, r28	; 61
     708:	de bf       	out	0x3e, r29	; 62
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     714:	e0 e0       	ldi	r30, 0x00	; 0
     716:	f8 e0       	ldi	r31, 0x08	; 8
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	80 87       	std	Z+8, r24	; 0x08
     71e:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     720:	80 ec       	ldi	r24, 0xC0	; 192
     722:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     724:	82 ec       	ldi	r24, 0xC2	; 194
     726:	87 83       	std	Z+7, r24	; 0x07
     728:	08 95       	ret

0000072a <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     72a:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f7334>
     72e:	95 ff       	sbrs	r25, 5
     730:	fc cf       	rjmp	.-8      	; 0x72a <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     732:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f7332>
     736:	08 95       	ret

00000738 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     738:	80 e8       	ldi	r24, 0x80	; 128
     73a:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f7334>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     73e:	80 e4       	ldi	r24, 0x40	; 64
     740:	9c e9       	ldi	r25, 0x9C	; 156
     742:	a0 e0       	ldi	r26, 0x00	; 0
     744:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     746:	08 c0       	rjmp	.+16     	; 0x758 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	a1 09       	sbc	r26, r1
     74c:	b1 09       	sbc	r27, r1
     74e:	21 f4       	brne	.+8      	; 0x758 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <Status+0x2>
            break;
     756:	04 c0       	rjmp	.+8      	; 0x760 <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     758:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f7334>
     75c:	22 23       	and	r18, r18
     75e:	a4 f7       	brge	.-24     	; 0x748 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     760:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f7330>
}
     764:	08 95       	ret

00000766 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     766:	e0 e2       	ldi	r30, 0x20	; 32
     768:	f8 e0       	ldi	r31, 0x08	; 8
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	80 87       	std	Z+8, r24	; 0x08
     770:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     772:	82 e4       	ldi	r24, 0x42	; 66
     774:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	87 83       	std	Z+7, r24	; 0x07
     77a:	08 95       	ret

0000077c <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     77c:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f7354>
     780:	95 ff       	sbrs	r25, 5
     782:	fc cf       	rjmp	.-8      	; 0x77c <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     784:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f7352>
     788:	08 95       	ret

0000078a <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     794:	c0 e0       	ldi	r28, 0x00	; 0
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     79a:	f8 01       	movw	r30, r16
     79c:	ec 0f       	add	r30, r28
     79e:	fd 1f       	adc	r31, r29
     7a0:	80 81       	ld	r24, Z
     7a2:	0e 94 be 03 	call	0x77c	; 0x77c <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     7a6:	21 96       	adiw	r28, 0x01	; 1
     7a8:	f8 01       	movw	r30, r16
     7aa:	01 90       	ld	r0, Z+
     7ac:	00 20       	and	r0, r0
     7ae:	e9 f7       	brne	.-6      	; 0x7aa <USART1_sendString+0x20>
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	e0 1b       	sub	r30, r16
     7b4:	f1 0b       	sbc	r31, r17
     7b6:	ce 17       	cp	r28, r30
     7b8:	df 07       	cpc	r29, r31
     7ba:	78 f3       	brcs	.-34     	; 0x79a <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	6e 97       	sbiw	r28, 0x1e	; 30
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	9e 01       	movw	r18, r28
     7d6:	2d 5d       	subi	r18, 0xDD	; 221
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	f9 01       	movw	r30, r18
     7dc:	41 91       	ld	r20, Z+
     7de:	51 91       	ld	r21, Z+
     7e0:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     7e2:	6e e1       	ldi	r22, 0x1E	; 30
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0e 94 f2 06 	call	0xde4	; 0xde4 <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 c5 03 	call	0x78a	; 0x78a <USART1_sendString>
     7f6:	6e 96       	adiw	r28, 0x1e	; 30
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values) and it will be 0,1,2,3
     802:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f6f58>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	89 27       	eor	r24, r25
     80a:	81 70       	andi	r24, 0x01	; 1
     80c:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f6f38>
     810:	92 fd       	sbrc	r25, 2
     812:	02 c0       	rjmp	.+4      	; 0x818 <YEndSwitches+0x16>
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	01 c0       	rjmp	.+2      	; 0x81a <YEndSwitches+0x18>
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	89 2b       	or	r24, r25
     81c:	08 95       	ret

0000081e <__subsf3>:
     81e:	50 58       	subi	r21, 0x80	; 128

00000820 <__addsf3>:
     820:	bb 27       	eor	r27, r27
     822:	aa 27       	eor	r26, r26
     824:	0e 94 27 04 	call	0x84e	; 0x84e <__addsf3x>
     828:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_round>
     82c:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscA>
     830:	38 f0       	brcs	.+14     	; 0x840 <__addsf3+0x20>
     832:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_pscB>
     836:	20 f0       	brcs	.+8      	; 0x840 <__addsf3+0x20>
     838:	39 f4       	brne	.+14     	; 0x848 <__addsf3+0x28>
     83a:	9f 3f       	cpi	r25, 0xFF	; 255
     83c:	19 f4       	brne	.+6      	; 0x844 <__addsf3+0x24>
     83e:	26 f4       	brtc	.+8      	; 0x848 <__addsf3+0x28>
     840:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_nan>
     844:	0e f4       	brtc	.+2      	; 0x848 <__addsf3+0x28>
     846:	e0 95       	com	r30
     848:	e7 fb       	bst	r30, 7
     84a:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>

0000084e <__addsf3x>:
     84e:	e9 2f       	mov	r30, r25
     850:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_split3>
     854:	58 f3       	brcs	.-42     	; 0x82c <__addsf3+0xc>
     856:	ba 17       	cp	r27, r26
     858:	62 07       	cpc	r22, r18
     85a:	73 07       	cpc	r23, r19
     85c:	84 07       	cpc	r24, r20
     85e:	95 07       	cpc	r25, r21
     860:	20 f0       	brcs	.+8      	; 0x86a <__addsf3x+0x1c>
     862:	79 f4       	brne	.+30     	; 0x882 <__addsf3x+0x34>
     864:	a6 f5       	brtc	.+104    	; 0x8ce <__addsf3x+0x80>
     866:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_zero>
     86a:	0e f4       	brtc	.+2      	; 0x86e <__addsf3x+0x20>
     86c:	e0 95       	com	r30
     86e:	0b 2e       	mov	r0, r27
     870:	ba 2f       	mov	r27, r26
     872:	a0 2d       	mov	r26, r0
     874:	0b 01       	movw	r0, r22
     876:	b9 01       	movw	r22, r18
     878:	90 01       	movw	r18, r0
     87a:	0c 01       	movw	r0, r24
     87c:	ca 01       	movw	r24, r20
     87e:	a0 01       	movw	r20, r0
     880:	11 24       	eor	r1, r1
     882:	ff 27       	eor	r31, r31
     884:	59 1b       	sub	r21, r25
     886:	99 f0       	breq	.+38     	; 0x8ae <__addsf3x+0x60>
     888:	59 3f       	cpi	r21, 0xF9	; 249
     88a:	50 f4       	brcc	.+20     	; 0x8a0 <__addsf3x+0x52>
     88c:	50 3e       	cpi	r21, 0xE0	; 224
     88e:	68 f1       	brcs	.+90     	; 0x8ea <__addsf3x+0x9c>
     890:	1a 16       	cp	r1, r26
     892:	f0 40       	sbci	r31, 0x00	; 0
     894:	a2 2f       	mov	r26, r18
     896:	23 2f       	mov	r18, r19
     898:	34 2f       	mov	r19, r20
     89a:	44 27       	eor	r20, r20
     89c:	58 5f       	subi	r21, 0xF8	; 248
     89e:	f3 cf       	rjmp	.-26     	; 0x886 <__addsf3x+0x38>
     8a0:	46 95       	lsr	r20
     8a2:	37 95       	ror	r19
     8a4:	27 95       	ror	r18
     8a6:	a7 95       	ror	r26
     8a8:	f0 40       	sbci	r31, 0x00	; 0
     8aa:	53 95       	inc	r21
     8ac:	c9 f7       	brne	.-14     	; 0x8a0 <__addsf3x+0x52>
     8ae:	7e f4       	brtc	.+30     	; 0x8ce <__addsf3x+0x80>
     8b0:	1f 16       	cp	r1, r31
     8b2:	ba 0b       	sbc	r27, r26
     8b4:	62 0b       	sbc	r22, r18
     8b6:	73 0b       	sbc	r23, r19
     8b8:	84 0b       	sbc	r24, r20
     8ba:	ba f0       	brmi	.+46     	; 0x8ea <__addsf3x+0x9c>
     8bc:	91 50       	subi	r25, 0x01	; 1
     8be:	a1 f0       	breq	.+40     	; 0x8e8 <__addsf3x+0x9a>
     8c0:	ff 0f       	add	r31, r31
     8c2:	bb 1f       	adc	r27, r27
     8c4:	66 1f       	adc	r22, r22
     8c6:	77 1f       	adc	r23, r23
     8c8:	88 1f       	adc	r24, r24
     8ca:	c2 f7       	brpl	.-16     	; 0x8bc <__addsf3x+0x6e>
     8cc:	0e c0       	rjmp	.+28     	; 0x8ea <__addsf3x+0x9c>
     8ce:	ba 0f       	add	r27, r26
     8d0:	62 1f       	adc	r22, r18
     8d2:	73 1f       	adc	r23, r19
     8d4:	84 1f       	adc	r24, r20
     8d6:	48 f4       	brcc	.+18     	; 0x8ea <__addsf3x+0x9c>
     8d8:	87 95       	ror	r24
     8da:	77 95       	ror	r23
     8dc:	67 95       	ror	r22
     8de:	b7 95       	ror	r27
     8e0:	f7 95       	ror	r31
     8e2:	9e 3f       	cpi	r25, 0xFE	; 254
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__addsf3x+0x9a>
     8e6:	b0 cf       	rjmp	.-160    	; 0x848 <__addsf3+0x28>
     8e8:	93 95       	inc	r25
     8ea:	88 0f       	add	r24, r24
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <__addsf3x+0xa2>
     8ee:	99 27       	eor	r25, r25
     8f0:	ee 0f       	add	r30, r30
     8f2:	97 95       	ror	r25
     8f4:	87 95       	ror	r24
     8f6:	08 95       	ret

000008f8 <__divsf3>:
     8f8:	0e 94 90 04 	call	0x920	; 0x920 <__divsf3x>
     8fc:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_round>
     900:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_pscB>
     904:	58 f0       	brcs	.+22     	; 0x91c <__divsf3+0x24>
     906:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscA>
     90a:	40 f0       	brcs	.+16     	; 0x91c <__divsf3+0x24>
     90c:	29 f4       	brne	.+10     	; 0x918 <__divsf3+0x20>
     90e:	5f 3f       	cpi	r21, 0xFF	; 255
     910:	29 f0       	breq	.+10     	; 0x91c <__divsf3+0x24>
     912:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
     916:	51 11       	cpse	r21, r1
     918:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_szero>
     91c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_nan>

00000920 <__divsf3x>:
     920:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_split3>
     924:	68 f3       	brcs	.-38     	; 0x900 <__divsf3+0x8>

00000926 <__divsf3_pse>:
     926:	99 23       	and	r25, r25
     928:	b1 f3       	breq	.-20     	; 0x916 <__divsf3+0x1e>
     92a:	55 23       	and	r21, r21
     92c:	91 f3       	breq	.-28     	; 0x912 <__divsf3+0x1a>
     92e:	95 1b       	sub	r25, r21
     930:	55 0b       	sbc	r21, r21
     932:	bb 27       	eor	r27, r27
     934:	aa 27       	eor	r26, r26
     936:	62 17       	cp	r22, r18
     938:	73 07       	cpc	r23, r19
     93a:	84 07       	cpc	r24, r20
     93c:	38 f0       	brcs	.+14     	; 0x94c <__divsf3_pse+0x26>
     93e:	9f 5f       	subi	r25, 0xFF	; 255
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	44 1f       	adc	r20, r20
     948:	aa 1f       	adc	r26, r26
     94a:	a9 f3       	breq	.-22     	; 0x936 <__divsf3_pse+0x10>
     94c:	35 d0       	rcall	.+106    	; 0x9b8 <__divsf3_pse+0x92>
     94e:	0e 2e       	mov	r0, r30
     950:	3a f0       	brmi	.+14     	; 0x960 <__divsf3_pse+0x3a>
     952:	e0 e8       	ldi	r30, 0x80	; 128
     954:	32 d0       	rcall	.+100    	; 0x9ba <__divsf3_pse+0x94>
     956:	91 50       	subi	r25, 0x01	; 1
     958:	50 40       	sbci	r21, 0x00	; 0
     95a:	e6 95       	lsr	r30
     95c:	00 1c       	adc	r0, r0
     95e:	ca f7       	brpl	.-14     	; 0x952 <__divsf3_pse+0x2c>
     960:	2b d0       	rcall	.+86     	; 0x9b8 <__divsf3_pse+0x92>
     962:	fe 2f       	mov	r31, r30
     964:	29 d0       	rcall	.+82     	; 0x9b8 <__divsf3_pse+0x92>
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	88 1f       	adc	r24, r24
     96c:	bb 1f       	adc	r27, r27
     96e:	26 17       	cp	r18, r22
     970:	37 07       	cpc	r19, r23
     972:	48 07       	cpc	r20, r24
     974:	ab 07       	cpc	r26, r27
     976:	b0 e8       	ldi	r27, 0x80	; 128
     978:	09 f0       	breq	.+2      	; 0x97c <__divsf3_pse+0x56>
     97a:	bb 0b       	sbc	r27, r27
     97c:	80 2d       	mov	r24, r0
     97e:	bf 01       	movw	r22, r30
     980:	ff 27       	eor	r31, r31
     982:	93 58       	subi	r25, 0x83	; 131
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	3a f0       	brmi	.+14     	; 0x996 <__divsf3_pse+0x70>
     988:	9e 3f       	cpi	r25, 0xFE	; 254
     98a:	51 05       	cpc	r21, r1
     98c:	78 f0       	brcs	.+30     	; 0x9ac <__divsf3_pse+0x86>
     98e:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
     992:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_szero>
     996:	5f 3f       	cpi	r21, 0xFF	; 255
     998:	e4 f3       	brlt	.-8      	; 0x992 <__divsf3_pse+0x6c>
     99a:	98 3e       	cpi	r25, 0xE8	; 232
     99c:	d4 f3       	brlt	.-12     	; 0x992 <__divsf3_pse+0x6c>
     99e:	86 95       	lsr	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b7 95       	ror	r27
     9a6:	f7 95       	ror	r31
     9a8:	9f 5f       	subi	r25, 0xFF	; 255
     9aa:	c9 f7       	brne	.-14     	; 0x99e <__divsf3_pse+0x78>
     9ac:	88 0f       	add	r24, r24
     9ae:	91 1d       	adc	r25, r1
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
     9b4:	97 f9       	bld	r25, 7
     9b6:	08 95       	ret
     9b8:	e1 e0       	ldi	r30, 0x01	; 1
     9ba:	66 0f       	add	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	88 1f       	adc	r24, r24
     9c0:	bb 1f       	adc	r27, r27
     9c2:	62 17       	cp	r22, r18
     9c4:	73 07       	cpc	r23, r19
     9c6:	84 07       	cpc	r24, r20
     9c8:	ba 07       	cpc	r27, r26
     9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__divsf3_pse+0xae>
     9cc:	62 1b       	sub	r22, r18
     9ce:	73 0b       	sbc	r23, r19
     9d0:	84 0b       	sbc	r24, r20
     9d2:	ba 0b       	sbc	r27, r26
     9d4:	ee 1f       	adc	r30, r30
     9d6:	88 f7       	brcc	.-30     	; 0x9ba <__divsf3_pse+0x94>
     9d8:	e0 95       	com	r30
     9da:	08 95       	ret

000009dc <__fixunssfsi>:
     9dc:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_splitA>
     9e0:	88 f0       	brcs	.+34     	; 0xa04 <__fixunssfsi+0x28>
     9e2:	9f 57       	subi	r25, 0x7F	; 127
     9e4:	98 f0       	brcs	.+38     	; 0xa0c <__fixunssfsi+0x30>
     9e6:	b9 2f       	mov	r27, r25
     9e8:	99 27       	eor	r25, r25
     9ea:	b7 51       	subi	r27, 0x17	; 23
     9ec:	b0 f0       	brcs	.+44     	; 0xa1a <__fixunssfsi+0x3e>
     9ee:	e1 f0       	breq	.+56     	; 0xa28 <__fixunssfsi+0x4c>
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	88 1f       	adc	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	1a f0       	brmi	.+6      	; 0xa00 <__fixunssfsi+0x24>
     9fa:	ba 95       	dec	r27
     9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__fixunssfsi+0x14>
     9fe:	14 c0       	rjmp	.+40     	; 0xa28 <__fixunssfsi+0x4c>
     a00:	b1 30       	cpi	r27, 0x01	; 1
     a02:	91 f0       	breq	.+36     	; 0xa28 <__fixunssfsi+0x4c>
     a04:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_zero>
     a08:	b1 e0       	ldi	r27, 0x01	; 1
     a0a:	08 95       	ret
     a0c:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_zero>
     a10:	67 2f       	mov	r22, r23
     a12:	78 2f       	mov	r23, r24
     a14:	88 27       	eor	r24, r24
     a16:	b8 5f       	subi	r27, 0xF8	; 248
     a18:	39 f0       	breq	.+14     	; 0xa28 <__fixunssfsi+0x4c>
     a1a:	b9 3f       	cpi	r27, 0xF9	; 249
     a1c:	cc f3       	brlt	.-14     	; 0xa10 <__fixunssfsi+0x34>
     a1e:	86 95       	lsr	r24
     a20:	77 95       	ror	r23
     a22:	67 95       	ror	r22
     a24:	b3 95       	inc	r27
     a26:	d9 f7       	brne	.-10     	; 0xa1e <__fixunssfsi+0x42>
     a28:	3e f4       	brtc	.+14     	; 0xa38 <__fixunssfsi+0x5c>
     a2a:	90 95       	com	r25
     a2c:	80 95       	com	r24
     a2e:	70 95       	com	r23
     a30:	61 95       	neg	r22
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	8f 4f       	sbci	r24, 0xFF	; 255
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	08 95       	ret

00000a3a <__floatunsisf>:
     a3a:	e8 94       	clt
     a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__floatsisf+0x12>

00000a3e <__floatsisf>:
     a3e:	97 fb       	bst	r25, 7
     a40:	3e f4       	brtc	.+14     	; 0xa50 <__floatsisf+0x12>
     a42:	90 95       	com	r25
     a44:	80 95       	com	r24
     a46:	70 95       	com	r23
     a48:	61 95       	neg	r22
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	8f 4f       	sbci	r24, 0xFF	; 255
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	99 23       	and	r25, r25
     a52:	a9 f0       	breq	.+42     	; 0xa7e <__floatsisf+0x40>
     a54:	f9 2f       	mov	r31, r25
     a56:	96 e9       	ldi	r25, 0x96	; 150
     a58:	bb 27       	eor	r27, r27
     a5a:	93 95       	inc	r25
     a5c:	f6 95       	lsr	r31
     a5e:	87 95       	ror	r24
     a60:	77 95       	ror	r23
     a62:	67 95       	ror	r22
     a64:	b7 95       	ror	r27
     a66:	f1 11       	cpse	r31, r1
     a68:	f8 cf       	rjmp	.-16     	; 0xa5a <__floatsisf+0x1c>
     a6a:	fa f4       	brpl	.+62     	; 0xaaa <__floatsisf+0x6c>
     a6c:	bb 0f       	add	r27, r27
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__floatsisf+0x36>
     a70:	60 ff       	sbrs	r22, 0
     a72:	1b c0       	rjmp	.+54     	; 0xaaa <__floatsisf+0x6c>
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f 4f       	sbci	r24, 0xFF	; 255
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	16 c0       	rjmp	.+44     	; 0xaaa <__floatsisf+0x6c>
     a7e:	88 23       	and	r24, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <__floatsisf+0x48>
     a82:	96 e9       	ldi	r25, 0x96	; 150
     a84:	11 c0       	rjmp	.+34     	; 0xaa8 <__floatsisf+0x6a>
     a86:	77 23       	and	r23, r23
     a88:	21 f0       	breq	.+8      	; 0xa92 <__floatsisf+0x54>
     a8a:	9e e8       	ldi	r25, 0x8E	; 142
     a8c:	87 2f       	mov	r24, r23
     a8e:	76 2f       	mov	r23, r22
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <__floatsisf+0x5e>
     a92:	66 23       	and	r22, r22
     a94:	71 f0       	breq	.+28     	; 0xab2 <__floatsisf+0x74>
     a96:	96 e8       	ldi	r25, 0x86	; 134
     a98:	86 2f       	mov	r24, r22
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	2a f0       	brmi	.+10     	; 0xaaa <__floatsisf+0x6c>
     aa0:	9a 95       	dec	r25
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	da f7       	brpl	.-10     	; 0xaa0 <__floatsisf+0x62>
     aaa:	88 0f       	add	r24, r24
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	97 f9       	bld	r25, 7
     ab2:	08 95       	ret

00000ab4 <__fp_inf>:
     ab4:	97 f9       	bld	r25, 7
     ab6:	9f 67       	ori	r25, 0x7F	; 127
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	08 95       	ret

00000ac0 <__fp_nan>:
     ac0:	9f ef       	ldi	r25, 0xFF	; 255
     ac2:	80 ec       	ldi	r24, 0xC0	; 192
     ac4:	08 95       	ret

00000ac6 <__fp_pscA>:
     ac6:	00 24       	eor	r0, r0
     ac8:	0a 94       	dec	r0
     aca:	16 16       	cp	r1, r22
     acc:	17 06       	cpc	r1, r23
     ace:	18 06       	cpc	r1, r24
     ad0:	09 06       	cpc	r0, r25
     ad2:	08 95       	ret

00000ad4 <__fp_pscB>:
     ad4:	00 24       	eor	r0, r0
     ad6:	0a 94       	dec	r0
     ad8:	12 16       	cp	r1, r18
     ada:	13 06       	cpc	r1, r19
     adc:	14 06       	cpc	r1, r20
     ade:	05 06       	cpc	r0, r21
     ae0:	08 95       	ret

00000ae2 <__fp_round>:
     ae2:	09 2e       	mov	r0, r25
     ae4:	03 94       	inc	r0
     ae6:	00 0c       	add	r0, r0
     ae8:	11 f4       	brne	.+4      	; 0xaee <__fp_round+0xc>
     aea:	88 23       	and	r24, r24
     aec:	52 f0       	brmi	.+20     	; 0xb02 <__fp_round+0x20>
     aee:	bb 0f       	add	r27, r27
     af0:	40 f4       	brcc	.+16     	; 0xb02 <__fp_round+0x20>
     af2:	bf 2b       	or	r27, r31
     af4:	11 f4       	brne	.+4      	; 0xafa <__fp_round+0x18>
     af6:	60 ff       	sbrs	r22, 0
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <__fp_round+0x20>
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	8f 4f       	sbci	r24, 0xFF	; 255
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	08 95       	ret

00000b04 <__fp_split3>:
     b04:	57 fd       	sbrc	r21, 7
     b06:	90 58       	subi	r25, 0x80	; 128
     b08:	44 0f       	add	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	59 f0       	breq	.+22     	; 0xb24 <__fp_splitA+0x10>
     b0e:	5f 3f       	cpi	r21, 0xFF	; 255
     b10:	71 f0       	breq	.+28     	; 0xb2e <__fp_splitA+0x1a>
     b12:	47 95       	ror	r20

00000b14 <__fp_splitA>:
     b14:	88 0f       	add	r24, r24
     b16:	97 fb       	bst	r25, 7
     b18:	99 1f       	adc	r25, r25
     b1a:	61 f0       	breq	.+24     	; 0xb34 <__fp_splitA+0x20>
     b1c:	9f 3f       	cpi	r25, 0xFF	; 255
     b1e:	79 f0       	breq	.+30     	; 0xb3e <__fp_splitA+0x2a>
     b20:	87 95       	ror	r24
     b22:	08 95       	ret
     b24:	12 16       	cp	r1, r18
     b26:	13 06       	cpc	r1, r19
     b28:	14 06       	cpc	r1, r20
     b2a:	55 1f       	adc	r21, r21
     b2c:	f2 cf       	rjmp	.-28     	; 0xb12 <__fp_split3+0xe>
     b2e:	46 95       	lsr	r20
     b30:	f1 df       	rcall	.-30     	; 0xb14 <__fp_splitA>
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <__fp_splitA+0x30>
     b34:	16 16       	cp	r1, r22
     b36:	17 06       	cpc	r1, r23
     b38:	18 06       	cpc	r1, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	f1 cf       	rjmp	.-30     	; 0xb20 <__fp_splitA+0xc>
     b3e:	86 95       	lsr	r24
     b40:	71 05       	cpc	r23, r1
     b42:	61 05       	cpc	r22, r1
     b44:	08 94       	sec
     b46:	08 95       	ret

00000b48 <__fp_zero>:
     b48:	e8 94       	clt

00000b4a <__fp_szero>:
     b4a:	bb 27       	eor	r27, r27
     b4c:	66 27       	eor	r22, r22
     b4e:	77 27       	eor	r23, r23
     b50:	cb 01       	movw	r24, r22
     b52:	97 f9       	bld	r25, 7
     b54:	08 95       	ret

00000b56 <__mulsf3>:
     b56:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3x>
     b5a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_round>
     b5e:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_pscA>
     b62:	38 f0       	brcs	.+14     	; 0xb72 <__mulsf3+0x1c>
     b64:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_pscB>
     b68:	20 f0       	brcs	.+8      	; 0xb72 <__mulsf3+0x1c>
     b6a:	95 23       	and	r25, r21
     b6c:	11 f0       	breq	.+4      	; 0xb72 <__mulsf3+0x1c>
     b6e:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
     b72:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_nan>
     b76:	11 24       	eor	r1, r1
     b78:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_szero>

00000b7c <__mulsf3x>:
     b7c:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_split3>
     b80:	70 f3       	brcs	.-36     	; 0xb5e <__mulsf3+0x8>

00000b82 <__mulsf3_pse>:
     b82:	95 9f       	mul	r25, r21
     b84:	c1 f3       	breq	.-16     	; 0xb76 <__mulsf3+0x20>
     b86:	95 0f       	add	r25, r21
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	55 1f       	adc	r21, r21
     b8c:	62 9f       	mul	r22, r18
     b8e:	f0 01       	movw	r30, r0
     b90:	72 9f       	mul	r23, r18
     b92:	bb 27       	eor	r27, r27
     b94:	f0 0d       	add	r31, r0
     b96:	b1 1d       	adc	r27, r1
     b98:	63 9f       	mul	r22, r19
     b9a:	aa 27       	eor	r26, r26
     b9c:	f0 0d       	add	r31, r0
     b9e:	b1 1d       	adc	r27, r1
     ba0:	aa 1f       	adc	r26, r26
     ba2:	64 9f       	mul	r22, r20
     ba4:	66 27       	eor	r22, r22
     ba6:	b0 0d       	add	r27, r0
     ba8:	a1 1d       	adc	r26, r1
     baa:	66 1f       	adc	r22, r22
     bac:	82 9f       	mul	r24, r18
     bae:	22 27       	eor	r18, r18
     bb0:	b0 0d       	add	r27, r0
     bb2:	a1 1d       	adc	r26, r1
     bb4:	62 1f       	adc	r22, r18
     bb6:	73 9f       	mul	r23, r19
     bb8:	b0 0d       	add	r27, r0
     bba:	a1 1d       	adc	r26, r1
     bbc:	62 1f       	adc	r22, r18
     bbe:	83 9f       	mul	r24, r19
     bc0:	a0 0d       	add	r26, r0
     bc2:	61 1d       	adc	r22, r1
     bc4:	22 1f       	adc	r18, r18
     bc6:	74 9f       	mul	r23, r20
     bc8:	33 27       	eor	r19, r19
     bca:	a0 0d       	add	r26, r0
     bcc:	61 1d       	adc	r22, r1
     bce:	23 1f       	adc	r18, r19
     bd0:	84 9f       	mul	r24, r20
     bd2:	60 0d       	add	r22, r0
     bd4:	21 1d       	adc	r18, r1
     bd6:	82 2f       	mov	r24, r18
     bd8:	76 2f       	mov	r23, r22
     bda:	6a 2f       	mov	r22, r26
     bdc:	11 24       	eor	r1, r1
     bde:	9f 57       	subi	r25, 0x7F	; 127
     be0:	50 40       	sbci	r21, 0x00	; 0
     be2:	9a f0       	brmi	.+38     	; 0xc0a <__mulsf3_pse+0x88>
     be4:	f1 f0       	breq	.+60     	; 0xc22 <__mulsf3_pse+0xa0>
     be6:	88 23       	and	r24, r24
     be8:	4a f0       	brmi	.+18     	; 0xbfc <__mulsf3_pse+0x7a>
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	bb 1f       	adc	r27, r27
     bf0:	66 1f       	adc	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	50 40       	sbci	r21, 0x00	; 0
     bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__mulsf3_pse+0x64>
     bfc:	9e 3f       	cpi	r25, 0xFE	; 254
     bfe:	51 05       	cpc	r21, r1
     c00:	80 f0       	brcs	.+32     	; 0xc22 <__mulsf3_pse+0xa0>
     c02:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_inf>
     c06:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_szero>
     c0a:	5f 3f       	cpi	r21, 0xFF	; 255
     c0c:	e4 f3       	brlt	.-8      	; 0xc06 <__mulsf3_pse+0x84>
     c0e:	98 3e       	cpi	r25, 0xE8	; 232
     c10:	d4 f3       	brlt	.-12     	; 0xc06 <__mulsf3_pse+0x84>
     c12:	86 95       	lsr	r24
     c14:	77 95       	ror	r23
     c16:	67 95       	ror	r22
     c18:	b7 95       	ror	r27
     c1a:	f7 95       	ror	r31
     c1c:	e7 95       	ror	r30
     c1e:	9f 5f       	subi	r25, 0xFF	; 255
     c20:	c1 f7       	brne	.-16     	; 0xc12 <__mulsf3_pse+0x90>
     c22:	fe 2b       	or	r31, r30
     c24:	88 0f       	add	r24, r24
     c26:	91 1d       	adc	r25, r1
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	97 f9       	bld	r25, 7
     c2e:	08 95       	ret

00000c30 <round>:
     c30:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_splitA>
     c34:	e8 f0       	brcs	.+58     	; 0xc70 <round+0x40>
     c36:	9e 37       	cpi	r25, 0x7E	; 126
     c38:	e8 f0       	brcs	.+58     	; 0xc74 <round+0x44>
     c3a:	96 39       	cpi	r25, 0x96	; 150
     c3c:	b8 f4       	brcc	.+46     	; 0xc6c <round+0x3c>
     c3e:	9e 38       	cpi	r25, 0x8E	; 142
     c40:	48 f4       	brcc	.+18     	; 0xc54 <round+0x24>
     c42:	67 2f       	mov	r22, r23
     c44:	78 2f       	mov	r23, r24
     c46:	88 27       	eor	r24, r24
     c48:	98 5f       	subi	r25, 0xF8	; 248
     c4a:	f9 cf       	rjmp	.-14     	; 0xc3e <round+0xe>
     c4c:	86 95       	lsr	r24
     c4e:	77 95       	ror	r23
     c50:	67 95       	ror	r22
     c52:	93 95       	inc	r25
     c54:	95 39       	cpi	r25, 0x95	; 149
     c56:	d0 f3       	brcs	.-12     	; 0xc4c <round+0x1c>
     c58:	b6 2f       	mov	r27, r22
     c5a:	b1 70       	andi	r27, 0x01	; 1
     c5c:	6b 0f       	add	r22, r27
     c5e:	71 1d       	adc	r23, r1
     c60:	81 1d       	adc	r24, r1
     c62:	20 f4       	brcc	.+8      	; 0xc6c <round+0x3c>
     c64:	87 95       	ror	r24
     c66:	77 95       	ror	r23
     c68:	67 95       	ror	r22
     c6a:	93 95       	inc	r25
     c6c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_mintl>
     c70:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_mpack>
     c74:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_szero>

00000c78 <__fp_mintl>:
     c78:	88 23       	and	r24, r24
     c7a:	71 f4       	brne	.+28     	; 0xc98 <__fp_mintl+0x20>
     c7c:	77 23       	and	r23, r23
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fp_mintl+0x10>
     c80:	98 50       	subi	r25, 0x08	; 8
     c82:	87 2b       	or	r24, r23
     c84:	76 2f       	mov	r23, r22
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <__fp_mintl+0x1e>
     c88:	66 23       	and	r22, r22
     c8a:	11 f4       	brne	.+4      	; 0xc90 <__fp_mintl+0x18>
     c8c:	99 27       	eor	r25, r25
     c8e:	0d c0       	rjmp	.+26     	; 0xcaa <__fp_mintl+0x32>
     c90:	90 51       	subi	r25, 0x10	; 16
     c92:	86 2b       	or	r24, r22
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	2a f0       	brmi	.+10     	; 0xca4 <__fp_mintl+0x2c>
     c9a:	9a 95       	dec	r25
     c9c:	66 0f       	add	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	88 1f       	adc	r24, r24
     ca2:	da f7       	brpl	.-10     	; 0xc9a <__fp_mintl+0x22>
     ca4:	88 0f       	add	r24, r24
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	97 f9       	bld	r25, 7
     cac:	08 95       	ret

00000cae <__fp_mpack>:
     cae:	9f 3f       	cpi	r25, 0xFF	; 255
     cb0:	31 f0       	breq	.+12     	; 0xcbe <__fp_mpack_finite+0xc>

00000cb2 <__fp_mpack_finite>:
     cb2:	91 50       	subi	r25, 0x01	; 1
     cb4:	20 f4       	brcc	.+8      	; 0xcbe <__fp_mpack_finite+0xc>
     cb6:	87 95       	ror	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	88 0f       	add	r24, r24
     cc0:	91 1d       	adc	r25, r1
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	97 f9       	bld	r25, 7
     cc8:	08 95       	ret

00000cca <__divmodhi4>:
     cca:	97 fb       	bst	r25, 7
     ccc:	07 2e       	mov	r0, r23
     cce:	16 f4       	brtc	.+4      	; 0xcd4 <__divmodhi4+0xa>
     cd0:	00 94       	com	r0
     cd2:	07 d0       	rcall	.+14     	; 0xce2 <__divmodhi4_neg1>
     cd4:	77 fd       	sbrc	r23, 7
     cd6:	09 d0       	rcall	.+18     	; 0xcea <__divmodhi4_neg2>
     cd8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodhi4>
     cdc:	07 fc       	sbrc	r0, 7
     cde:	05 d0       	rcall	.+10     	; 0xcea <__divmodhi4_neg2>
     ce0:	3e f4       	brtc	.+14     	; 0xcf0 <__divmodhi4_exit>

00000ce2 <__divmodhi4_neg1>:
     ce2:	90 95       	com	r25
     ce4:	81 95       	neg	r24
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	08 95       	ret

00000cea <__divmodhi4_neg2>:
     cea:	70 95       	com	r23
     cec:	61 95       	neg	r22
     cee:	7f 4f       	sbci	r23, 0xFF	; 255

00000cf0 <__divmodhi4_exit>:
     cf0:	08 95       	ret

00000cf2 <__udivmodsi4>:
     cf2:	a1 e2       	ldi	r26, 0x21	; 33
     cf4:	1a 2e       	mov	r1, r26
     cf6:	aa 1b       	sub	r26, r26
     cf8:	bb 1b       	sub	r27, r27
     cfa:	fd 01       	movw	r30, r26
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <__udivmodsi4_ep>

00000cfe <__udivmodsi4_loop>:
     cfe:	aa 1f       	adc	r26, r26
     d00:	bb 1f       	adc	r27, r27
     d02:	ee 1f       	adc	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	a2 17       	cp	r26, r18
     d08:	b3 07       	cpc	r27, r19
     d0a:	e4 07       	cpc	r30, r20
     d0c:	f5 07       	cpc	r31, r21
     d0e:	20 f0       	brcs	.+8      	; 0xd18 <__udivmodsi4_ep>
     d10:	a2 1b       	sub	r26, r18
     d12:	b3 0b       	sbc	r27, r19
     d14:	e4 0b       	sbc	r30, r20
     d16:	f5 0b       	sbc	r31, r21

00000d18 <__udivmodsi4_ep>:
     d18:	66 1f       	adc	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	88 1f       	adc	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	1a 94       	dec	r1
     d22:	69 f7       	brne	.-38     	; 0xcfe <__udivmodsi4_loop>
     d24:	60 95       	com	r22
     d26:	70 95       	com	r23
     d28:	80 95       	com	r24
     d2a:	90 95       	com	r25
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	bd 01       	movw	r22, r26
     d32:	cf 01       	movw	r24, r30
     d34:	08 95       	ret

00000d36 <__ashldi3>:
     d36:	0f 93       	push	r16
     d38:	08 30       	cpi	r16, 0x08	; 8
     d3a:	90 f0       	brcs	.+36     	; 0xd60 <__ashldi3+0x2a>
     d3c:	98 2f       	mov	r25, r24
     d3e:	87 2f       	mov	r24, r23
     d40:	76 2f       	mov	r23, r22
     d42:	65 2f       	mov	r22, r21
     d44:	54 2f       	mov	r21, r20
     d46:	43 2f       	mov	r20, r19
     d48:	32 2f       	mov	r19, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	08 50       	subi	r16, 0x08	; 8
     d4e:	f4 cf       	rjmp	.-24     	; 0xd38 <__ashldi3+0x2>
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	44 1f       	adc	r20, r20
     d56:	55 1f       	adc	r21, r21
     d58:	66 1f       	adc	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 95       	dec	r16
     d62:	b2 f7       	brpl	.-20     	; 0xd50 <__ashldi3+0x1a>
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <__ashrdi3>:
     d68:	97 fb       	bst	r25, 7
     d6a:	10 f8       	bld	r1, 0

00000d6c <__lshrdi3>:
     d6c:	16 94       	lsr	r1
     d6e:	00 08       	sbc	r0, r0
     d70:	0f 93       	push	r16
     d72:	08 30       	cpi	r16, 0x08	; 8
     d74:	98 f0       	brcs	.+38     	; 0xd9c <__lshrdi3+0x30>
     d76:	08 50       	subi	r16, 0x08	; 8
     d78:	23 2f       	mov	r18, r19
     d7a:	34 2f       	mov	r19, r20
     d7c:	45 2f       	mov	r20, r21
     d7e:	56 2f       	mov	r21, r22
     d80:	67 2f       	mov	r22, r23
     d82:	78 2f       	mov	r23, r24
     d84:	89 2f       	mov	r24, r25
     d86:	90 2d       	mov	r25, r0
     d88:	f4 cf       	rjmp	.-24     	; 0xd72 <__lshrdi3+0x6>
     d8a:	05 94       	asr	r0
     d8c:	97 95       	ror	r25
     d8e:	87 95       	ror	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	57 95       	ror	r21
     d96:	47 95       	ror	r20
     d98:	37 95       	ror	r19
     d9a:	27 95       	ror	r18
     d9c:	0a 95       	dec	r16
     d9e:	aa f7       	brpl	.-22     	; 0xd8a <__lshrdi3+0x1e>
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <__cmpdi2_s8>:
     da4:	00 24       	eor	r0, r0
     da6:	a7 fd       	sbrc	r26, 7
     da8:	00 94       	com	r0
     daa:	2a 17       	cp	r18, r26
     dac:	30 05       	cpc	r19, r0
     dae:	40 05       	cpc	r20, r0
     db0:	50 05       	cpc	r21, r0
     db2:	60 05       	cpc	r22, r0
     db4:	70 05       	cpc	r23, r0
     db6:	80 05       	cpc	r24, r0
     db8:	90 05       	cpc	r25, r0
     dba:	08 95       	ret

00000dbc <__udivmodhi4>:
     dbc:	aa 1b       	sub	r26, r26
     dbe:	bb 1b       	sub	r27, r27
     dc0:	51 e1       	ldi	r21, 0x11	; 17
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <__udivmodhi4_ep>

00000dc4 <__udivmodhi4_loop>:
     dc4:	aa 1f       	adc	r26, r26
     dc6:	bb 1f       	adc	r27, r27
     dc8:	a6 17       	cp	r26, r22
     dca:	b7 07       	cpc	r27, r23
     dcc:	10 f0       	brcs	.+4      	; 0xdd2 <__udivmodhi4_ep>
     dce:	a6 1b       	sub	r26, r22
     dd0:	b7 0b       	sbc	r27, r23

00000dd2 <__udivmodhi4_ep>:
     dd2:	88 1f       	adc	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	5a 95       	dec	r21
     dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__udivmodhi4_loop>
     dda:	80 95       	com	r24
     ddc:	90 95       	com	r25
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	08 95       	ret

00000de4 <vsnprintf>:
     de4:	ae e0       	ldi	r26, 0x0E	; 14
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 ef       	ldi	r30, 0xF8	; 248
     dea:	f6 e0       	ldi	r31, 0x06	; 6
     dec:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__prologue_saves__+0x1c>
     df0:	8c 01       	movw	r16, r24
     df2:	fa 01       	movw	r30, r20
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	8c 83       	std	Y+4, r24	; 0x04
     df8:	09 83       	std	Y+1, r16	; 0x01
     dfa:	1a 83       	std	Y+2, r17	; 0x02
     dfc:	77 ff       	sbrs	r23, 7
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vsnprintf+0x20>
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e8       	ldi	r23, 0x80	; 128
     e04:	cb 01       	movw	r24, r22
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	a9 01       	movw	r20, r18
     e0e:	bf 01       	movw	r22, r30
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 1e 07 	call	0xe3c	; 0xe3c <vfprintf>
     e18:	4d 81       	ldd	r20, Y+5	; 0x05
     e1a:	5e 81       	ldd	r21, Y+6	; 0x06
     e1c:	57 fd       	sbrc	r21, 7
     e1e:	0a c0       	rjmp	.+20     	; 0xe34 <vsnprintf+0x50>
     e20:	2f 81       	ldd	r18, Y+7	; 0x07
     e22:	38 85       	ldd	r19, Y+8	; 0x08
     e24:	42 17       	cp	r20, r18
     e26:	53 07       	cpc	r21, r19
     e28:	0c f4       	brge	.+2      	; 0xe2c <vsnprintf+0x48>
     e2a:	9a 01       	movw	r18, r20
     e2c:	f8 01       	movw	r30, r16
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	10 82       	st	Z, r1
     e34:	2e 96       	adiw	r28, 0x0e	; 14
     e36:	e4 e0       	ldi	r30, 0x04	; 4
     e38:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__epilogue_restores__+0x1c>

00000e3c <vfprintf>:
     e3c:	ab e0       	ldi	r26, 0x0B	; 11
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e2       	ldi	r30, 0x24	; 36
     e42:	f7 e0       	ldi	r31, 0x07	; 7
     e44:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__prologue_saves__>
     e48:	6c 01       	movw	r12, r24
     e4a:	7b 01       	movw	r14, r22
     e4c:	8a 01       	movw	r16, r20
     e4e:	fc 01       	movw	r30, r24
     e50:	16 82       	std	Z+6, r1	; 0x06
     e52:	17 82       	std	Z+7, r1	; 0x07
     e54:	83 81       	ldd	r24, Z+3	; 0x03
     e56:	81 ff       	sbrs	r24, 1
     e58:	cc c1       	rjmp	.+920    	; 0x11f2 <vfprintf+0x3b6>
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	3c 01       	movw	r6, r24
     e60:	f6 01       	movw	r30, r12
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	f7 01       	movw	r30, r14
     e66:	93 fd       	sbrc	r25, 3
     e68:	85 91       	lpm	r24, Z+
     e6a:	93 ff       	sbrs	r25, 3
     e6c:	81 91       	ld	r24, Z+
     e6e:	7f 01       	movw	r14, r30
     e70:	88 23       	and	r24, r24
     e72:	09 f4       	brne	.+2      	; 0xe76 <vfprintf+0x3a>
     e74:	ba c1       	rjmp	.+884    	; 0x11ea <vfprintf+0x3ae>
     e76:	85 32       	cpi	r24, 0x25	; 37
     e78:	39 f4       	brne	.+14     	; 0xe88 <vfprintf+0x4c>
     e7a:	93 fd       	sbrc	r25, 3
     e7c:	85 91       	lpm	r24, Z+
     e7e:	93 ff       	sbrs	r25, 3
     e80:	81 91       	ld	r24, Z+
     e82:	7f 01       	movw	r14, r30
     e84:	85 32       	cpi	r24, 0x25	; 37
     e86:	29 f4       	brne	.+10     	; 0xe92 <vfprintf+0x56>
     e88:	b6 01       	movw	r22, r12
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
     e90:	e7 cf       	rjmp	.-50     	; 0xe60 <vfprintf+0x24>
     e92:	91 2c       	mov	r9, r1
     e94:	21 2c       	mov	r2, r1
     e96:	31 2c       	mov	r3, r1
     e98:	ff e1       	ldi	r31, 0x1F	; 31
     e9a:	f3 15       	cp	r31, r3
     e9c:	d8 f0       	brcs	.+54     	; 0xed4 <vfprintf+0x98>
     e9e:	8b 32       	cpi	r24, 0x2B	; 43
     ea0:	79 f0       	breq	.+30     	; 0xec0 <vfprintf+0x84>
     ea2:	38 f4       	brcc	.+14     	; 0xeb2 <vfprintf+0x76>
     ea4:	80 32       	cpi	r24, 0x20	; 32
     ea6:	79 f0       	breq	.+30     	; 0xec6 <vfprintf+0x8a>
     ea8:	83 32       	cpi	r24, 0x23	; 35
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <vfprintf+0x98>
     eac:	23 2d       	mov	r18, r3
     eae:	20 61       	ori	r18, 0x10	; 16
     eb0:	1d c0       	rjmp	.+58     	; 0xeec <vfprintf+0xb0>
     eb2:	8d 32       	cpi	r24, 0x2D	; 45
     eb4:	61 f0       	breq	.+24     	; 0xece <vfprintf+0x92>
     eb6:	80 33       	cpi	r24, 0x30	; 48
     eb8:	69 f4       	brne	.+26     	; 0xed4 <vfprintf+0x98>
     eba:	23 2d       	mov	r18, r3
     ebc:	21 60       	ori	r18, 0x01	; 1
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <vfprintf+0xb0>
     ec0:	83 2d       	mov	r24, r3
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	38 2e       	mov	r3, r24
     ec6:	e3 2d       	mov	r30, r3
     ec8:	e4 60       	ori	r30, 0x04	; 4
     eca:	3e 2e       	mov	r3, r30
     ecc:	2a c0       	rjmp	.+84     	; 0xf22 <vfprintf+0xe6>
     ece:	f3 2d       	mov	r31, r3
     ed0:	f8 60       	ori	r31, 0x08	; 8
     ed2:	1d c0       	rjmp	.+58     	; 0xf0e <vfprintf+0xd2>
     ed4:	37 fc       	sbrc	r3, 7
     ed6:	2d c0       	rjmp	.+90     	; 0xf32 <vfprintf+0xf6>
     ed8:	20 ed       	ldi	r18, 0xD0	; 208
     eda:	28 0f       	add	r18, r24
     edc:	2a 30       	cpi	r18, 0x0A	; 10
     ede:	40 f0       	brcs	.+16     	; 0xef0 <vfprintf+0xb4>
     ee0:	8e 32       	cpi	r24, 0x2E	; 46
     ee2:	b9 f4       	brne	.+46     	; 0xf12 <vfprintf+0xd6>
     ee4:	36 fc       	sbrc	r3, 6
     ee6:	81 c1       	rjmp	.+770    	; 0x11ea <vfprintf+0x3ae>
     ee8:	23 2d       	mov	r18, r3
     eea:	20 64       	ori	r18, 0x40	; 64
     eec:	32 2e       	mov	r3, r18
     eee:	19 c0       	rjmp	.+50     	; 0xf22 <vfprintf+0xe6>
     ef0:	36 fe       	sbrs	r3, 6
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <vfprintf+0xc4>
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	98 9e       	mul	r9, r24
     ef8:	20 0d       	add	r18, r0
     efa:	11 24       	eor	r1, r1
     efc:	92 2e       	mov	r9, r18
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <vfprintf+0xe6>
     f00:	ea e0       	ldi	r30, 0x0A	; 10
     f02:	2e 9e       	mul	r2, r30
     f04:	20 0d       	add	r18, r0
     f06:	11 24       	eor	r1, r1
     f08:	22 2e       	mov	r2, r18
     f0a:	f3 2d       	mov	r31, r3
     f0c:	f0 62       	ori	r31, 0x20	; 32
     f0e:	3f 2e       	mov	r3, r31
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <vfprintf+0xe6>
     f12:	8c 36       	cpi	r24, 0x6C	; 108
     f14:	21 f4       	brne	.+8      	; 0xf1e <vfprintf+0xe2>
     f16:	83 2d       	mov	r24, r3
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	38 2e       	mov	r3, r24
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0xe6>
     f1e:	88 36       	cpi	r24, 0x68	; 104
     f20:	41 f4       	brne	.+16     	; 0xf32 <vfprintf+0xf6>
     f22:	f7 01       	movw	r30, r14
     f24:	93 fd       	sbrc	r25, 3
     f26:	85 91       	lpm	r24, Z+
     f28:	93 ff       	sbrs	r25, 3
     f2a:	81 91       	ld	r24, Z+
     f2c:	7f 01       	movw	r14, r30
     f2e:	81 11       	cpse	r24, r1
     f30:	b3 cf       	rjmp	.-154    	; 0xe98 <vfprintf+0x5c>
     f32:	98 2f       	mov	r25, r24
     f34:	9f 7d       	andi	r25, 0xDF	; 223
     f36:	95 54       	subi	r25, 0x45	; 69
     f38:	93 30       	cpi	r25, 0x03	; 3
     f3a:	28 f4       	brcc	.+10     	; 0xf46 <vfprintf+0x10a>
     f3c:	0c 5f       	subi	r16, 0xFC	; 252
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	9f e3       	ldi	r25, 0x3F	; 63
     f42:	99 83       	std	Y+1, r25	; 0x01
     f44:	0d c0       	rjmp	.+26     	; 0xf60 <vfprintf+0x124>
     f46:	83 36       	cpi	r24, 0x63	; 99
     f48:	31 f0       	breq	.+12     	; 0xf56 <vfprintf+0x11a>
     f4a:	83 37       	cpi	r24, 0x73	; 115
     f4c:	71 f0       	breq	.+28     	; 0xf6a <vfprintf+0x12e>
     f4e:	83 35       	cpi	r24, 0x53	; 83
     f50:	09 f0       	breq	.+2      	; 0xf54 <vfprintf+0x118>
     f52:	59 c0       	rjmp	.+178    	; 0x1006 <vfprintf+0x1ca>
     f54:	21 c0       	rjmp	.+66     	; 0xf98 <vfprintf+0x15c>
     f56:	f8 01       	movw	r30, r16
     f58:	80 81       	ld	r24, Z
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	0e 5f       	subi	r16, 0xFE	; 254
     f5e:	1f 4f       	sbci	r17, 0xFF	; 255
     f60:	88 24       	eor	r8, r8
     f62:	83 94       	inc	r8
     f64:	91 2c       	mov	r9, r1
     f66:	53 01       	movw	r10, r6
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <vfprintf+0x154>
     f6a:	28 01       	movw	r4, r16
     f6c:	f2 e0       	ldi	r31, 0x02	; 2
     f6e:	4f 0e       	add	r4, r31
     f70:	51 1c       	adc	r5, r1
     f72:	f8 01       	movw	r30, r16
     f74:	a0 80       	ld	r10, Z
     f76:	b1 80       	ldd	r11, Z+1	; 0x01
     f78:	36 fe       	sbrs	r3, 6
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <vfprintf+0x146>
     f7c:	69 2d       	mov	r22, r9
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <vfprintf+0x14a>
     f82:	6f ef       	ldi	r22, 0xFF	; 255
     f84:	7f ef       	ldi	r23, 0xFF	; 255
     f86:	c5 01       	movw	r24, r10
     f88:	0e 94 0a 09 	call	0x1214	; 0x1214 <strnlen>
     f8c:	4c 01       	movw	r8, r24
     f8e:	82 01       	movw	r16, r4
     f90:	f3 2d       	mov	r31, r3
     f92:	ff 77       	andi	r31, 0x7F	; 127
     f94:	3f 2e       	mov	r3, r31
     f96:	16 c0       	rjmp	.+44     	; 0xfc4 <vfprintf+0x188>
     f98:	28 01       	movw	r4, r16
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	42 0e       	add	r4, r18
     f9e:	51 1c       	adc	r5, r1
     fa0:	f8 01       	movw	r30, r16
     fa2:	a0 80       	ld	r10, Z
     fa4:	b1 80       	ldd	r11, Z+1	; 0x01
     fa6:	36 fe       	sbrs	r3, 6
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x174>
     faa:	69 2d       	mov	r22, r9
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfprintf+0x178>
     fb0:	6f ef       	ldi	r22, 0xFF	; 255
     fb2:	7f ef       	ldi	r23, 0xFF	; 255
     fb4:	c5 01       	movw	r24, r10
     fb6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <strnlen_P>
     fba:	4c 01       	movw	r8, r24
     fbc:	f3 2d       	mov	r31, r3
     fbe:	f0 68       	ori	r31, 0x80	; 128
     fc0:	3f 2e       	mov	r3, r31
     fc2:	82 01       	movw	r16, r4
     fc4:	33 fc       	sbrc	r3, 3
     fc6:	1b c0       	rjmp	.+54     	; 0xffe <vfprintf+0x1c2>
     fc8:	82 2d       	mov	r24, r2
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	88 16       	cp	r8, r24
     fce:	99 06       	cpc	r9, r25
     fd0:	b0 f4       	brcc	.+44     	; 0xffe <vfprintf+0x1c2>
     fd2:	b6 01       	movw	r22, r12
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
     fdc:	2a 94       	dec	r2
     fde:	f4 cf       	rjmp	.-24     	; 0xfc8 <vfprintf+0x18c>
     fe0:	f5 01       	movw	r30, r10
     fe2:	37 fc       	sbrc	r3, 7
     fe4:	85 91       	lpm	r24, Z+
     fe6:	37 fe       	sbrs	r3, 7
     fe8:	81 91       	ld	r24, Z+
     fea:	5f 01       	movw	r10, r30
     fec:	b6 01       	movw	r22, r12
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
     ff4:	21 10       	cpse	r2, r1
     ff6:	2a 94       	dec	r2
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	82 1a       	sub	r8, r18
     ffc:	91 08       	sbc	r9, r1
     ffe:	81 14       	cp	r8, r1
    1000:	91 04       	cpc	r9, r1
    1002:	71 f7       	brne	.-36     	; 0xfe0 <vfprintf+0x1a4>
    1004:	e8 c0       	rjmp	.+464    	; 0x11d6 <vfprintf+0x39a>
    1006:	84 36       	cpi	r24, 0x64	; 100
    1008:	11 f0       	breq	.+4      	; 0x100e <vfprintf+0x1d2>
    100a:	89 36       	cpi	r24, 0x69	; 105
    100c:	41 f5       	brne	.+80     	; 0x105e <vfprintf+0x222>
    100e:	f8 01       	movw	r30, r16
    1010:	37 fe       	sbrs	r3, 7
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <vfprintf+0x1e6>
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	0c 5f       	subi	r16, 0xFC	; 252
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <vfprintf+0x1f6>
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	07 2e       	mov	r0, r23
    1028:	00 0c       	add	r0, r0
    102a:	88 0b       	sbc	r24, r24
    102c:	99 0b       	sbc	r25, r25
    102e:	0e 5f       	subi	r16, 0xFE	; 254
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	f3 2d       	mov	r31, r3
    1034:	ff 76       	andi	r31, 0x6F	; 111
    1036:	3f 2e       	mov	r3, r31
    1038:	97 ff       	sbrs	r25, 7
    103a:	09 c0       	rjmp	.+18     	; 0x104e <vfprintf+0x212>
    103c:	90 95       	com	r25
    103e:	80 95       	com	r24
    1040:	70 95       	com	r23
    1042:	61 95       	neg	r22
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	f0 68       	ori	r31, 0x80	; 128
    104c:	3f 2e       	mov	r3, r31
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	a3 01       	movw	r20, r6
    1054:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__ultoa_invert>
    1058:	88 2e       	mov	r8, r24
    105a:	86 18       	sub	r8, r6
    105c:	45 c0       	rjmp	.+138    	; 0x10e8 <vfprintf+0x2ac>
    105e:	85 37       	cpi	r24, 0x75	; 117
    1060:	31 f4       	brne	.+12     	; 0x106e <vfprintf+0x232>
    1062:	23 2d       	mov	r18, r3
    1064:	2f 7e       	andi	r18, 0xEF	; 239
    1066:	b2 2e       	mov	r11, r18
    1068:	2a e0       	ldi	r18, 0x0A	; 10
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	25 c0       	rjmp	.+74     	; 0x10b8 <vfprintf+0x27c>
    106e:	93 2d       	mov	r25, r3
    1070:	99 7f       	andi	r25, 0xF9	; 249
    1072:	b9 2e       	mov	r11, r25
    1074:	8f 36       	cpi	r24, 0x6F	; 111
    1076:	c1 f0       	breq	.+48     	; 0x10a8 <vfprintf+0x26c>
    1078:	18 f4       	brcc	.+6      	; 0x1080 <vfprintf+0x244>
    107a:	88 35       	cpi	r24, 0x58	; 88
    107c:	79 f0       	breq	.+30     	; 0x109c <vfprintf+0x260>
    107e:	b5 c0       	rjmp	.+362    	; 0x11ea <vfprintf+0x3ae>
    1080:	80 37       	cpi	r24, 0x70	; 112
    1082:	19 f0       	breq	.+6      	; 0x108a <vfprintf+0x24e>
    1084:	88 37       	cpi	r24, 0x78	; 120
    1086:	21 f0       	breq	.+8      	; 0x1090 <vfprintf+0x254>
    1088:	b0 c0       	rjmp	.+352    	; 0x11ea <vfprintf+0x3ae>
    108a:	e9 2f       	mov	r30, r25
    108c:	e0 61       	ori	r30, 0x10	; 16
    108e:	be 2e       	mov	r11, r30
    1090:	b4 fe       	sbrs	r11, 4
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <vfprintf+0x272>
    1094:	fb 2d       	mov	r31, r11
    1096:	f4 60       	ori	r31, 0x04	; 4
    1098:	bf 2e       	mov	r11, r31
    109a:	09 c0       	rjmp	.+18     	; 0x10ae <vfprintf+0x272>
    109c:	34 fe       	sbrs	r3, 4
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <vfprintf+0x278>
    10a0:	29 2f       	mov	r18, r25
    10a2:	26 60       	ori	r18, 0x06	; 6
    10a4:	b2 2e       	mov	r11, r18
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <vfprintf+0x278>
    10a8:	28 e0       	ldi	r18, 0x08	; 8
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <vfprintf+0x27c>
    10ae:	20 e1       	ldi	r18, 0x10	; 16
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <vfprintf+0x27c>
    10b4:	20 e1       	ldi	r18, 0x10	; 16
    10b6:	32 e0       	ldi	r19, 0x02	; 2
    10b8:	f8 01       	movw	r30, r16
    10ba:	b7 fe       	sbrs	r11, 7
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <vfprintf+0x290>
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	0c 5f       	subi	r16, 0xFC	; 252
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <vfprintf+0x29c>
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 5f       	subi	r16, 0xFE	; 254
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
    10d8:	a3 01       	movw	r20, r6
    10da:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__ultoa_invert>
    10de:	88 2e       	mov	r8, r24
    10e0:	86 18       	sub	r8, r6
    10e2:	fb 2d       	mov	r31, r11
    10e4:	ff 77       	andi	r31, 0x7F	; 127
    10e6:	3f 2e       	mov	r3, r31
    10e8:	36 fe       	sbrs	r3, 6
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <vfprintf+0x2ca>
    10ec:	23 2d       	mov	r18, r3
    10ee:	2e 7f       	andi	r18, 0xFE	; 254
    10f0:	a2 2e       	mov	r10, r18
    10f2:	89 14       	cp	r8, r9
    10f4:	58 f4       	brcc	.+22     	; 0x110c <vfprintf+0x2d0>
    10f6:	34 fe       	sbrs	r3, 4
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <vfprintf+0x2d4>
    10fa:	32 fc       	sbrc	r3, 2
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <vfprintf+0x2d4>
    10fe:	83 2d       	mov	r24, r3
    1100:	8e 7e       	andi	r24, 0xEE	; 238
    1102:	a8 2e       	mov	r10, r24
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <vfprintf+0x2d4>
    1106:	b8 2c       	mov	r11, r8
    1108:	a3 2c       	mov	r10, r3
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <vfprintf+0x2d6>
    110c:	b8 2c       	mov	r11, r8
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <vfprintf+0x2d6>
    1110:	b9 2c       	mov	r11, r9
    1112:	a4 fe       	sbrs	r10, 4
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <vfprintf+0x2f8>
    1116:	fe 01       	movw	r30, r28
    1118:	e8 0d       	add	r30, r8
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	80 33       	cpi	r24, 0x30	; 48
    1120:	21 f4       	brne	.+8      	; 0x112a <vfprintf+0x2ee>
    1122:	9a 2d       	mov	r25, r10
    1124:	99 7e       	andi	r25, 0xE9	; 233
    1126:	a9 2e       	mov	r10, r25
    1128:	09 c0       	rjmp	.+18     	; 0x113c <vfprintf+0x300>
    112a:	a2 fe       	sbrs	r10, 2
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x2fe>
    112e:	b3 94       	inc	r11
    1130:	b3 94       	inc	r11
    1132:	04 c0       	rjmp	.+8      	; 0x113c <vfprintf+0x300>
    1134:	8a 2d       	mov	r24, r10
    1136:	86 78       	andi	r24, 0x86	; 134
    1138:	09 f0       	breq	.+2      	; 0x113c <vfprintf+0x300>
    113a:	b3 94       	inc	r11
    113c:	a3 fc       	sbrc	r10, 3
    113e:	11 c0       	rjmp	.+34     	; 0x1162 <vfprintf+0x326>
    1140:	a0 fe       	sbrs	r10, 0
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <vfprintf+0x314>
    1144:	b2 14       	cp	r11, r2
    1146:	88 f4       	brcc	.+34     	; 0x116a <vfprintf+0x32e>
    1148:	28 0c       	add	r2, r8
    114a:	92 2c       	mov	r9, r2
    114c:	9b 18       	sub	r9, r11
    114e:	0e c0       	rjmp	.+28     	; 0x116c <vfprintf+0x330>
    1150:	b2 14       	cp	r11, r2
    1152:	60 f4       	brcc	.+24     	; 0x116c <vfprintf+0x330>
    1154:	b6 01       	movw	r22, r12
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    115e:	b3 94       	inc	r11
    1160:	f7 cf       	rjmp	.-18     	; 0x1150 <vfprintf+0x314>
    1162:	b2 14       	cp	r11, r2
    1164:	18 f4       	brcc	.+6      	; 0x116c <vfprintf+0x330>
    1166:	2b 18       	sub	r2, r11
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x332>
    116a:	98 2c       	mov	r9, r8
    116c:	21 2c       	mov	r2, r1
    116e:	a4 fe       	sbrs	r10, 4
    1170:	10 c0       	rjmp	.+32     	; 0x1192 <vfprintf+0x356>
    1172:	b6 01       	movw	r22, r12
    1174:	80 e3       	ldi	r24, 0x30	; 48
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    117c:	a2 fe       	sbrs	r10, 2
    117e:	17 c0       	rjmp	.+46     	; 0x11ae <vfprintf+0x372>
    1180:	a1 fc       	sbrc	r10, 1
    1182:	03 c0       	rjmp	.+6      	; 0x118a <vfprintf+0x34e>
    1184:	88 e7       	ldi	r24, 0x78	; 120
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <vfprintf+0x352>
    118a:	88 e5       	ldi	r24, 0x58	; 88
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	b6 01       	movw	r22, r12
    1190:	0c c0       	rjmp	.+24     	; 0x11aa <vfprintf+0x36e>
    1192:	8a 2d       	mov	r24, r10
    1194:	86 78       	andi	r24, 0x86	; 134
    1196:	59 f0       	breq	.+22     	; 0x11ae <vfprintf+0x372>
    1198:	a1 fe       	sbrs	r10, 1
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x364>
    119c:	8b e2       	ldi	r24, 0x2B	; 43
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <vfprintf+0x366>
    11a0:	80 e2       	ldi	r24, 0x20	; 32
    11a2:	a7 fc       	sbrc	r10, 7
    11a4:	8d e2       	ldi	r24, 0x2D	; 45
    11a6:	b6 01       	movw	r22, r12
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    11ae:	89 14       	cp	r8, r9
    11b0:	38 f4       	brcc	.+14     	; 0x11c0 <vfprintf+0x384>
    11b2:	b6 01       	movw	r22, r12
    11b4:	80 e3       	ldi	r24, 0x30	; 48
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    11bc:	9a 94       	dec	r9
    11be:	f7 cf       	rjmp	.-18     	; 0x11ae <vfprintf+0x372>
    11c0:	8a 94       	dec	r8
    11c2:	f3 01       	movw	r30, r6
    11c4:	e8 0d       	add	r30, r8
    11c6:	f1 1d       	adc	r31, r1
    11c8:	80 81       	ld	r24, Z
    11ca:	b6 01       	movw	r22, r12
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    11d2:	81 10       	cpse	r8, r1
    11d4:	f5 cf       	rjmp	.-22     	; 0x11c0 <vfprintf+0x384>
    11d6:	22 20       	and	r2, r2
    11d8:	09 f4       	brne	.+2      	; 0x11dc <vfprintf+0x3a0>
    11da:	42 ce       	rjmp	.-892    	; 0xe60 <vfprintf+0x24>
    11dc:	b6 01       	movw	r22, r12
    11de:	80 e2       	ldi	r24, 0x20	; 32
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 15 09 	call	0x122a	; 0x122a <fputc>
    11e6:	2a 94       	dec	r2
    11e8:	f6 cf       	rjmp	.-20     	; 0x11d6 <vfprintf+0x39a>
    11ea:	f6 01       	movw	r30, r12
    11ec:	86 81       	ldd	r24, Z+6	; 0x06
    11ee:	97 81       	ldd	r25, Z+7	; 0x07
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <vfprintf+0x3ba>
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	9f ef       	ldi	r25, 0xFF	; 255
    11f6:	2b 96       	adiw	r28, 0x0b	; 11
    11f8:	e2 e1       	ldi	r30, 0x12	; 18
    11fa:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__epilogue_restores__>

000011fe <strnlen_P>:
    11fe:	fc 01       	movw	r30, r24
    1200:	05 90       	lpm	r0, Z+
    1202:	61 50       	subi	r22, 0x01	; 1
    1204:	70 40       	sbci	r23, 0x00	; 0
    1206:	01 10       	cpse	r0, r1
    1208:	d8 f7       	brcc	.-10     	; 0x1200 <strnlen_P+0x2>
    120a:	80 95       	com	r24
    120c:	90 95       	com	r25
    120e:	8e 0f       	add	r24, r30
    1210:	9f 1f       	adc	r25, r31
    1212:	08 95       	ret

00001214 <strnlen>:
    1214:	fc 01       	movw	r30, r24
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	70 40       	sbci	r23, 0x00	; 0
    121a:	01 90       	ld	r0, Z+
    121c:	01 10       	cpse	r0, r1
    121e:	d8 f7       	brcc	.-10     	; 0x1216 <strnlen+0x2>
    1220:	80 95       	com	r24
    1222:	90 95       	com	r25
    1224:	8e 0f       	add	r24, r30
    1226:	9f 1f       	adc	r25, r31
    1228:	08 95       	ret

0000122a <fputc>:
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	fb 01       	movw	r30, r22
    1234:	23 81       	ldd	r18, Z+3	; 0x03
    1236:	21 fd       	sbrc	r18, 1
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <fputc+0x16>
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	2c c0       	rjmp	.+88     	; 0x1298 <fputc+0x6e>
    1240:	22 ff       	sbrs	r18, 2
    1242:	16 c0       	rjmp	.+44     	; 0x1270 <fputc+0x46>
    1244:	46 81       	ldd	r20, Z+6	; 0x06
    1246:	57 81       	ldd	r21, Z+7	; 0x07
    1248:	24 81       	ldd	r18, Z+4	; 0x04
    124a:	35 81       	ldd	r19, Z+5	; 0x05
    124c:	42 17       	cp	r20, r18
    124e:	53 07       	cpc	r21, r19
    1250:	44 f4       	brge	.+16     	; 0x1262 <fputc+0x38>
    1252:	a0 81       	ld	r26, Z
    1254:	b1 81       	ldd	r27, Z+1	; 0x01
    1256:	9d 01       	movw	r18, r26
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	20 83       	st	Z, r18
    125e:	31 83       	std	Z+1, r19	; 0x01
    1260:	8c 93       	st	X, r24
    1262:	26 81       	ldd	r18, Z+6	; 0x06
    1264:	37 81       	ldd	r19, Z+7	; 0x07
    1266:	2f 5f       	subi	r18, 0xFF	; 255
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	26 83       	std	Z+6, r18	; 0x06
    126c:	37 83       	std	Z+7, r19	; 0x07
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <fputc+0x6e>
    1270:	8b 01       	movw	r16, r22
    1272:	ec 01       	movw	r28, r24
    1274:	fb 01       	movw	r30, r22
    1276:	00 84       	ldd	r0, Z+8	; 0x08
    1278:	f1 85       	ldd	r31, Z+9	; 0x09
    127a:	e0 2d       	mov	r30, r0
    127c:	09 95       	icall
    127e:	89 2b       	or	r24, r25
    1280:	e1 f6       	brne	.-72     	; 0x123a <fputc+0x10>
    1282:	d8 01       	movw	r26, r16
    1284:	16 96       	adiw	r26, 0x06	; 6
    1286:	8d 91       	ld	r24, X+
    1288:	9c 91       	ld	r25, X
    128a:	17 97       	sbiw	r26, 0x07	; 7
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	16 96       	adiw	r26, 0x06	; 6
    1290:	8d 93       	st	X+, r24
    1292:	9c 93       	st	X, r25
    1294:	17 97       	sbiw	r26, 0x07	; 7
    1296:	ce 01       	movw	r24, r28
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <__ultoa_invert>:
    12a2:	fa 01       	movw	r30, r20
    12a4:	aa 27       	eor	r26, r26
    12a6:	28 30       	cpi	r18, 0x08	; 8
    12a8:	51 f1       	breq	.+84     	; 0x12fe <__ultoa_invert+0x5c>
    12aa:	20 31       	cpi	r18, 0x10	; 16
    12ac:	81 f1       	breq	.+96     	; 0x130e <__ultoa_invert+0x6c>
    12ae:	e8 94       	clt
    12b0:	6f 93       	push	r22
    12b2:	6e 7f       	andi	r22, 0xFE	; 254
    12b4:	6e 5f       	subi	r22, 0xFE	; 254
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	af 4f       	sbci	r26, 0xFF	; 255
    12be:	b1 e0       	ldi	r27, 0x01	; 1
    12c0:	3e d0       	rcall	.+124    	; 0x133e <__ultoa_invert+0x9c>
    12c2:	b4 e0       	ldi	r27, 0x04	; 4
    12c4:	3c d0       	rcall	.+120    	; 0x133e <__ultoa_invert+0x9c>
    12c6:	67 0f       	add	r22, r23
    12c8:	78 1f       	adc	r23, r24
    12ca:	89 1f       	adc	r24, r25
    12cc:	9a 1f       	adc	r25, r26
    12ce:	a1 1d       	adc	r26, r1
    12d0:	68 0f       	add	r22, r24
    12d2:	79 1f       	adc	r23, r25
    12d4:	8a 1f       	adc	r24, r26
    12d6:	91 1d       	adc	r25, r1
    12d8:	a1 1d       	adc	r26, r1
    12da:	6a 0f       	add	r22, r26
    12dc:	71 1d       	adc	r23, r1
    12de:	81 1d       	adc	r24, r1
    12e0:	91 1d       	adc	r25, r1
    12e2:	a1 1d       	adc	r26, r1
    12e4:	20 d0       	rcall	.+64     	; 0x1326 <__ultoa_invert+0x84>
    12e6:	09 f4       	brne	.+2      	; 0x12ea <__ultoa_invert+0x48>
    12e8:	68 94       	set
    12ea:	3f 91       	pop	r19
    12ec:	2a e0       	ldi	r18, 0x0A	; 10
    12ee:	26 9f       	mul	r18, r22
    12f0:	11 24       	eor	r1, r1
    12f2:	30 19       	sub	r19, r0
    12f4:	30 5d       	subi	r19, 0xD0	; 208
    12f6:	31 93       	st	Z+, r19
    12f8:	de f6       	brtc	.-74     	; 0x12b0 <__ultoa_invert+0xe>
    12fa:	cf 01       	movw	r24, r30
    12fc:	08 95       	ret
    12fe:	46 2f       	mov	r20, r22
    1300:	47 70       	andi	r20, 0x07	; 7
    1302:	40 5d       	subi	r20, 0xD0	; 208
    1304:	41 93       	st	Z+, r20
    1306:	b3 e0       	ldi	r27, 0x03	; 3
    1308:	0f d0       	rcall	.+30     	; 0x1328 <__ultoa_invert+0x86>
    130a:	c9 f7       	brne	.-14     	; 0x12fe <__ultoa_invert+0x5c>
    130c:	f6 cf       	rjmp	.-20     	; 0x12fa <__ultoa_invert+0x58>
    130e:	46 2f       	mov	r20, r22
    1310:	4f 70       	andi	r20, 0x0F	; 15
    1312:	40 5d       	subi	r20, 0xD0	; 208
    1314:	4a 33       	cpi	r20, 0x3A	; 58
    1316:	18 f0       	brcs	.+6      	; 0x131e <__ultoa_invert+0x7c>
    1318:	49 5d       	subi	r20, 0xD9	; 217
    131a:	31 fd       	sbrc	r19, 1
    131c:	40 52       	subi	r20, 0x20	; 32
    131e:	41 93       	st	Z+, r20
    1320:	02 d0       	rcall	.+4      	; 0x1326 <__ultoa_invert+0x84>
    1322:	a9 f7       	brne	.-22     	; 0x130e <__ultoa_invert+0x6c>
    1324:	ea cf       	rjmp	.-44     	; 0x12fa <__ultoa_invert+0x58>
    1326:	b4 e0       	ldi	r27, 0x04	; 4
    1328:	a6 95       	lsr	r26
    132a:	97 95       	ror	r25
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	ba 95       	dec	r27
    1334:	c9 f7       	brne	.-14     	; 0x1328 <__ultoa_invert+0x86>
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 05       	cpc	r22, r1
    133a:	71 05       	cpc	r23, r1
    133c:	08 95       	ret
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	0a 2e       	mov	r0, r26
    1344:	06 94       	lsr	r0
    1346:	57 95       	ror	r21
    1348:	47 95       	ror	r20
    134a:	37 95       	ror	r19
    134c:	27 95       	ror	r18
    134e:	ba 95       	dec	r27
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__ultoa_invert+0xa2>
    1352:	62 0f       	add	r22, r18
    1354:	73 1f       	adc	r23, r19
    1356:	84 1f       	adc	r24, r20
    1358:	95 1f       	adc	r25, r21
    135a:	a0 1d       	adc	r26, r0
    135c:	08 95       	ret

0000135e <ccp_write_io>:
    135e:	dc 01       	movw	r26, r24
    1360:	28 ed       	ldi	r18, 0xD8	; 216
    1362:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6b64>
    1366:	6c 93       	st	X, r22
    1368:	08 95       	ret

0000136a <__prologue_saves__>:
    136a:	2f 92       	push	r2
    136c:	3f 92       	push	r3
    136e:	4f 92       	push	r4
    1370:	5f 92       	push	r5
    1372:	6f 92       	push	r6
    1374:	7f 92       	push	r7
    1376:	8f 92       	push	r8
    1378:	9f 92       	push	r9
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	cf 92       	push	r12
    1380:	df 92       	push	r13
    1382:	ef 92       	push	r14
    1384:	ff 92       	push	r15
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	ca 1b       	sub	r28, r26
    1394:	db 0b       	sbc	r29, r27
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	09 94       	ijmp

0000139c <__epilogue_restores__>:
    139c:	2a 88       	ldd	r2, Y+18	; 0x12
    139e:	39 88       	ldd	r3, Y+17	; 0x11
    13a0:	48 88       	ldd	r4, Y+16	; 0x10
    13a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    13a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    13aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    13ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    13ae:	b9 84       	ldd	r11, Y+9	; 0x09
    13b0:	c8 84       	ldd	r12, Y+8	; 0x08
    13b2:	df 80       	ldd	r13, Y+7	; 0x07
    13b4:	ee 80       	ldd	r14, Y+6	; 0x06
    13b6:	fd 80       	ldd	r15, Y+5	; 0x05
    13b8:	0c 81       	ldd	r16, Y+4	; 0x04
    13ba:	1b 81       	ldd	r17, Y+3	; 0x03
    13bc:	aa 81       	ldd	r26, Y+2	; 0x02
    13be:	b9 81       	ldd	r27, Y+1	; 0x01
    13c0:	ce 0f       	add	r28, r30
    13c2:	d1 1d       	adc	r29, r1
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	ed 01       	movw	r28, r26
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
