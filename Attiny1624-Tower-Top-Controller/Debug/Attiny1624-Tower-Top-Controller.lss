
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000011b9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  00008fca  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  000011b9  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000170  00000000  00000000  00001258  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003793  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000236b  00000000  00000000  00004b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eff  00000000  00000000  00006ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a4  00000000  00000000  00007dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001be5  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006fd  00000000  00000000  00009c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  0000a34e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 31       	cpi	r26, 0x13	; 19
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  98:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ac 07 	call	0xf58	; 0xf58 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 ac 07 	call	0xf58	; 0xf58 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
  b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6f99>
  b8:	80 fd       	sbrc	r24, 0
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <CLOCK_INHF_clock_init+0x14>
  bc:	08 95       	ret

000000be <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
  c2:	8b 01       	movw	r16, r22
  c4:	9c 01       	movw	r18, r24
  c6:	0f 2e       	mov	r0, r31
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	fa 95       	dec	r31
  d4:	d1 f7       	brne	.-12     	; 0xca <crc6_mt6701_lookup+0xc>
  d6:	f0 2d       	mov	r31, r0
  d8:	0f 73       	andi	r16, 0x3F	; 63
  da:	11 27       	eor	r17, r17
  dc:	22 27       	eor	r18, r18
  de:	33 27       	eor	r19, r19
  e0:	f8 01       	movw	r30, r16
  e2:	e6 53       	subi	r30, 0x36	; 54
  e4:	ff 46       	sbci	r31, 0x6F	; 111
  e6:	40 81       	ld	r20, Z
  e8:	8b 01       	movw	r16, r22
  ea:	9c 01       	movw	r18, r24
  ec:	68 94       	set
  ee:	15 f8       	bld	r1, 5
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	17 95       	ror	r17
  f6:	07 95       	ror	r16
  f8:	16 94       	lsr	r1
  fa:	d1 f7       	brne	.-12     	; 0xf0 <crc6_mt6701_lookup+0x32>
  fc:	0f 73       	andi	r16, 0x3F	; 63
  fe:	11 27       	eor	r17, r17
 100:	22 27       	eor	r18, r18
 102:	33 27       	eor	r19, r19
 104:	04 27       	eor	r16, r20
 106:	f8 01       	movw	r30, r16
 108:	e6 53       	subi	r30, 0x36	; 54
 10a:	ff 46       	sbci	r31, 0x6F	; 111
 10c:	20 81       	ld	r18, Z
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	99 27       	eor	r25, r25
 116:	aa 27       	eor	r26, r26
 118:	bb 27       	eor	r27, r27
 11a:	82 27       	eor	r24, r18
 11c:	fc 01       	movw	r30, r24
 11e:	e6 53       	subi	r30, 0x36	; 54
 120:	ff 46       	sbci	r31, 0x6F	; 111
}
 122:	80 81       	ld	r24, Z
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
 12a:	cf 93       	push	r28
 12c:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
 136:	c8 2f       	mov	r28, r24
 138:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	68 94       	set
 140:	15 f8       	bld	r1, 5
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	77 95       	ror	r23
 148:	67 95       	ror	r22
 14a:	16 94       	lsr	r1
 14c:	d1 f7       	brne	.-12     	; 0x142 <MT6701CRC+0x18>
 14e:	60 83       	st	Z, r22
 150:	71 83       	std	Z+1, r23	; 0x01
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	c8 13       	cpse	r28, r24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <MT6701CRC+0x38>
 160:	90 e0       	ldi	r25, 0x00	; 0
}
 162:	89 2f       	mov	r24, r25
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
 168:	2f 92       	push	r2
 16a:	3f 92       	push	r3
 16c:	4f 92       	push	r4
 16e:	5f 92       	push	r5
 170:	6f 92       	push	r6
 172:	7f 92       	push	r7
 174:	8f 92       	push	r8
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2b 97       	sbiw	r28, 0x0b	; 11
 192:	cd bf       	out	0x3d, r28	; 61
 194:	de bf       	out	0x3e, r29	; 62
 196:	c2 2e       	mov	r12, r18
 198:	b3 2e       	mov	r11, r19
 19a:	a4 2e       	mov	r10, r20
 19c:	95 2e       	mov	r9, r21
 19e:	86 2e       	mov	r8, r22
 1a0:	77 2e       	mov	r7, r23
 1a2:	68 2e       	mov	r6, r24
 1a4:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
 1a6:	f2 2e       	mov	r15, r18
 1a8:	03 2f       	mov	r16, r19
 1aa:	14 2f       	mov	r17, r20
 1ac:	5a 87       	std	Y+10, r21	; 0x0a
 1ae:	69 83       	std	Y+1, r22	; 0x01
 1b0:	b7 2f       	mov	r27, r23
 1b2:	d8 2e       	mov	r13, r24
 1b4:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <crc8_cdma2000+0x7c>
        length++;
 1bc:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
 1be:	2f 2d       	mov	r18, r15
 1c0:	30 2f       	mov	r19, r16
 1c2:	41 2f       	mov	r20, r17
 1c4:	5a 85       	ldd	r21, Y+10	; 0x0a
 1c6:	69 81       	ldd	r22, Y+1	; 0x01
 1c8:	7b 2f       	mov	r23, r27
 1ca:	8d 2d       	mov	r24, r13
 1cc:	9e 2d       	mov	r25, r14
 1ce:	08 e0       	ldi	r16, 0x08	; 8
 1d0:	0e 94 c7 04 	call	0x98e	; 0x98e <__lshrdi3>
 1d4:	f2 2e       	mov	r15, r18
 1d6:	03 2f       	mov	r16, r19
 1d8:	14 2f       	mov	r17, r20
 1da:	5a 87       	std	Y+10, r21	; 0x0a
 1dc:	69 83       	std	Y+1, r22	; 0x01
 1de:	b7 2f       	mov	r27, r23
 1e0:	d8 2e       	mov	r13, r24
 1e2:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
 1e4:	2f 2d       	mov	r18, r15
 1e6:	30 2f       	mov	r19, r16
 1e8:	41 2f       	mov	r20, r17
 1ea:	5a 85       	ldd	r21, Y+10	; 0x0a
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	7b 2f       	mov	r23, r27
 1f0:	8d 2d       	mov	r24, r13
 1f2:	9e 2d       	mov	r25, r14
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__cmpdi2_s8>
 1fa:	01 f7       	brne	.-64     	; 0x1bc <crc8_cdma2000+0x54>
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	8a 87       	std	Y+10, r24	; 0x0a
 200:	cb 86       	std	Y+11, r12	; 0x0b
 202:	b9 82       	std	Y+1, r11	; 0x01
 204:	4a 2c       	mov	r4, r10
 206:	39 2c       	mov	r3, r9
 208:	28 2c       	mov	r2, r8
 20a:	1a c0       	rjmp	.+52     	; 0x240 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
 20c:	8d 01       	movw	r16, r26
 20e:	00 0f       	add	r16, r16
 210:	11 1f       	adc	r17, r17
 212:	00 0f       	add	r16, r16
 214:	11 1f       	adc	r17, r17
 216:	00 0f       	add	r16, r16
 218:	11 1f       	adc	r17, r17
 21a:	2b 85       	ldd	r18, Y+11	; 0x0b
 21c:	39 81       	ldd	r19, Y+1	; 0x01
 21e:	44 2d       	mov	r20, r4
 220:	53 2d       	mov	r21, r3
 222:	62 2d       	mov	r22, r2
 224:	77 2d       	mov	r23, r7
 226:	86 2d       	mov	r24, r6
 228:	95 2d       	mov	r25, r5
 22a:	0e 94 c7 04 	call	0x98e	; 0x98e <__lshrdi3>
 22e:	8a 84       	ldd	r8, Y+10	; 0x0a
 230:	82 26       	eor	r8, r18
 232:	91 2c       	mov	r9, r1
 234:	f4 01       	movw	r30, r8
 236:	e6 53       	subi	r30, 0x36	; 54
 238:	f0 47       	sbci	r31, 0x70	; 112
 23a:	80 81       	ld	r24, Z
 23c:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
 23e:	fd 01       	movw	r30, r26
 240:	df 01       	movw	r26, r30
 242:	11 97       	sbiw	r26, 0x01	; 1
 244:	ef 2b       	or	r30, r31
 246:	11 f7       	brne	.-60     	; 0x20c <crc8_cdma2000+0xa4>
 248:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
 24a:	2b 96       	adiw	r28, 0x0b	; 11
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	de bf       	out	0x3e, r29	; 62
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	9f 90       	pop	r9
 266:	8f 90       	pop	r8
 268:	7f 90       	pop	r7
 26a:	6f 90       	pop	r6
 26c:	5f 90       	pop	r5
 26e:	4f 90       	pop	r4
 270:	3f 90       	pop	r3
 272:	2f 90       	pop	r2
 274:	08 95       	ret

00000276 <GPIO_init>:
 * - PB2 as TX for dummy data sending with pull-up enabled.
 * - PB3 as RX (MISO, MT6701 DO) with pull-up enabled.
 * - PA7 as SS (MT6701 CSN) output, initially set high.
 */
void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
 276:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f7518>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
 27a:	e0 e2       	ldi	r30, 0x20	; 32
 27c:	f4 e0       	ldi	r31, 0x04	; 4
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
 286:	99 e0       	ldi	r25, 0x09	; 9
 288:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
 28a:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
 28c:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f4 e0       	ldi	r31, 0x04	; 4
 292:	92 ec       	ldi	r25, 0xC2	; 194
 294:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
 296:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
 29c:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
 2a2:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
 2a4:	95 8b       	std	Z+21, r25	; 0x15
 2a6:	08 95       	ret

000002a8 <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
 2a8:	0e 94 50 00 	call	0xa0	; 0xa0 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
 2ac:	0e 94 3b 01 	call	0x276	; 0x276 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
 2b0:	0e 94 8b 02 	call	0x516	; 0x516 <USART0_init>
	USART1_init();
 2b4:	0e 94 b4 02 	call	0x568	; 0x568 <USART1_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MT6701_SSI_Angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f e7       	ldi	r18, 0x7F	; 127
 2c0:	4a e1       	ldi	r20, 0x1A	; 26
 2c2:	56 e0       	ldi	r21, 0x06	; 6
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	40 40       	sbci	r20, 0x00	; 0
 2c8:	50 40       	sbci	r21, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0x1c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x26>
 2ce:	00 00       	nop
        _delay_ms(100); ///< Wait 100ms before the next read
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MT6701_SSI_Angle>

		uint8_t y = YEndSwitches();
 2d6:	0e 94 02 03 	call	0x604	; 0x604 <YEndSwitches>
 2da:	b8 2e       	mov	r11, r24
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadADC.SCU << 12) | ((uint16_t)ReadADC.SCI << 4) | y;
 2dc:	0f 2e       	mov	r0, r31
 2de:	fa e0       	ldi	r31, 0x0A	; 10
 2e0:	ef 2e       	mov	r14, r31
 2e2:	f8 e3       	ldi	r31, 0x38	; 56
 2e4:	ff 2e       	mov	r15, r31
 2e6:	f0 2d       	mov	r31, r0
 2e8:	d7 01       	movw	r26, r14
 2ea:	8d 91       	ld	r24, X+
 2ec:	9c 91       	ld	r25, X
 2ee:	28 2f       	mov	r18, r24
 2f0:	39 2f       	mov	r19, r25
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 e2       	ldi	r16, 0x28	; 40
 300:	0e 94 ac 04 	call	0x958	; 0x958 <__ashldi3>
 304:	72 2e       	mov	r7, r18
 306:	e3 2f       	mov	r30, r19
 308:	84 2e       	mov	r8, r20
 30a:	95 2e       	mov	r9, r21
 30c:	16 2f       	mov	r17, r22
 30e:	67 2e       	mov	r6, r23
 310:	d8 2f       	mov	r29, r24
 312:	c9 2f       	mov	r28, r25
 314:	0f 2e       	mov	r0, r31
 316:	f4 e0       	ldi	r31, 0x04	; 4
 318:	cf 2e       	mov	r12, r31
 31a:	f8 e3       	ldi	r31, 0x38	; 56
 31c:	df 2e       	mov	r13, r31
 31e:	f0 2d       	mov	r31, r0
 320:	d6 01       	movw	r26, r12
 322:	8d 91       	ld	r24, X+
 324:	9c 91       	ld	r25, X
 326:	ac 01       	movw	r20, r24
 328:	24 2f       	mov	r18, r20
 32a:	35 2f       	mov	r19, r21
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 e1       	ldi	r16, 0x18	; 24
 33a:	0e 94 ac 04 	call	0x958	; 0x958 <__ashldi3>
 33e:	f2 2f       	mov	r31, r18
 340:	e3 2b       	or	r30, r19
 342:	84 2a       	or	r8, r20
 344:	95 2a       	or	r9, r21
 346:	a1 2e       	mov	r10, r17
 348:	a6 2a       	or	r10, r22
 34a:	b6 2d       	mov	r27, r6
 34c:	b7 2b       	or	r27, r23
 34e:	8d 2b       	or	r24, r29
 350:	9c 2b       	or	r25, r28
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d8 e3       	ldi	r29, 0x38	; 56
 356:	08 81       	ld	r16, Y
 358:	19 81       	ldd	r17, Y+1	; 0x01
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	0f 2e       	mov	r0, r31
 360:	fc e0       	ldi	r31, 0x0C	; 12
 362:	00 0f       	add	r16, r16
 364:	11 1f       	adc	r17, r17
 366:	22 1f       	adc	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	fa 95       	dec	r31
 36c:	d1 f7       	brne	.-12     	; 0x362 <main+0xba>
 36e:	f0 2d       	mov	r31, r0
 370:	f7 29       	or	r31, r7
 372:	e1 2b       	or	r30, r17
 374:	82 2a       	or	r8, r18
 376:	93 2a       	or	r9, r19
 378:	0a 81       	ldd	r16, Y+2	; 0x02
 37a:	1b 81       	ldd	r17, Y+3	; 0x03
 37c:	02 95       	swap	r16
 37e:	12 95       	swap	r17
 380:	10 7f       	andi	r17, 0xF0	; 240
 382:	10 27       	eor	r17, r16
 384:	00 7f       	andi	r16, 0xF0	; 240
 386:	10 27       	eor	r17, r16
 388:	f0 2b       	or	r31, r16
 38a:	31 2f       	mov	r19, r17
 38c:	3e 2b       	or	r19, r30
 38e:	2f 2f       	mov	r18, r31
 390:	2b 29       	or	r18, r11
 392:	ef e7       	ldi	r30, 0x7F	; 127
 394:	fa e1       	ldi	r31, 0x1A	; 26
 396:	46 e0       	ldi	r20, 0x06	; 6
 398:	e1 50       	subi	r30, 0x01	; 1
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	40 40       	sbci	r20, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0xf0>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0xfa>
 3a2:	00 00       	nop
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadADC.SCU,           ///< Voltage (3 digits)
		        (uint8_t)ReadADC.SCI,            ///< Current (2 digits)
		        (uint8_t)y,            ///< End switch status (1 digit)
		        (uint8_t)crc8_cdma2000(combined)); ///< CRC value (1 byte)
 3a4:	48 2d       	mov	r20, r8
 3a6:	59 2d       	mov	r21, r9
 3a8:	6a 2d       	mov	r22, r10
 3aa:	7b 2f       	mov	r23, r27
 3ac:	0e 94 b4 00 	call	0x168	; 0x168 <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadADC.SCU,           ///< Voltage (3 digits)
		        (uint8_t)ReadADC.SCI,            ///< Current (2 digits)
 3b0:	2a 81       	ldd	r18, Y+2	; 0x02
 3b2:	3b 81       	ldd	r19, Y+3	; 0x03
        _delay_ms(100); ///< Wait 100ms before the next read
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadADC.SCU,           ///< Voltage (3 digits)
 3b4:	e8 81       	ld	r30, Y
 3b6:	f9 81       	ldd	r31, Y+1	; 0x01

        _delay_ms(100); ///< Wait 100ms before the next read
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
 3b8:	d6 01       	movw	r26, r12
 3ba:	6c 91       	ld	r22, X
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	7c 91       	ld	r23, X
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadADC.SCU << 12) | ((uint16_t)ReadADC.SCI << 4) | y;

        _delay_ms(100); ///< Wait 100ms before the next read
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
 3c0:	d7 01       	movw	r26, r14
 3c2:	4c 91       	ld	r20, X
 3c4:	11 96       	adiw	r26, 0x01	; 1
 3c6:	5c 91       	ld	r21, X
		uint8_t y = YEndSwitches();
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadADC.SCU << 12) | ((uint16_t)ReadADC.SCI << 4) | y;

        _delay_ms(100); ///< Wait 100ms before the next read
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
 3c8:	1f 92       	push	r1
 3ca:	8f 93       	push	r24
 3cc:	1f 92       	push	r1
 3ce:	bf 92       	push	r11
 3d0:	c9 01       	movw	r24, r18
 3d2:	99 27       	eor	r25, r25
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	ff 93       	push	r31
 3da:	ef 93       	push	r30
 3dc:	7f 93       	push	r23
 3de:	6f 93       	push	r22
 3e0:	5f 93       	push	r21
 3e2:	4f 93       	push	r20
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	91 e9       	ldi	r25, 0x91	; 145
 3e8:	9f 93       	push	r25
 3ea:	8f 93       	push	r24
 3ec:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <USART1_printf>
 3f0:	ed b7       	in	r30, 0x3d	; 61
 3f2:	fe b7       	in	r31, 0x3e	; 62
 3f4:	3e 96       	adiw	r30, 0x0e	; 14
 3f6:	ed bf       	out	0x3d, r30	; 61
 3f8:	fe bf       	out	0x3e, r31	; 62
 3fa:	5e cf       	rjmp	.-324    	; 0x2b8 <main+0x10>

000003fc <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
 40e:	19 82       	std	Y+1, r1	; 0x01
 410:	1a 82       	std	Y+2, r1	; 0x02
 412:	1b 82       	std	Y+3, r1	; 0x03
 414:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
 416:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f733c>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 41a:	10 e0       	ldi	r17, 0x00	; 0
 41c:	24 c0       	rjmp	.+72     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
 41e:	8f e6       	ldi	r24, 0x6F	; 111
 420:	0e 94 96 02 	call	0x52c	; 0x52c <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
 424:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f773a>
 428:	86 ff       	sbrs	r24, 6
 42a:	fc cf       	rjmp	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	f8 e0       	ldi	r31, 0x08	; 8
 430:	84 81       	ldd	r24, Z+4	; 0x04
 432:	80 64       	ori	r24, 0x40	; 64
 434:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	ab 81       	ldd	r26, Y+3	; 0x03
 43c:	bc 81       	ldd	r27, Y+4	; 0x04
 43e:	ba 2f       	mov	r27, r26
 440:	a9 2f       	mov	r26, r25
 442:	98 2f       	mov	r25, r24
 444:	88 27       	eor	r24, r24
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	9a 83       	std	Y+2, r25	; 0x02
 44a:	ab 83       	std	Y+3, r26	; 0x03
 44c:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
 44e:	0e 94 9d 02 	call	0x53a	; 0x53a <USART0_readChar>
 452:	49 81       	ldd	r20, Y+1	; 0x01
 454:	5a 81       	ldd	r21, Y+2	; 0x02
 456:	6b 81       	ldd	r22, Y+3	; 0x03
 458:	7c 81       	ldd	r23, Y+4	; 0x04
 45a:	48 2b       	or	r20, r24
 45c:	49 83       	std	Y+1, r20	; 0x01
 45e:	5a 83       	std	Y+2, r21	; 0x02
 460:	6b 83       	std	Y+3, r22	; 0x03
 462:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 464:	1f 5f       	subi	r17, 0xFF	; 255
 466:	13 30       	cpi	r17, 0x03	; 3
 468:	d0 f2       	brcs	.-76     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
 46a:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f733b>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
 46e:	00 38       	cpi	r16, 0x80	; 128
 470:	19 f4       	brne	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 472:	0a e0       	ldi	r16, 0x0A	; 10
 474:	18 e3       	ldi	r17, 0x38	; 56
 476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	04 e0       	ldi	r16, 0x04	; 4
 47a:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	0e 94 95 00 	call	0x12a	; 0x12a <MT6701CRC>
 484:	f8 01       	movw	r30, r16
 486:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	83 70       	andi	r24, 0x03	; 3
 48c:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	ab 81       	ldd	r26, Y+3	; 0x03
 494:	bc 81       	ldd	r27, Y+4	; 0x04
 496:	b6 95       	lsr	r27
 498:	a7 95       	ror	r26
 49a:	97 95       	ror	r25
 49c:	87 95       	ror	r24
 49e:	b6 95       	lsr	r27
 4a0:	a7 95       	ror	r26
 4a2:	97 95       	ror	r25
 4a4:	87 95       	ror	r24
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	ab 81       	ldd	r26, Y+3	; 0x03
 4b0:	bc 81       	ldd	r27, Y+4	; 0x04
 4b2:	ac 01       	movw	r20, r24
 4b4:	bd 01       	movw	r22, r26
 4b6:	68 94       	set
 4b8:	12 f8       	bld	r1, 2
 4ba:	76 95       	lsr	r23
 4bc:	67 95       	ror	r22
 4be:	57 95       	ror	r21
 4c0:	47 95       	ror	r20
 4c2:	16 94       	lsr	r1
 4c4:	d1 f7       	brne	.-12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c6:	24 2f       	mov	r18, r20
 4c8:	21 70       	andi	r18, 0x01	; 1
 4ca:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
 4cc:	bc 01       	movw	r22, r24
 4ce:	cd 01       	movw	r24, r26
 4d0:	68 94       	set
 4d2:	13 f8       	bld	r1, 3
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	16 94       	lsr	r1
 4de:	d1 f7       	brne	.-12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4e0:	0e 94 1e 04 	call	0x83c	; 0x83c <__floatunsisf>
 4e4:	23 e5       	ldi	r18, 0x53	; 83
 4e6:	34 e0       	ldi	r19, 0x04	; 4
 4e8:	49 ee       	ldi	r20, 0xE9	; 233
 4ea:	5e e3       	ldi	r21, 0x3E	; 62
 4ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__divsf3>
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	5f e3       	ldi	r21, 0x3F	; 63
 4f8:	0e 94 11 03 	call	0x622	; 0x622 <__addsf3>
 4fc:	0e 94 ef 03 	call	0x7de	; 0x7de <__fixunssfsi>
 500:	f8 01       	movw	r30, r16
 502:	60 83       	st	Z, r22
 504:	71 83       	std	Z+1, r23	; 0x01
 506:	24 96       	adiw	r28, 0x04	; 4
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	08 95       	ret

00000516 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
 516:	e0 e0       	ldi	r30, 0x00	; 0
 518:	f8 e0       	ldi	r31, 0x08	; 8
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	95 e0       	ldi	r25, 0x05	; 5
 51e:	80 87       	std	Z+8, r24	; 0x08
 520:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
 526:	82 ec       	ldi	r24, 0xC2	; 194
 528:	87 83       	std	Z+7, r24	; 0x07
 52a:	08 95       	ret

0000052c <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
 52c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f773a>
 530:	95 ff       	sbrs	r25, 5
 532:	fc cf       	rjmp	.-8      	; 0x52c <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
 534:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f7738>
 538:	08 95       	ret

0000053a <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f773a>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
 540:	80 e4       	ldi	r24, 0x40	; 64
 542:	9c e9       	ldi	r25, 0x9C	; 156
 544:	a0 e0       	ldi	r26, 0x00	; 0
 546:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 548:	08 c0       	rjmp	.+16     	; 0x55a <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	a1 09       	sbc	r26, r1
 54e:	b1 09       	sbc	r27, r1
 550:	21 f4       	brne	.+8      	; 0x55a <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
 558:	04 c0       	rjmp	.+8      	; 0x562 <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 55a:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f773a>
 55e:	22 23       	and	r18, r18
 560:	a4 f7       	brge	.-24     	; 0x54a <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
 562:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f7736>
}
 566:	08 95       	ret

00000568 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
 568:	e0 e2       	ldi	r30, 0x20	; 32
 56a:	f8 e0       	ldi	r31, 0x08	; 8
 56c:	80 e4       	ldi	r24, 0x40	; 64
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	80 87       	std	Z+8, r24	; 0x08
 572:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
 574:	82 e4       	ldi	r24, 0x42	; 66
 576:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	87 83       	std	Z+7, r24	; 0x07
 57c:	08 95       	ret

0000057e <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
 57e:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f775a>
 582:	95 ff       	sbrs	r25, 5
 584:	fc cf       	rjmp	.-8      	; 0x57e <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
 586:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f7758>
 58a:	08 95       	ret

0000058c <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
 59c:	f8 01       	movw	r30, r16
 59e:	ec 0f       	add	r30, r28
 5a0:	fd 1f       	adc	r31, r29
 5a2:	80 81       	ld	r24, Z
 5a4:	0e 94 bf 02 	call	0x57e	; 0x57e <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	f8 01       	movw	r30, r16
 5ac:	01 90       	ld	r0, Z+
 5ae:	00 20       	and	r0, r0
 5b0:	e9 f7       	brne	.-6      	; 0x5ac <USART1_sendString+0x20>
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	e0 1b       	sub	r30, r16
 5b6:	f1 0b       	sbc	r31, r17
 5b8:	ce 17       	cp	r28, r30
 5ba:	df 07       	cpc	r29, r31
 5bc:	78 f3       	brcs	.-34     	; 0x59c <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	08 95       	ret

000005c8 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	6e 97       	sbiw	r28, 0x1e	; 30
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	9e 01       	movw	r18, r28
 5d8:	2d 5d       	subi	r18, 0xDD	; 221
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	f9 01       	movw	r30, r18
 5de:	41 91       	ld	r20, Z+
 5e0:	51 91       	ld	r21, Z+
 5e2:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
 5e4:	6e e1       	ldi	r22, 0x1E	; 30
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	0e 94 ef 04 	call	0x9de	; 0x9de <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	0e 94 c6 02 	call	0x58c	; 0x58c <USART1_sendString>
 5f8:	6e 96       	adiw	r28, 0x1e	; 30
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
 604:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f735e>
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	89 27       	eor	r24, r25
 60c:	81 70       	andi	r24, 0x01	; 1
 60e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f733e>
 612:	92 fd       	sbrc	r25, 2
 614:	02 c0       	rjmp	.+4      	; 0x61a <YEndSwitches+0x16>
 616:	92 e0       	ldi	r25, 0x02	; 2
 618:	01 c0       	rjmp	.+2      	; 0x61c <YEndSwitches+0x18>
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	89 2b       	or	r24, r25
 61e:	08 95       	ret

00000620 <__subsf3>:
 620:	50 58       	subi	r21, 0x80	; 128

00000622 <__addsf3>:
 622:	bb 27       	eor	r27, r27
 624:	aa 27       	eor	r26, r26
 626:	0e 94 28 03 	call	0x650	; 0x650 <__addsf3x>
 62a:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_round>
 62e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_pscA>
 632:	38 f0       	brcs	.+14     	; 0x642 <__addsf3+0x20>
 634:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_pscB>
 638:	20 f0       	brcs	.+8      	; 0x642 <__addsf3+0x20>
 63a:	39 f4       	brne	.+14     	; 0x64a <__addsf3+0x28>
 63c:	9f 3f       	cpi	r25, 0xFF	; 255
 63e:	19 f4       	brne	.+6      	; 0x646 <__addsf3+0x24>
 640:	26 f4       	brtc	.+8      	; 0x64a <__addsf3+0x28>
 642:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_nan>
 646:	0e f4       	brtc	.+2      	; 0x64a <__addsf3+0x28>
 648:	e0 95       	com	r30
 64a:	e7 fb       	bst	r30, 7
 64c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_inf>

00000650 <__addsf3x>:
 650:	e9 2f       	mov	r30, r25
 652:	0e 94 83 04 	call	0x906	; 0x906 <__fp_split3>
 656:	58 f3       	brcs	.-42     	; 0x62e <__addsf3+0xc>
 658:	ba 17       	cp	r27, r26
 65a:	62 07       	cpc	r22, r18
 65c:	73 07       	cpc	r23, r19
 65e:	84 07       	cpc	r24, r20
 660:	95 07       	cpc	r25, r21
 662:	20 f0       	brcs	.+8      	; 0x66c <__addsf3x+0x1c>
 664:	79 f4       	brne	.+30     	; 0x684 <__addsf3x+0x34>
 666:	a6 f5       	brtc	.+104    	; 0x6d0 <__addsf3x+0x80>
 668:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_zero>
 66c:	0e f4       	brtc	.+2      	; 0x670 <__addsf3x+0x20>
 66e:	e0 95       	com	r30
 670:	0b 2e       	mov	r0, r27
 672:	ba 2f       	mov	r27, r26
 674:	a0 2d       	mov	r26, r0
 676:	0b 01       	movw	r0, r22
 678:	b9 01       	movw	r22, r18
 67a:	90 01       	movw	r18, r0
 67c:	0c 01       	movw	r0, r24
 67e:	ca 01       	movw	r24, r20
 680:	a0 01       	movw	r20, r0
 682:	11 24       	eor	r1, r1
 684:	ff 27       	eor	r31, r31
 686:	59 1b       	sub	r21, r25
 688:	99 f0       	breq	.+38     	; 0x6b0 <__addsf3x+0x60>
 68a:	59 3f       	cpi	r21, 0xF9	; 249
 68c:	50 f4       	brcc	.+20     	; 0x6a2 <__addsf3x+0x52>
 68e:	50 3e       	cpi	r21, 0xE0	; 224
 690:	68 f1       	brcs	.+90     	; 0x6ec <__addsf3x+0x9c>
 692:	1a 16       	cp	r1, r26
 694:	f0 40       	sbci	r31, 0x00	; 0
 696:	a2 2f       	mov	r26, r18
 698:	23 2f       	mov	r18, r19
 69a:	34 2f       	mov	r19, r20
 69c:	44 27       	eor	r20, r20
 69e:	58 5f       	subi	r21, 0xF8	; 248
 6a0:	f3 cf       	rjmp	.-26     	; 0x688 <__addsf3x+0x38>
 6a2:	46 95       	lsr	r20
 6a4:	37 95       	ror	r19
 6a6:	27 95       	ror	r18
 6a8:	a7 95       	ror	r26
 6aa:	f0 40       	sbci	r31, 0x00	; 0
 6ac:	53 95       	inc	r21
 6ae:	c9 f7       	brne	.-14     	; 0x6a2 <__addsf3x+0x52>
 6b0:	7e f4       	brtc	.+30     	; 0x6d0 <__addsf3x+0x80>
 6b2:	1f 16       	cp	r1, r31
 6b4:	ba 0b       	sbc	r27, r26
 6b6:	62 0b       	sbc	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	ba f0       	brmi	.+46     	; 0x6ec <__addsf3x+0x9c>
 6be:	91 50       	subi	r25, 0x01	; 1
 6c0:	a1 f0       	breq	.+40     	; 0x6ea <__addsf3x+0x9a>
 6c2:	ff 0f       	add	r31, r31
 6c4:	bb 1f       	adc	r27, r27
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	c2 f7       	brpl	.-16     	; 0x6be <__addsf3x+0x6e>
 6ce:	0e c0       	rjmp	.+28     	; 0x6ec <__addsf3x+0x9c>
 6d0:	ba 0f       	add	r27, r26
 6d2:	62 1f       	adc	r22, r18
 6d4:	73 1f       	adc	r23, r19
 6d6:	84 1f       	adc	r24, r20
 6d8:	48 f4       	brcc	.+18     	; 0x6ec <__addsf3x+0x9c>
 6da:	87 95       	ror	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b7 95       	ror	r27
 6e2:	f7 95       	ror	r31
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__addsf3x+0x9a>
 6e8:	b0 cf       	rjmp	.-160    	; 0x64a <__addsf3+0x28>
 6ea:	93 95       	inc	r25
 6ec:	88 0f       	add	r24, r24
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__addsf3x+0xa2>
 6f0:	99 27       	eor	r25, r25
 6f2:	ee 0f       	add	r30, r30
 6f4:	97 95       	ror	r25
 6f6:	87 95       	ror	r24
 6f8:	08 95       	ret

000006fa <__divsf3>:
 6fa:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3x>
 6fe:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_round>
 702:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_pscB>
 706:	58 f0       	brcs	.+22     	; 0x71e <__divsf3+0x24>
 708:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_pscA>
 70c:	40 f0       	brcs	.+16     	; 0x71e <__divsf3+0x24>
 70e:	29 f4       	brne	.+10     	; 0x71a <__divsf3+0x20>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	29 f0       	breq	.+10     	; 0x71e <__divsf3+0x24>
 714:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_inf>
 718:	51 11       	cpse	r21, r1
 71a:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_szero>
 71e:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_nan>

00000722 <__divsf3x>:
 722:	0e 94 83 04 	call	0x906	; 0x906 <__fp_split3>
 726:	68 f3       	brcs	.-38     	; 0x702 <__divsf3+0x8>

00000728 <__divsf3_pse>:
 728:	99 23       	and	r25, r25
 72a:	b1 f3       	breq	.-20     	; 0x718 <__divsf3+0x1e>
 72c:	55 23       	and	r21, r21
 72e:	91 f3       	breq	.-28     	; 0x714 <__divsf3+0x1a>
 730:	95 1b       	sub	r25, r21
 732:	55 0b       	sbc	r21, r21
 734:	bb 27       	eor	r27, r27
 736:	aa 27       	eor	r26, r26
 738:	62 17       	cp	r22, r18
 73a:	73 07       	cpc	r23, r19
 73c:	84 07       	cpc	r24, r20
 73e:	38 f0       	brcs	.+14     	; 0x74e <__divsf3_pse+0x26>
 740:	9f 5f       	subi	r25, 0xFF	; 255
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	44 1f       	adc	r20, r20
 74a:	aa 1f       	adc	r26, r26
 74c:	a9 f3       	breq	.-22     	; 0x738 <__divsf3_pse+0x10>
 74e:	35 d0       	rcall	.+106    	; 0x7ba <__divsf3_pse+0x92>
 750:	0e 2e       	mov	r0, r30
 752:	3a f0       	brmi	.+14     	; 0x762 <__divsf3_pse+0x3a>
 754:	e0 e8       	ldi	r30, 0x80	; 128
 756:	32 d0       	rcall	.+100    	; 0x7bc <__divsf3_pse+0x94>
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	50 40       	sbci	r21, 0x00	; 0
 75c:	e6 95       	lsr	r30
 75e:	00 1c       	adc	r0, r0
 760:	ca f7       	brpl	.-14     	; 0x754 <__divsf3_pse+0x2c>
 762:	2b d0       	rcall	.+86     	; 0x7ba <__divsf3_pse+0x92>
 764:	fe 2f       	mov	r31, r30
 766:	29 d0       	rcall	.+82     	; 0x7ba <__divsf3_pse+0x92>
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	bb 1f       	adc	r27, r27
 770:	26 17       	cp	r18, r22
 772:	37 07       	cpc	r19, r23
 774:	48 07       	cpc	r20, r24
 776:	ab 07       	cpc	r26, r27
 778:	b0 e8       	ldi	r27, 0x80	; 128
 77a:	09 f0       	breq	.+2      	; 0x77e <__divsf3_pse+0x56>
 77c:	bb 0b       	sbc	r27, r27
 77e:	80 2d       	mov	r24, r0
 780:	bf 01       	movw	r22, r30
 782:	ff 27       	eor	r31, r31
 784:	93 58       	subi	r25, 0x83	; 131
 786:	5f 4f       	sbci	r21, 0xFF	; 255
 788:	3a f0       	brmi	.+14     	; 0x798 <__divsf3_pse+0x70>
 78a:	9e 3f       	cpi	r25, 0xFE	; 254
 78c:	51 05       	cpc	r21, r1
 78e:	78 f0       	brcs	.+30     	; 0x7ae <__divsf3_pse+0x86>
 790:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_inf>
 794:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	e4 f3       	brlt	.-8      	; 0x794 <__divsf3_pse+0x6c>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	d4 f3       	brlt	.-12     	; 0x794 <__divsf3_pse+0x6c>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__divsf3_pse+0x78>
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret
 7ba:	e1 e0       	ldi	r30, 0x01	; 1
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	bb 1f       	adc	r27, r27
 7c4:	62 17       	cp	r22, r18
 7c6:	73 07       	cpc	r23, r19
 7c8:	84 07       	cpc	r24, r20
 7ca:	ba 07       	cpc	r27, r26
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__divsf3_pse+0xae>
 7ce:	62 1b       	sub	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	ba 0b       	sbc	r27, r26
 7d6:	ee 1f       	adc	r30, r30
 7d8:	88 f7       	brcc	.-30     	; 0x7bc <__divsf3_pse+0x94>
 7da:	e0 95       	com	r30
 7dc:	08 95       	ret

000007de <__fixunssfsi>:
 7de:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_splitA>
 7e2:	88 f0       	brcs	.+34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e4:	9f 57       	subi	r25, 0x7F	; 127
 7e6:	98 f0       	brcs	.+38     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e8:	b9 2f       	mov	r27, r25
 7ea:	99 27       	eor	r25, r25
 7ec:	b7 51       	subi	r27, 0x17	; 23
 7ee:	b0 f0       	brcs	.+44     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7f0:	e1 f0       	breq	.+56     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	1a f0       	brmi	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fc:	ba 95       	dec	r27
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__fixunssfsi+0x14>
 800:	14 c0       	rjmp	.+40     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 802:	b1 30       	cpi	r27, 0x01	; 1
 804:	91 f0       	breq	.+36     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 806:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_zero>
 80a:	b1 e0       	ldi	r27, 0x01	; 1
 80c:	08 95       	ret
 80e:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_zero>
 812:	67 2f       	mov	r22, r23
 814:	78 2f       	mov	r23, r24
 816:	88 27       	eor	r24, r24
 818:	b8 5f       	subi	r27, 0xF8	; 248
 81a:	39 f0       	breq	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81c:	b9 3f       	cpi	r27, 0xF9	; 249
 81e:	cc f3       	brlt	.-14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b3 95       	inc	r27
 828:	d9 f7       	brne	.-10     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82a:	3e f4       	brtc	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	08 95       	ret

0000083c <__floatunsisf>:
 83c:	e8 94       	clt
 83e:	09 c0       	rjmp	.+18     	; 0x852 <__floatsisf+0x12>

00000840 <__floatsisf>:
 840:	97 fb       	bst	r25, 7
 842:	3e f4       	brtc	.+14     	; 0x852 <__floatsisf+0x12>
 844:	90 95       	com	r25
 846:	80 95       	com	r24
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	99 23       	and	r25, r25
 854:	a9 f0       	breq	.+42     	; 0x880 <__floatsisf+0x40>
 856:	f9 2f       	mov	r31, r25
 858:	96 e9       	ldi	r25, 0x96	; 150
 85a:	bb 27       	eor	r27, r27
 85c:	93 95       	inc	r25
 85e:	f6 95       	lsr	r31
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f1 11       	cpse	r31, r1
 86a:	f8 cf       	rjmp	.-16     	; 0x85c <__floatsisf+0x1c>
 86c:	fa f4       	brpl	.+62     	; 0x8ac <__floatsisf+0x6c>
 86e:	bb 0f       	add	r27, r27
 870:	11 f4       	brne	.+4      	; 0x876 <__floatsisf+0x36>
 872:	60 ff       	sbrs	r22, 0
 874:	1b c0       	rjmp	.+54     	; 0x8ac <__floatsisf+0x6c>
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <__floatsisf+0x6c>
 880:	88 23       	and	r24, r24
 882:	11 f0       	breq	.+4      	; 0x888 <__floatsisf+0x48>
 884:	96 e9       	ldi	r25, 0x96	; 150
 886:	11 c0       	rjmp	.+34     	; 0x8aa <__floatsisf+0x6a>
 888:	77 23       	and	r23, r23
 88a:	21 f0       	breq	.+8      	; 0x894 <__floatsisf+0x54>
 88c:	9e e8       	ldi	r25, 0x8E	; 142
 88e:	87 2f       	mov	r24, r23
 890:	76 2f       	mov	r23, r22
 892:	05 c0       	rjmp	.+10     	; 0x89e <__floatsisf+0x5e>
 894:	66 23       	and	r22, r22
 896:	71 f0       	breq	.+28     	; 0x8b4 <__floatsisf+0x74>
 898:	96 e8       	ldi	r25, 0x86	; 134
 89a:	86 2f       	mov	r24, r22
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	2a f0       	brmi	.+10     	; 0x8ac <__floatsisf+0x6c>
 8a2:	9a 95       	dec	r25
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	da f7       	brpl	.-10     	; 0x8a2 <__floatsisf+0x62>
 8ac:	88 0f       	add	r24, r24
 8ae:	96 95       	lsr	r25
 8b0:	87 95       	ror	r24
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__fp_inf>:
 8b6:	97 f9       	bld	r25, 7
 8b8:	9f 67       	ori	r25, 0x7F	; 127
 8ba:	80 e8       	ldi	r24, 0x80	; 128
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <__fp_nan>:
 8c2:	9f ef       	ldi	r25, 0xFF	; 255
 8c4:	80 ec       	ldi	r24, 0xC0	; 192
 8c6:	08 95       	ret

000008c8 <__fp_pscA>:
 8c8:	00 24       	eor	r0, r0
 8ca:	0a 94       	dec	r0
 8cc:	16 16       	cp	r1, r22
 8ce:	17 06       	cpc	r1, r23
 8d0:	18 06       	cpc	r1, r24
 8d2:	09 06       	cpc	r0, r25
 8d4:	08 95       	ret

000008d6 <__fp_pscB>:
 8d6:	00 24       	eor	r0, r0
 8d8:	0a 94       	dec	r0
 8da:	12 16       	cp	r1, r18
 8dc:	13 06       	cpc	r1, r19
 8de:	14 06       	cpc	r1, r20
 8e0:	05 06       	cpc	r0, r21
 8e2:	08 95       	ret

000008e4 <__fp_round>:
 8e4:	09 2e       	mov	r0, r25
 8e6:	03 94       	inc	r0
 8e8:	00 0c       	add	r0, r0
 8ea:	11 f4       	brne	.+4      	; 0x8f0 <__fp_round+0xc>
 8ec:	88 23       	and	r24, r24
 8ee:	52 f0       	brmi	.+20     	; 0x904 <__fp_round+0x20>
 8f0:	bb 0f       	add	r27, r27
 8f2:	40 f4       	brcc	.+16     	; 0x904 <__fp_round+0x20>
 8f4:	bf 2b       	or	r27, r31
 8f6:	11 f4       	brne	.+4      	; 0x8fc <__fp_round+0x18>
 8f8:	60 ff       	sbrs	r22, 0
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <__fp_round+0x20>
 8fc:	6f 5f       	subi	r22, 0xFF	; 255
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	08 95       	ret

00000906 <__fp_split3>:
 906:	57 fd       	sbrc	r21, 7
 908:	90 58       	subi	r25, 0x80	; 128
 90a:	44 0f       	add	r20, r20
 90c:	55 1f       	adc	r21, r21
 90e:	59 f0       	breq	.+22     	; 0x926 <__fp_splitA+0x10>
 910:	5f 3f       	cpi	r21, 0xFF	; 255
 912:	71 f0       	breq	.+28     	; 0x930 <__fp_splitA+0x1a>
 914:	47 95       	ror	r20

00000916 <__fp_splitA>:
 916:	88 0f       	add	r24, r24
 918:	97 fb       	bst	r25, 7
 91a:	99 1f       	adc	r25, r25
 91c:	61 f0       	breq	.+24     	; 0x936 <__fp_splitA+0x20>
 91e:	9f 3f       	cpi	r25, 0xFF	; 255
 920:	79 f0       	breq	.+30     	; 0x940 <__fp_splitA+0x2a>
 922:	87 95       	ror	r24
 924:	08 95       	ret
 926:	12 16       	cp	r1, r18
 928:	13 06       	cpc	r1, r19
 92a:	14 06       	cpc	r1, r20
 92c:	55 1f       	adc	r21, r21
 92e:	f2 cf       	rjmp	.-28     	; 0x914 <__fp_split3+0xe>
 930:	46 95       	lsr	r20
 932:	f1 df       	rcall	.-30     	; 0x916 <__fp_splitA>
 934:	08 c0       	rjmp	.+16     	; 0x946 <__fp_splitA+0x30>
 936:	16 16       	cp	r1, r22
 938:	17 06       	cpc	r1, r23
 93a:	18 06       	cpc	r1, r24
 93c:	99 1f       	adc	r25, r25
 93e:	f1 cf       	rjmp	.-30     	; 0x922 <__fp_splitA+0xc>
 940:	86 95       	lsr	r24
 942:	71 05       	cpc	r23, r1
 944:	61 05       	cpc	r22, r1
 946:	08 94       	sec
 948:	08 95       	ret

0000094a <__fp_zero>:
 94a:	e8 94       	clt

0000094c <__fp_szero>:
 94c:	bb 27       	eor	r27, r27
 94e:	66 27       	eor	r22, r22
 950:	77 27       	eor	r23, r23
 952:	cb 01       	movw	r24, r22
 954:	97 f9       	bld	r25, 7
 956:	08 95       	ret

00000958 <__ashldi3>:
 958:	0f 93       	push	r16
 95a:	08 30       	cpi	r16, 0x08	; 8
 95c:	90 f0       	brcs	.+36     	; 0x982 <__ashldi3+0x2a>
 95e:	98 2f       	mov	r25, r24
 960:	87 2f       	mov	r24, r23
 962:	76 2f       	mov	r23, r22
 964:	65 2f       	mov	r22, r21
 966:	54 2f       	mov	r21, r20
 968:	43 2f       	mov	r20, r19
 96a:	32 2f       	mov	r19, r18
 96c:	22 27       	eor	r18, r18
 96e:	08 50       	subi	r16, 0x08	; 8
 970:	f4 cf       	rjmp	.-24     	; 0x95a <__ashldi3+0x2>
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	44 1f       	adc	r20, r20
 978:	55 1f       	adc	r21, r21
 97a:	66 1f       	adc	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	0a 95       	dec	r16
 984:	b2 f7       	brpl	.-20     	; 0x972 <__ashldi3+0x1a>
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <__ashrdi3>:
 98a:	97 fb       	bst	r25, 7
 98c:	10 f8       	bld	r1, 0

0000098e <__lshrdi3>:
 98e:	16 94       	lsr	r1
 990:	00 08       	sbc	r0, r0
 992:	0f 93       	push	r16
 994:	08 30       	cpi	r16, 0x08	; 8
 996:	98 f0       	brcs	.+38     	; 0x9be <__lshrdi3+0x30>
 998:	08 50       	subi	r16, 0x08	; 8
 99a:	23 2f       	mov	r18, r19
 99c:	34 2f       	mov	r19, r20
 99e:	45 2f       	mov	r20, r21
 9a0:	56 2f       	mov	r21, r22
 9a2:	67 2f       	mov	r22, r23
 9a4:	78 2f       	mov	r23, r24
 9a6:	89 2f       	mov	r24, r25
 9a8:	90 2d       	mov	r25, r0
 9aa:	f4 cf       	rjmp	.-24     	; 0x994 <__lshrdi3+0x6>
 9ac:	05 94       	asr	r0
 9ae:	97 95       	ror	r25
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	57 95       	ror	r21
 9b8:	47 95       	ror	r20
 9ba:	37 95       	ror	r19
 9bc:	27 95       	ror	r18
 9be:	0a 95       	dec	r16
 9c0:	aa f7       	brpl	.-22     	; 0x9ac <__lshrdi3+0x1e>
 9c2:	0f 91       	pop	r16
 9c4:	08 95       	ret

000009c6 <__cmpdi2_s8>:
 9c6:	00 24       	eor	r0, r0
 9c8:	a7 fd       	sbrc	r26, 7
 9ca:	00 94       	com	r0
 9cc:	2a 17       	cp	r18, r26
 9ce:	30 05       	cpc	r19, r0
 9d0:	40 05       	cpc	r20, r0
 9d2:	50 05       	cpc	r21, r0
 9d4:	60 05       	cpc	r22, r0
 9d6:	70 05       	cpc	r23, r0
 9d8:	80 05       	cpc	r24, r0
 9da:	90 05       	cpc	r25, r0
 9dc:	08 95       	ret

000009de <vsnprintf>:
 9de:	ae e0       	ldi	r26, 0x0E	; 14
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	e5 ef       	ldi	r30, 0xF5	; 245
 9e4:	f4 e0       	ldi	r31, 0x04	; 4
 9e6:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__prologue_saves__+0x1c>
 9ea:	8c 01       	movw	r16, r24
 9ec:	fa 01       	movw	r30, r20
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	8c 83       	std	Y+4, r24	; 0x04
 9f2:	09 83       	std	Y+1, r16	; 0x01
 9f4:	1a 83       	std	Y+2, r17	; 0x02
 9f6:	77 ff       	sbrs	r23, 7
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vsnprintf+0x20>
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	70 e8       	ldi	r23, 0x80	; 128
 9fe:	cb 01       	movw	r24, r22
 a00:	01 97       	sbiw	r24, 0x01	; 1
 a02:	8d 83       	std	Y+5, r24	; 0x05
 a04:	9e 83       	std	Y+6, r25	; 0x06
 a06:	a9 01       	movw	r20, r18
 a08:	bf 01       	movw	r22, r30
 a0a:	ce 01       	movw	r24, r28
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	0e 94 1b 05 	call	0xa36	; 0xa36 <vfprintf>
 a12:	4d 81       	ldd	r20, Y+5	; 0x05
 a14:	5e 81       	ldd	r21, Y+6	; 0x06
 a16:	57 fd       	sbrc	r21, 7
 a18:	0a c0       	rjmp	.+20     	; 0xa2e <vsnprintf+0x50>
 a1a:	2f 81       	ldd	r18, Y+7	; 0x07
 a1c:	38 85       	ldd	r19, Y+8	; 0x08
 a1e:	42 17       	cp	r20, r18
 a20:	53 07       	cpc	r21, r19
 a22:	0c f4       	brge	.+2      	; 0xa26 <vsnprintf+0x48>
 a24:	9a 01       	movw	r18, r20
 a26:	f8 01       	movw	r30, r16
 a28:	e2 0f       	add	r30, r18
 a2a:	f3 1f       	adc	r31, r19
 a2c:	10 82       	st	Z, r1
 a2e:	2e 96       	adiw	r28, 0x0e	; 14
 a30:	e4 e0       	ldi	r30, 0x04	; 4
 a32:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__epilogue_restores__+0x1c>

00000a36 <vfprintf>:
 a36:	ab e0       	ldi	r26, 0x0B	; 11
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e1 e2       	ldi	r30, 0x21	; 33
 a3c:	f5 e0       	ldi	r31, 0x05	; 5
 a3e:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__prologue_saves__>
 a42:	6c 01       	movw	r12, r24
 a44:	7b 01       	movw	r14, r22
 a46:	8a 01       	movw	r16, r20
 a48:	fc 01       	movw	r30, r24
 a4a:	16 82       	std	Z+6, r1	; 0x06
 a4c:	17 82       	std	Z+7, r1	; 0x07
 a4e:	83 81       	ldd	r24, Z+3	; 0x03
 a50:	81 ff       	sbrs	r24, 1
 a52:	cc c1       	rjmp	.+920    	; 0xdec <vfprintf+0x3b6>
 a54:	ce 01       	movw	r24, r28
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	3c 01       	movw	r6, r24
 a5a:	f6 01       	movw	r30, r12
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	f7 01       	movw	r30, r14
 a60:	93 fd       	sbrc	r25, 3
 a62:	85 91       	lpm	r24, Z+
 a64:	93 ff       	sbrs	r25, 3
 a66:	81 91       	ld	r24, Z+
 a68:	7f 01       	movw	r14, r30
 a6a:	88 23       	and	r24, r24
 a6c:	09 f4       	brne	.+2      	; 0xa70 <vfprintf+0x3a>
 a6e:	ba c1       	rjmp	.+884    	; 0xde4 <vfprintf+0x3ae>
 a70:	85 32       	cpi	r24, 0x25	; 37
 a72:	39 f4       	brne	.+14     	; 0xa82 <vfprintf+0x4c>
 a74:	93 fd       	sbrc	r25, 3
 a76:	85 91       	lpm	r24, Z+
 a78:	93 ff       	sbrs	r25, 3
 a7a:	81 91       	ld	r24, Z+
 a7c:	7f 01       	movw	r14, r30
 a7e:	85 32       	cpi	r24, 0x25	; 37
 a80:	29 f4       	brne	.+10     	; 0xa8c <vfprintf+0x56>
 a82:	b6 01       	movw	r22, r12
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 a8a:	e7 cf       	rjmp	.-50     	; 0xa5a <vfprintf+0x24>
 a8c:	91 2c       	mov	r9, r1
 a8e:	21 2c       	mov	r2, r1
 a90:	31 2c       	mov	r3, r1
 a92:	ff e1       	ldi	r31, 0x1F	; 31
 a94:	f3 15       	cp	r31, r3
 a96:	d8 f0       	brcs	.+54     	; 0xace <vfprintf+0x98>
 a98:	8b 32       	cpi	r24, 0x2B	; 43
 a9a:	79 f0       	breq	.+30     	; 0xaba <vfprintf+0x84>
 a9c:	38 f4       	brcc	.+14     	; 0xaac <vfprintf+0x76>
 a9e:	80 32       	cpi	r24, 0x20	; 32
 aa0:	79 f0       	breq	.+30     	; 0xac0 <vfprintf+0x8a>
 aa2:	83 32       	cpi	r24, 0x23	; 35
 aa4:	a1 f4       	brne	.+40     	; 0xace <vfprintf+0x98>
 aa6:	23 2d       	mov	r18, r3
 aa8:	20 61       	ori	r18, 0x10	; 16
 aaa:	1d c0       	rjmp	.+58     	; 0xae6 <vfprintf+0xb0>
 aac:	8d 32       	cpi	r24, 0x2D	; 45
 aae:	61 f0       	breq	.+24     	; 0xac8 <vfprintf+0x92>
 ab0:	80 33       	cpi	r24, 0x30	; 48
 ab2:	69 f4       	brne	.+26     	; 0xace <vfprintf+0x98>
 ab4:	23 2d       	mov	r18, r3
 ab6:	21 60       	ori	r18, 0x01	; 1
 ab8:	16 c0       	rjmp	.+44     	; 0xae6 <vfprintf+0xb0>
 aba:	83 2d       	mov	r24, r3
 abc:	82 60       	ori	r24, 0x02	; 2
 abe:	38 2e       	mov	r3, r24
 ac0:	e3 2d       	mov	r30, r3
 ac2:	e4 60       	ori	r30, 0x04	; 4
 ac4:	3e 2e       	mov	r3, r30
 ac6:	2a c0       	rjmp	.+84     	; 0xb1c <vfprintf+0xe6>
 ac8:	f3 2d       	mov	r31, r3
 aca:	f8 60       	ori	r31, 0x08	; 8
 acc:	1d c0       	rjmp	.+58     	; 0xb08 <vfprintf+0xd2>
 ace:	37 fc       	sbrc	r3, 7
 ad0:	2d c0       	rjmp	.+90     	; 0xb2c <vfprintf+0xf6>
 ad2:	20 ed       	ldi	r18, 0xD0	; 208
 ad4:	28 0f       	add	r18, r24
 ad6:	2a 30       	cpi	r18, 0x0A	; 10
 ad8:	40 f0       	brcs	.+16     	; 0xaea <vfprintf+0xb4>
 ada:	8e 32       	cpi	r24, 0x2E	; 46
 adc:	b9 f4       	brne	.+46     	; 0xb0c <vfprintf+0xd6>
 ade:	36 fc       	sbrc	r3, 6
 ae0:	81 c1       	rjmp	.+770    	; 0xde4 <vfprintf+0x3ae>
 ae2:	23 2d       	mov	r18, r3
 ae4:	20 64       	ori	r18, 0x40	; 64
 ae6:	32 2e       	mov	r3, r18
 ae8:	19 c0       	rjmp	.+50     	; 0xb1c <vfprintf+0xe6>
 aea:	36 fe       	sbrs	r3, 6
 aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xc4>
 aee:	8a e0       	ldi	r24, 0x0A	; 10
 af0:	98 9e       	mul	r9, r24
 af2:	20 0d       	add	r18, r0
 af4:	11 24       	eor	r1, r1
 af6:	92 2e       	mov	r9, r18
 af8:	11 c0       	rjmp	.+34     	; 0xb1c <vfprintf+0xe6>
 afa:	ea e0       	ldi	r30, 0x0A	; 10
 afc:	2e 9e       	mul	r2, r30
 afe:	20 0d       	add	r18, r0
 b00:	11 24       	eor	r1, r1
 b02:	22 2e       	mov	r2, r18
 b04:	f3 2d       	mov	r31, r3
 b06:	f0 62       	ori	r31, 0x20	; 32
 b08:	3f 2e       	mov	r3, r31
 b0a:	08 c0       	rjmp	.+16     	; 0xb1c <vfprintf+0xe6>
 b0c:	8c 36       	cpi	r24, 0x6C	; 108
 b0e:	21 f4       	brne	.+8      	; 0xb18 <vfprintf+0xe2>
 b10:	83 2d       	mov	r24, r3
 b12:	80 68       	ori	r24, 0x80	; 128
 b14:	38 2e       	mov	r3, r24
 b16:	02 c0       	rjmp	.+4      	; 0xb1c <vfprintf+0xe6>
 b18:	88 36       	cpi	r24, 0x68	; 104
 b1a:	41 f4       	brne	.+16     	; 0xb2c <vfprintf+0xf6>
 b1c:	f7 01       	movw	r30, r14
 b1e:	93 fd       	sbrc	r25, 3
 b20:	85 91       	lpm	r24, Z+
 b22:	93 ff       	sbrs	r25, 3
 b24:	81 91       	ld	r24, Z+
 b26:	7f 01       	movw	r14, r30
 b28:	81 11       	cpse	r24, r1
 b2a:	b3 cf       	rjmp	.-154    	; 0xa92 <vfprintf+0x5c>
 b2c:	98 2f       	mov	r25, r24
 b2e:	9f 7d       	andi	r25, 0xDF	; 223
 b30:	95 54       	subi	r25, 0x45	; 69
 b32:	93 30       	cpi	r25, 0x03	; 3
 b34:	28 f4       	brcc	.+10     	; 0xb40 <vfprintf+0x10a>
 b36:	0c 5f       	subi	r16, 0xFC	; 252
 b38:	1f 4f       	sbci	r17, 0xFF	; 255
 b3a:	9f e3       	ldi	r25, 0x3F	; 63
 b3c:	99 83       	std	Y+1, r25	; 0x01
 b3e:	0d c0       	rjmp	.+26     	; 0xb5a <vfprintf+0x124>
 b40:	83 36       	cpi	r24, 0x63	; 99
 b42:	31 f0       	breq	.+12     	; 0xb50 <vfprintf+0x11a>
 b44:	83 37       	cpi	r24, 0x73	; 115
 b46:	71 f0       	breq	.+28     	; 0xb64 <vfprintf+0x12e>
 b48:	83 35       	cpi	r24, 0x53	; 83
 b4a:	09 f0       	breq	.+2      	; 0xb4e <vfprintf+0x118>
 b4c:	59 c0       	rjmp	.+178    	; 0xc00 <vfprintf+0x1ca>
 b4e:	21 c0       	rjmp	.+66     	; 0xb92 <vfprintf+0x15c>
 b50:	f8 01       	movw	r30, r16
 b52:	80 81       	ld	r24, Z
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	0e 5f       	subi	r16, 0xFE	; 254
 b58:	1f 4f       	sbci	r17, 0xFF	; 255
 b5a:	88 24       	eor	r8, r8
 b5c:	83 94       	inc	r8
 b5e:	91 2c       	mov	r9, r1
 b60:	53 01       	movw	r10, r6
 b62:	13 c0       	rjmp	.+38     	; 0xb8a <vfprintf+0x154>
 b64:	28 01       	movw	r4, r16
 b66:	f2 e0       	ldi	r31, 0x02	; 2
 b68:	4f 0e       	add	r4, r31
 b6a:	51 1c       	adc	r5, r1
 b6c:	f8 01       	movw	r30, r16
 b6e:	a0 80       	ld	r10, Z
 b70:	b1 80       	ldd	r11, Z+1	; 0x01
 b72:	36 fe       	sbrs	r3, 6
 b74:	03 c0       	rjmp	.+6      	; 0xb7c <vfprintf+0x146>
 b76:	69 2d       	mov	r22, r9
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	02 c0       	rjmp	.+4      	; 0xb80 <vfprintf+0x14a>
 b7c:	6f ef       	ldi	r22, 0xFF	; 255
 b7e:	7f ef       	ldi	r23, 0xFF	; 255
 b80:	c5 01       	movw	r24, r10
 b82:	0e 94 07 07 	call	0xe0e	; 0xe0e <strnlen>
 b86:	4c 01       	movw	r8, r24
 b88:	82 01       	movw	r16, r4
 b8a:	f3 2d       	mov	r31, r3
 b8c:	ff 77       	andi	r31, 0x7F	; 127
 b8e:	3f 2e       	mov	r3, r31
 b90:	16 c0       	rjmp	.+44     	; 0xbbe <vfprintf+0x188>
 b92:	28 01       	movw	r4, r16
 b94:	22 e0       	ldi	r18, 0x02	; 2
 b96:	42 0e       	add	r4, r18
 b98:	51 1c       	adc	r5, r1
 b9a:	f8 01       	movw	r30, r16
 b9c:	a0 80       	ld	r10, Z
 b9e:	b1 80       	ldd	r11, Z+1	; 0x01
 ba0:	36 fe       	sbrs	r3, 6
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x174>
 ba4:	69 2d       	mov	r22, r9
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x178>
 baa:	6f ef       	ldi	r22, 0xFF	; 255
 bac:	7f ef       	ldi	r23, 0xFF	; 255
 bae:	c5 01       	movw	r24, r10
 bb0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <strnlen_P>
 bb4:	4c 01       	movw	r8, r24
 bb6:	f3 2d       	mov	r31, r3
 bb8:	f0 68       	ori	r31, 0x80	; 128
 bba:	3f 2e       	mov	r3, r31
 bbc:	82 01       	movw	r16, r4
 bbe:	33 fc       	sbrc	r3, 3
 bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <vfprintf+0x1c2>
 bc2:	82 2d       	mov	r24, r2
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	88 16       	cp	r8, r24
 bc8:	99 06       	cpc	r9, r25
 bca:	b0 f4       	brcc	.+44     	; 0xbf8 <vfprintf+0x1c2>
 bcc:	b6 01       	movw	r22, r12
 bce:	80 e2       	ldi	r24, 0x20	; 32
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 bd6:	2a 94       	dec	r2
 bd8:	f4 cf       	rjmp	.-24     	; 0xbc2 <vfprintf+0x18c>
 bda:	f5 01       	movw	r30, r10
 bdc:	37 fc       	sbrc	r3, 7
 bde:	85 91       	lpm	r24, Z+
 be0:	37 fe       	sbrs	r3, 7
 be2:	81 91       	ld	r24, Z+
 be4:	5f 01       	movw	r10, r30
 be6:	b6 01       	movw	r22, r12
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 bee:	21 10       	cpse	r2, r1
 bf0:	2a 94       	dec	r2
 bf2:	21 e0       	ldi	r18, 0x01	; 1
 bf4:	82 1a       	sub	r8, r18
 bf6:	91 08       	sbc	r9, r1
 bf8:	81 14       	cp	r8, r1
 bfa:	91 04       	cpc	r9, r1
 bfc:	71 f7       	brne	.-36     	; 0xbda <vfprintf+0x1a4>
 bfe:	e8 c0       	rjmp	.+464    	; 0xdd0 <vfprintf+0x39a>
 c00:	84 36       	cpi	r24, 0x64	; 100
 c02:	11 f0       	breq	.+4      	; 0xc08 <vfprintf+0x1d2>
 c04:	89 36       	cpi	r24, 0x69	; 105
 c06:	41 f5       	brne	.+80     	; 0xc58 <vfprintf+0x222>
 c08:	f8 01       	movw	r30, r16
 c0a:	37 fe       	sbrs	r3, 7
 c0c:	07 c0       	rjmp	.+14     	; 0xc1c <vfprintf+0x1e6>
 c0e:	60 81       	ld	r22, Z
 c10:	71 81       	ldd	r23, Z+1	; 0x01
 c12:	82 81       	ldd	r24, Z+2	; 0x02
 c14:	93 81       	ldd	r25, Z+3	; 0x03
 c16:	0c 5f       	subi	r16, 0xFC	; 252
 c18:	1f 4f       	sbci	r17, 0xFF	; 255
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <vfprintf+0x1f6>
 c1c:	60 81       	ld	r22, Z
 c1e:	71 81       	ldd	r23, Z+1	; 0x01
 c20:	07 2e       	mov	r0, r23
 c22:	00 0c       	add	r0, r0
 c24:	88 0b       	sbc	r24, r24
 c26:	99 0b       	sbc	r25, r25
 c28:	0e 5f       	subi	r16, 0xFE	; 254
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	f3 2d       	mov	r31, r3
 c2e:	ff 76       	andi	r31, 0x6F	; 111
 c30:	3f 2e       	mov	r3, r31
 c32:	97 ff       	sbrs	r25, 7
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <vfprintf+0x212>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	f0 68       	ori	r31, 0x80	; 128
 c46:	3f 2e       	mov	r3, r31
 c48:	2a e0       	ldi	r18, 0x0A	; 10
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	a3 01       	movw	r20, r6
 c4e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
 c52:	88 2e       	mov	r8, r24
 c54:	86 18       	sub	r8, r6
 c56:	45 c0       	rjmp	.+138    	; 0xce2 <vfprintf+0x2ac>
 c58:	85 37       	cpi	r24, 0x75	; 117
 c5a:	31 f4       	brne	.+12     	; 0xc68 <vfprintf+0x232>
 c5c:	23 2d       	mov	r18, r3
 c5e:	2f 7e       	andi	r18, 0xEF	; 239
 c60:	b2 2e       	mov	r11, r18
 c62:	2a e0       	ldi	r18, 0x0A	; 10
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	25 c0       	rjmp	.+74     	; 0xcb2 <vfprintf+0x27c>
 c68:	93 2d       	mov	r25, r3
 c6a:	99 7f       	andi	r25, 0xF9	; 249
 c6c:	b9 2e       	mov	r11, r25
 c6e:	8f 36       	cpi	r24, 0x6F	; 111
 c70:	c1 f0       	breq	.+48     	; 0xca2 <vfprintf+0x26c>
 c72:	18 f4       	brcc	.+6      	; 0xc7a <vfprintf+0x244>
 c74:	88 35       	cpi	r24, 0x58	; 88
 c76:	79 f0       	breq	.+30     	; 0xc96 <vfprintf+0x260>
 c78:	b5 c0       	rjmp	.+362    	; 0xde4 <vfprintf+0x3ae>
 c7a:	80 37       	cpi	r24, 0x70	; 112
 c7c:	19 f0       	breq	.+6      	; 0xc84 <vfprintf+0x24e>
 c7e:	88 37       	cpi	r24, 0x78	; 120
 c80:	21 f0       	breq	.+8      	; 0xc8a <vfprintf+0x254>
 c82:	b0 c0       	rjmp	.+352    	; 0xde4 <vfprintf+0x3ae>
 c84:	e9 2f       	mov	r30, r25
 c86:	e0 61       	ori	r30, 0x10	; 16
 c88:	be 2e       	mov	r11, r30
 c8a:	b4 fe       	sbrs	r11, 4
 c8c:	0d c0       	rjmp	.+26     	; 0xca8 <vfprintf+0x272>
 c8e:	fb 2d       	mov	r31, r11
 c90:	f4 60       	ori	r31, 0x04	; 4
 c92:	bf 2e       	mov	r11, r31
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x272>
 c96:	34 fe       	sbrs	r3, 4
 c98:	0a c0       	rjmp	.+20     	; 0xcae <vfprintf+0x278>
 c9a:	29 2f       	mov	r18, r25
 c9c:	26 60       	ori	r18, 0x06	; 6
 c9e:	b2 2e       	mov	r11, r18
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x278>
 ca2:	28 e0       	ldi	r18, 0x08	; 8
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <vfprintf+0x27c>
 ca8:	20 e1       	ldi	r18, 0x10	; 16
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x27c>
 cae:	20 e1       	ldi	r18, 0x10	; 16
 cb0:	32 e0       	ldi	r19, 0x02	; 2
 cb2:	f8 01       	movw	r30, r16
 cb4:	b7 fe       	sbrs	r11, 7
 cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <vfprintf+0x290>
 cb8:	60 81       	ld	r22, Z
 cba:	71 81       	ldd	r23, Z+1	; 0x01
 cbc:	82 81       	ldd	r24, Z+2	; 0x02
 cbe:	93 81       	ldd	r25, Z+3	; 0x03
 cc0:	0c 5f       	subi	r16, 0xFC	; 252
 cc2:	1f 4f       	sbci	r17, 0xFF	; 255
 cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0x29c>
 cc6:	60 81       	ld	r22, Z
 cc8:	71 81       	ldd	r23, Z+1	; 0x01
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	0e 5f       	subi	r16, 0xFE	; 254
 cd0:	1f 4f       	sbci	r17, 0xFF	; 255
 cd2:	a3 01       	movw	r20, r6
 cd4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
 cd8:	88 2e       	mov	r8, r24
 cda:	86 18       	sub	r8, r6
 cdc:	fb 2d       	mov	r31, r11
 cde:	ff 77       	andi	r31, 0x7F	; 127
 ce0:	3f 2e       	mov	r3, r31
 ce2:	36 fe       	sbrs	r3, 6
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <vfprintf+0x2ca>
 ce6:	23 2d       	mov	r18, r3
 ce8:	2e 7f       	andi	r18, 0xFE	; 254
 cea:	a2 2e       	mov	r10, r18
 cec:	89 14       	cp	r8, r9
 cee:	58 f4       	brcc	.+22     	; 0xd06 <vfprintf+0x2d0>
 cf0:	34 fe       	sbrs	r3, 4
 cf2:	0b c0       	rjmp	.+22     	; 0xd0a <vfprintf+0x2d4>
 cf4:	32 fc       	sbrc	r3, 2
 cf6:	09 c0       	rjmp	.+18     	; 0xd0a <vfprintf+0x2d4>
 cf8:	83 2d       	mov	r24, r3
 cfa:	8e 7e       	andi	r24, 0xEE	; 238
 cfc:	a8 2e       	mov	r10, r24
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x2d4>
 d00:	b8 2c       	mov	r11, r8
 d02:	a3 2c       	mov	r10, r3
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x2d6>
 d06:	b8 2c       	mov	r11, r8
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x2d6>
 d0a:	b9 2c       	mov	r11, r9
 d0c:	a4 fe       	sbrs	r10, 4
 d0e:	0f c0       	rjmp	.+30     	; 0xd2e <vfprintf+0x2f8>
 d10:	fe 01       	movw	r30, r28
 d12:	e8 0d       	add	r30, r8
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	80 33       	cpi	r24, 0x30	; 48
 d1a:	21 f4       	brne	.+8      	; 0xd24 <vfprintf+0x2ee>
 d1c:	9a 2d       	mov	r25, r10
 d1e:	99 7e       	andi	r25, 0xE9	; 233
 d20:	a9 2e       	mov	r10, r25
 d22:	09 c0       	rjmp	.+18     	; 0xd36 <vfprintf+0x300>
 d24:	a2 fe       	sbrs	r10, 2
 d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0x2fe>
 d28:	b3 94       	inc	r11
 d2a:	b3 94       	inc	r11
 d2c:	04 c0       	rjmp	.+8      	; 0xd36 <vfprintf+0x300>
 d2e:	8a 2d       	mov	r24, r10
 d30:	86 78       	andi	r24, 0x86	; 134
 d32:	09 f0       	breq	.+2      	; 0xd36 <vfprintf+0x300>
 d34:	b3 94       	inc	r11
 d36:	a3 fc       	sbrc	r10, 3
 d38:	11 c0       	rjmp	.+34     	; 0xd5c <vfprintf+0x326>
 d3a:	a0 fe       	sbrs	r10, 0
 d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0x314>
 d3e:	b2 14       	cp	r11, r2
 d40:	88 f4       	brcc	.+34     	; 0xd64 <vfprintf+0x32e>
 d42:	28 0c       	add	r2, r8
 d44:	92 2c       	mov	r9, r2
 d46:	9b 18       	sub	r9, r11
 d48:	0e c0       	rjmp	.+28     	; 0xd66 <vfprintf+0x330>
 d4a:	b2 14       	cp	r11, r2
 d4c:	60 f4       	brcc	.+24     	; 0xd66 <vfprintf+0x330>
 d4e:	b6 01       	movw	r22, r12
 d50:	80 e2       	ldi	r24, 0x20	; 32
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 d58:	b3 94       	inc	r11
 d5a:	f7 cf       	rjmp	.-18     	; 0xd4a <vfprintf+0x314>
 d5c:	b2 14       	cp	r11, r2
 d5e:	18 f4       	brcc	.+6      	; 0xd66 <vfprintf+0x330>
 d60:	2b 18       	sub	r2, r11
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x332>
 d64:	98 2c       	mov	r9, r8
 d66:	21 2c       	mov	r2, r1
 d68:	a4 fe       	sbrs	r10, 4
 d6a:	10 c0       	rjmp	.+32     	; 0xd8c <vfprintf+0x356>
 d6c:	b6 01       	movw	r22, r12
 d6e:	80 e3       	ldi	r24, 0x30	; 48
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 d76:	a2 fe       	sbrs	r10, 2
 d78:	17 c0       	rjmp	.+46     	; 0xda8 <vfprintf+0x372>
 d7a:	a1 fc       	sbrc	r10, 1
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x34e>
 d7e:	88 e7       	ldi	r24, 0x78	; 120
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x352>
 d84:	88 e5       	ldi	r24, 0x58	; 88
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	b6 01       	movw	r22, r12
 d8a:	0c c0       	rjmp	.+24     	; 0xda4 <vfprintf+0x36e>
 d8c:	8a 2d       	mov	r24, r10
 d8e:	86 78       	andi	r24, 0x86	; 134
 d90:	59 f0       	breq	.+22     	; 0xda8 <vfprintf+0x372>
 d92:	a1 fe       	sbrs	r10, 1
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x364>
 d96:	8b e2       	ldi	r24, 0x2B	; 43
 d98:	01 c0       	rjmp	.+2      	; 0xd9c <vfprintf+0x366>
 d9a:	80 e2       	ldi	r24, 0x20	; 32
 d9c:	a7 fc       	sbrc	r10, 7
 d9e:	8d e2       	ldi	r24, 0x2D	; 45
 da0:	b6 01       	movw	r22, r12
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 da8:	89 14       	cp	r8, r9
 daa:	38 f4       	brcc	.+14     	; 0xdba <vfprintf+0x384>
 dac:	b6 01       	movw	r22, r12
 dae:	80 e3       	ldi	r24, 0x30	; 48
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 db6:	9a 94       	dec	r9
 db8:	f7 cf       	rjmp	.-18     	; 0xda8 <vfprintf+0x372>
 dba:	8a 94       	dec	r8
 dbc:	f3 01       	movw	r30, r6
 dbe:	e8 0d       	add	r30, r8
 dc0:	f1 1d       	adc	r31, r1
 dc2:	80 81       	ld	r24, Z
 dc4:	b6 01       	movw	r22, r12
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 dcc:	81 10       	cpse	r8, r1
 dce:	f5 cf       	rjmp	.-22     	; 0xdba <vfprintf+0x384>
 dd0:	22 20       	and	r2, r2
 dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x3a0>
 dd4:	42 ce       	rjmp	.-892    	; 0xa5a <vfprintf+0x24>
 dd6:	b6 01       	movw	r22, r12
 dd8:	80 e2       	ldi	r24, 0x20	; 32
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	0e 94 12 07 	call	0xe24	; 0xe24 <fputc>
 de0:	2a 94       	dec	r2
 de2:	f6 cf       	rjmp	.-20     	; 0xdd0 <vfprintf+0x39a>
 de4:	f6 01       	movw	r30, r12
 de6:	86 81       	ldd	r24, Z+6	; 0x06
 de8:	97 81       	ldd	r25, Z+7	; 0x07
 dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x3ba>
 dec:	8f ef       	ldi	r24, 0xFF	; 255
 dee:	9f ef       	ldi	r25, 0xFF	; 255
 df0:	2b 96       	adiw	r28, 0x0b	; 11
 df2:	e2 e1       	ldi	r30, 0x12	; 18
 df4:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__epilogue_restores__>

00000df8 <strnlen_P>:
 df8:	fc 01       	movw	r30, r24
 dfa:	05 90       	lpm	r0, Z+
 dfc:	61 50       	subi	r22, 0x01	; 1
 dfe:	70 40       	sbci	r23, 0x00	; 0
 e00:	01 10       	cpse	r0, r1
 e02:	d8 f7       	brcc	.-10     	; 0xdfa <strnlen_P+0x2>
 e04:	80 95       	com	r24
 e06:	90 95       	com	r25
 e08:	8e 0f       	add	r24, r30
 e0a:	9f 1f       	adc	r25, r31
 e0c:	08 95       	ret

00000e0e <strnlen>:
 e0e:	fc 01       	movw	r30, r24
 e10:	61 50       	subi	r22, 0x01	; 1
 e12:	70 40       	sbci	r23, 0x00	; 0
 e14:	01 90       	ld	r0, Z+
 e16:	01 10       	cpse	r0, r1
 e18:	d8 f7       	brcc	.-10     	; 0xe10 <strnlen+0x2>
 e1a:	80 95       	com	r24
 e1c:	90 95       	com	r25
 e1e:	8e 0f       	add	r24, r30
 e20:	9f 1f       	adc	r25, r31
 e22:	08 95       	ret

00000e24 <fputc>:
 e24:	0f 93       	push	r16
 e26:	1f 93       	push	r17
 e28:	cf 93       	push	r28
 e2a:	df 93       	push	r29
 e2c:	fb 01       	movw	r30, r22
 e2e:	23 81       	ldd	r18, Z+3	; 0x03
 e30:	21 fd       	sbrc	r18, 1
 e32:	03 c0       	rjmp	.+6      	; 0xe3a <fputc+0x16>
 e34:	8f ef       	ldi	r24, 0xFF	; 255
 e36:	9f ef       	ldi	r25, 0xFF	; 255
 e38:	2c c0       	rjmp	.+88     	; 0xe92 <fputc+0x6e>
 e3a:	22 ff       	sbrs	r18, 2
 e3c:	16 c0       	rjmp	.+44     	; 0xe6a <fputc+0x46>
 e3e:	46 81       	ldd	r20, Z+6	; 0x06
 e40:	57 81       	ldd	r21, Z+7	; 0x07
 e42:	24 81       	ldd	r18, Z+4	; 0x04
 e44:	35 81       	ldd	r19, Z+5	; 0x05
 e46:	42 17       	cp	r20, r18
 e48:	53 07       	cpc	r21, r19
 e4a:	44 f4       	brge	.+16     	; 0xe5c <fputc+0x38>
 e4c:	a0 81       	ld	r26, Z
 e4e:	b1 81       	ldd	r27, Z+1	; 0x01
 e50:	9d 01       	movw	r18, r26
 e52:	2f 5f       	subi	r18, 0xFF	; 255
 e54:	3f 4f       	sbci	r19, 0xFF	; 255
 e56:	20 83       	st	Z, r18
 e58:	31 83       	std	Z+1, r19	; 0x01
 e5a:	8c 93       	st	X, r24
 e5c:	26 81       	ldd	r18, Z+6	; 0x06
 e5e:	37 81       	ldd	r19, Z+7	; 0x07
 e60:	2f 5f       	subi	r18, 0xFF	; 255
 e62:	3f 4f       	sbci	r19, 0xFF	; 255
 e64:	26 83       	std	Z+6, r18	; 0x06
 e66:	37 83       	std	Z+7, r19	; 0x07
 e68:	14 c0       	rjmp	.+40     	; 0xe92 <fputc+0x6e>
 e6a:	8b 01       	movw	r16, r22
 e6c:	ec 01       	movw	r28, r24
 e6e:	fb 01       	movw	r30, r22
 e70:	00 84       	ldd	r0, Z+8	; 0x08
 e72:	f1 85       	ldd	r31, Z+9	; 0x09
 e74:	e0 2d       	mov	r30, r0
 e76:	09 95       	icall
 e78:	89 2b       	or	r24, r25
 e7a:	e1 f6       	brne	.-72     	; 0xe34 <fputc+0x10>
 e7c:	d8 01       	movw	r26, r16
 e7e:	16 96       	adiw	r26, 0x06	; 6
 e80:	8d 91       	ld	r24, X+
 e82:	9c 91       	ld	r25, X
 e84:	17 97       	sbiw	r26, 0x07	; 7
 e86:	01 96       	adiw	r24, 0x01	; 1
 e88:	16 96       	adiw	r26, 0x06	; 6
 e8a:	8d 93       	st	X+, r24
 e8c:	9c 93       	st	X, r25
 e8e:	17 97       	sbiw	r26, 0x07	; 7
 e90:	ce 01       	movw	r24, r28
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	1f 91       	pop	r17
 e98:	0f 91       	pop	r16
 e9a:	08 95       	ret

00000e9c <__ultoa_invert>:
 e9c:	fa 01       	movw	r30, r20
 e9e:	aa 27       	eor	r26, r26
 ea0:	28 30       	cpi	r18, 0x08	; 8
 ea2:	51 f1       	breq	.+84     	; 0xef8 <__ultoa_invert+0x5c>
 ea4:	20 31       	cpi	r18, 0x10	; 16
 ea6:	81 f1       	breq	.+96     	; 0xf08 <__ultoa_invert+0x6c>
 ea8:	e8 94       	clt
 eaa:	6f 93       	push	r22
 eac:	6e 7f       	andi	r22, 0xFE	; 254
 eae:	6e 5f       	subi	r22, 0xFE	; 254
 eb0:	7f 4f       	sbci	r23, 0xFF	; 255
 eb2:	8f 4f       	sbci	r24, 0xFF	; 255
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	af 4f       	sbci	r26, 0xFF	; 255
 eb8:	b1 e0       	ldi	r27, 0x01	; 1
 eba:	3e d0       	rcall	.+124    	; 0xf38 <__ultoa_invert+0x9c>
 ebc:	b4 e0       	ldi	r27, 0x04	; 4
 ebe:	3c d0       	rcall	.+120    	; 0xf38 <__ultoa_invert+0x9c>
 ec0:	67 0f       	add	r22, r23
 ec2:	78 1f       	adc	r23, r24
 ec4:	89 1f       	adc	r24, r25
 ec6:	9a 1f       	adc	r25, r26
 ec8:	a1 1d       	adc	r26, r1
 eca:	68 0f       	add	r22, r24
 ecc:	79 1f       	adc	r23, r25
 ece:	8a 1f       	adc	r24, r26
 ed0:	91 1d       	adc	r25, r1
 ed2:	a1 1d       	adc	r26, r1
 ed4:	6a 0f       	add	r22, r26
 ed6:	71 1d       	adc	r23, r1
 ed8:	81 1d       	adc	r24, r1
 eda:	91 1d       	adc	r25, r1
 edc:	a1 1d       	adc	r26, r1
 ede:	20 d0       	rcall	.+64     	; 0xf20 <__ultoa_invert+0x84>
 ee0:	09 f4       	brne	.+2      	; 0xee4 <__ultoa_invert+0x48>
 ee2:	68 94       	set
 ee4:	3f 91       	pop	r19
 ee6:	2a e0       	ldi	r18, 0x0A	; 10
 ee8:	26 9f       	mul	r18, r22
 eea:	11 24       	eor	r1, r1
 eec:	30 19       	sub	r19, r0
 eee:	30 5d       	subi	r19, 0xD0	; 208
 ef0:	31 93       	st	Z+, r19
 ef2:	de f6       	brtc	.-74     	; 0xeaa <__ultoa_invert+0xe>
 ef4:	cf 01       	movw	r24, r30
 ef6:	08 95       	ret
 ef8:	46 2f       	mov	r20, r22
 efa:	47 70       	andi	r20, 0x07	; 7
 efc:	40 5d       	subi	r20, 0xD0	; 208
 efe:	41 93       	st	Z+, r20
 f00:	b3 e0       	ldi	r27, 0x03	; 3
 f02:	0f d0       	rcall	.+30     	; 0xf22 <__ultoa_invert+0x86>
 f04:	c9 f7       	brne	.-14     	; 0xef8 <__ultoa_invert+0x5c>
 f06:	f6 cf       	rjmp	.-20     	; 0xef4 <__ultoa_invert+0x58>
 f08:	46 2f       	mov	r20, r22
 f0a:	4f 70       	andi	r20, 0x0F	; 15
 f0c:	40 5d       	subi	r20, 0xD0	; 208
 f0e:	4a 33       	cpi	r20, 0x3A	; 58
 f10:	18 f0       	brcs	.+6      	; 0xf18 <__ultoa_invert+0x7c>
 f12:	49 5d       	subi	r20, 0xD9	; 217
 f14:	31 fd       	sbrc	r19, 1
 f16:	40 52       	subi	r20, 0x20	; 32
 f18:	41 93       	st	Z+, r20
 f1a:	02 d0       	rcall	.+4      	; 0xf20 <__ultoa_invert+0x84>
 f1c:	a9 f7       	brne	.-22     	; 0xf08 <__ultoa_invert+0x6c>
 f1e:	ea cf       	rjmp	.-44     	; 0xef4 <__ultoa_invert+0x58>
 f20:	b4 e0       	ldi	r27, 0x04	; 4
 f22:	a6 95       	lsr	r26
 f24:	97 95       	ror	r25
 f26:	87 95       	ror	r24
 f28:	77 95       	ror	r23
 f2a:	67 95       	ror	r22
 f2c:	ba 95       	dec	r27
 f2e:	c9 f7       	brne	.-14     	; 0xf22 <__ultoa_invert+0x86>
 f30:	00 97       	sbiw	r24, 0x00	; 0
 f32:	61 05       	cpc	r22, r1
 f34:	71 05       	cpc	r23, r1
 f36:	08 95       	ret
 f38:	9b 01       	movw	r18, r22
 f3a:	ac 01       	movw	r20, r24
 f3c:	0a 2e       	mov	r0, r26
 f3e:	06 94       	lsr	r0
 f40:	57 95       	ror	r21
 f42:	47 95       	ror	r20
 f44:	37 95       	ror	r19
 f46:	27 95       	ror	r18
 f48:	ba 95       	dec	r27
 f4a:	c9 f7       	brne	.-14     	; 0xf3e <__ultoa_invert+0xa2>
 f4c:	62 0f       	add	r22, r18
 f4e:	73 1f       	adc	r23, r19
 f50:	84 1f       	adc	r24, r20
 f52:	95 1f       	adc	r25, r21
 f54:	a0 1d       	adc	r26, r0
 f56:	08 95       	ret

00000f58 <ccp_write_io>:
 f58:	dc 01       	movw	r26, r24
 f5a:	28 ed       	ldi	r18, 0xD8	; 216
 f5c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6f6a>
 f60:	6c 93       	st	X, r22
 f62:	08 95       	ret

00000f64 <__prologue_saves__>:
 f64:	2f 92       	push	r2
 f66:	3f 92       	push	r3
 f68:	4f 92       	push	r4
 f6a:	5f 92       	push	r5
 f6c:	6f 92       	push	r6
 f6e:	7f 92       	push	r7
 f70:	8f 92       	push	r8
 f72:	9f 92       	push	r9
 f74:	af 92       	push	r10
 f76:	bf 92       	push	r11
 f78:	cf 92       	push	r12
 f7a:	df 92       	push	r13
 f7c:	ef 92       	push	r14
 f7e:	ff 92       	push	r15
 f80:	0f 93       	push	r16
 f82:	1f 93       	push	r17
 f84:	cf 93       	push	r28
 f86:	df 93       	push	r29
 f88:	cd b7       	in	r28, 0x3d	; 61
 f8a:	de b7       	in	r29, 0x3e	; 62
 f8c:	ca 1b       	sub	r28, r26
 f8e:	db 0b       	sbc	r29, r27
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	de bf       	out	0x3e, r29	; 62
 f94:	09 94       	ijmp

00000f96 <__epilogue_restores__>:
 f96:	2a 88       	ldd	r2, Y+18	; 0x12
 f98:	39 88       	ldd	r3, Y+17	; 0x11
 f9a:	48 88       	ldd	r4, Y+16	; 0x10
 f9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 fa0:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa2:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa6:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa8:	b9 84       	ldd	r11, Y+9	; 0x09
 faa:	c8 84       	ldd	r12, Y+8	; 0x08
 fac:	df 80       	ldd	r13, Y+7	; 0x07
 fae:	ee 80       	ldd	r14, Y+6	; 0x06
 fb0:	fd 80       	ldd	r15, Y+5	; 0x05
 fb2:	0c 81       	ldd	r16, Y+4	; 0x04
 fb4:	1b 81       	ldd	r17, Y+3	; 0x03
 fb6:	aa 81       	ldd	r26, Y+2	; 0x02
 fb8:	b9 81       	ldd	r27, Y+1	; 0x01
 fba:	ce 0f       	add	r28, r30
 fbc:	d1 1d       	adc	r29, r1
 fbe:	cd bf       	out	0x3d, r28	; 61
 fc0:	de bf       	out	0x3e, r29	; 62
 fc2:	ed 01       	movw	r28, r26
 fc4:	08 95       	ret

00000fc6 <_exit>:
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
