
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000131d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000112e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  0000912e  0000112e  000011c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  0000131d  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000131d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  000013c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000398c  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023c0  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd1  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00008258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d3e  00000000  00000000  00008518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000744  00000000  00000000  0000a256  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000a99a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a3 31       	cpi	r26, 0x13	; 19
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 08 02 	call	0x410	; 0x410 <main>
      98:	0c 94 95 08 	jmp	0x112a	; 0x112a <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 */ 
 #include "Settings.h"
 #include "ADCVar.h"

 void ADC0_init(){
	 ADC0.CTRLA = ADC_ENABLE_bm; //adc enable
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	 ADC0.CTRLB = ADC_PRESC_DIV4_gc; // 20M / 4 = 5MHz ADC clock (MAX adc clock is 6M)
      a8:	81 83       	std	Z+1, r24	; 0x01
	 ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
      aa:	80 ea       	ldi	r24, 0xA0	; 160
      ac:	82 83       	std	Z+2, r24	; 0x02
	 ADC0.CTRLE = 0; //How long to take a one sample (ADC clock cycles) so it will take 0+ 0.5 = half cycle
      ae:	10 86       	std	Z+8, r1	; 0x08
	 ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc ; //samples:
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	81 87       	std	Z+9, r24	; 0x09
	 ADC0.COMMAND = ADC_MODE_BURST_SCALING_gc; // 1 sample
      b4:	80 e5       	ldi	r24, 0x50	; 80
      b6:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      b8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f73d8>
      bc:	80 fd       	sbrc	r24, 0
      be:	fc cf       	rjmp	.-8      	; 0xb8 <ADC0_init+0x18>

 }
      c0:	08 95       	ret

000000c2 <ADC0_Read>:

 uint16_t ADC0_Read(){
	 ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
      c2:	e0 e0       	ldi	r30, 0x00	; 0
      c4:	f6 e0       	ldi	r31, 0x06	; 6
      c6:	82 85       	ldd	r24, Z+10	; 0x0a
      c8:	81 60       	ori	r24, 0x01	; 1
      ca:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      cc:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f73d8>
      d0:	80 fd       	sbrc	r24, 0
      d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC0_Read+0xa>
	 while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm));
      d4:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f73d7>
      d8:	81 ff       	sbrs	r24, 1
      da:	fc cf       	rjmp	.-8      	; 0xd4 <ADC0_Read+0x12>
	 ADC0.INTFLAGS = ADC_SAMPRDY_bm; //clear result ready flag
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f6 e0       	ldi	r31, 0x06	; 6
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	85 83       	std	Z+5, r24	; 0x05
	 return ADC0.SAMPLE; //return average ADC value of 1024 measurements
      e4:	84 89       	ldd	r24, Z+20	; 0x14
      e6:	95 89       	ldd	r25, Z+21	; 0x15
 }
      e8:	08 95       	ret

000000ea <ReadSolarCells>:


void ReadSolarCells(solarrcells_t channel){
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29

	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //selecting object where data will be saved according to selected channel (Voltage or Current)
      ee:	85 30       	cpi	r24, 0x05	; 5
      f0:	19 f4       	brne	.+6      	; 0xf8 <ReadSolarCells+0xe>
      f2:	c0 e0       	ldi	r28, 0x00	; 0
      f4:	d8 e3       	ldi	r29, 0x38	; 56
      f6:	02 c0       	rjmp	.+4      	; 0xfc <ReadSolarCells+0x12>
      f8:	c2 e0       	ldi	r28, 0x02	; 2
      fa:	d8 e3       	ldi	r29, 0x38	; 56

	ADC0.MUXPOS = channel;
      fc:	e0 e0       	ldi	r30, 0x00	; 0
      fe:	f6 e0       	ldi	r31, 0x06	; 6
     100:	84 87       	std	Z+12, r24	; 0x0c
	
	ADC0.CTRLC |= ADC_REFSEL_1024MV_gc;  // 1.024V 
     102:	82 81       	ldd	r24, Z+2	; 0x02
     104:	84 60       	ori	r24, 0x04	; 4
     106:	82 83       	std	Z+2, r24	; 0x02
	if(ADC0_Read()== 0xfff){
     108:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     10c:	8f 3f       	cpi	r24, 0xFF	; 255
     10e:	9f 40       	sbci	r25, 0x0F	; 15
     110:	09 f0       	breq	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	60 c0       	rjmp	.+192    	; 0x1d4 <__EEPROM_REGION_LENGTH__+0xd4>
		ADC0.CTRLC |= ADC_REFSEL_2048MV_gc; //2.048V
     114:	e0 e0       	ldi	r30, 0x00	; 0
     116:	f6 e0       	ldi	r31, 0x06	; 6
     118:	82 81       	ldd	r24, Z+2	; 0x02
     11a:	85 60       	ori	r24, 0x05	; 5
     11c:	82 83       	std	Z+2, r24	; 0x02
		if (ADC0_Read()== 0xfff){
     11e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     122:	8f 3f       	cpi	r24, 0xFF	; 255
     124:	9f 40       	sbci	r25, 0x0F	; 15
     126:	f1 f5       	brne	.+124    	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
			ADC0.CTRLC |= ADC_REFSEL_4096MV_gc; //4.096V
     128:	e0 e0       	ldi	r30, 0x00	; 0
     12a:	f6 e0       	ldi	r31, 0x06	; 6
     12c:	82 81       	ldd	r24, Z+2	; 0x02
     12e:	87 60       	ori	r24, 0x07	; 7
     130:	82 83       	std	Z+2, r24	; 0x02
			if(ADC0_Read()== 0xfff){ //this is more less actual limit of SLS but still
     132:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     136:	8f 3f       	cpi	r24, 0xFF	; 255
     138:	9f 40       	sbci	r25, 0x0F	; 15
     13a:	e1 f4       	brne	.+56     	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
				ADC0.CTRLC |= ADC_REFSEL_VDD_gc; //ref voltage is 5V (TMC1100a4 = 400mV/A min: 0.125A, max: 12A), sollar cells max is ScI 10.64A+-3% ~11A, 11 * 0.4 = 4.4V > 4.096Vref
     13c:	e0 e0       	ldi	r30, 0x00	; 0
     13e:	f6 e0       	ldi	r31, 0x06	; 6
     140:	82 81       	ldd	r24, Z+2	; 0x02
     142:	82 83       	std	Z+2, r24	; 0x02
				voltageORcurrent->Result = (ADC0_Read()/1.25)+0.5; //Assume Vdd is 5.0V. 1.25 same as /12.5 * 10
     144:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     148:	bc 01       	movw	r22, r24
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__floatunsisf>
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	40 ea       	ldi	r20, 0xA0	; 160
     158:	5f e3       	ldi	r21, 0x3F	; 63
     15a:	0e 94 2f 04 	call	0x85e	; 0x85e <__divsf3>
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	5f e3       	ldi	r21, 0x3F	; 63
     166:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
     16a:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
     16e:	68 83       	st	Y, r22
     170:	79 83       	std	Y+1, r23	; 0x01
     172:	47 c0       	rjmp	.+142    	; 0x202 <__EEPROM_REGION_LENGTH__+0x102>
			}
			else
			voltageORcurrent->Result = (ADC0_Read()/1.024)+0.5;
     174:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     178:	bc 01       	movw	r22, r24
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__floatunsisf>
     182:	2f e6       	ldi	r18, 0x6F	; 111
     184:	32 e1       	ldi	r19, 0x12	; 18
     186:	43 e8       	ldi	r20, 0x83	; 131
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	0e 94 2f 04 	call	0x85e	; 0x85e <__divsf3>
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	5f e3       	ldi	r21, 0x3F	; 63
     196:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
     19a:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
     19e:	68 83       	st	Y, r22
     1a0:	79 83       	std	Y+1, r23	; 0x01
     1a2:	2f c0       	rjmp	.+94     	; 0x202 <__EEPROM_REGION_LENGTH__+0x102>
		}
		else
		voltageORcurrent->Result = (ADC0_Read()/0.512)+0.5;
     1a4:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     1a8:	bc 01       	movw	r22, r24
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__floatunsisf>
     1b2:	2f e6       	ldi	r18, 0x6F	; 111
     1b4:	32 e1       	ldi	r19, 0x12	; 18
     1b6:	43 e0       	ldi	r20, 0x03	; 3
     1b8:	5f e3       	ldi	r21, 0x3F	; 63
     1ba:	0e 94 2f 04 	call	0x85e	; 0x85e <__divsf3>
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	5f e3       	ldi	r21, 0x3F	; 63
     1c6:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
     1ca:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
     1ce:	68 83       	st	Y, r22
     1d0:	79 83       	std	Y+1, r23	; 0x01
     1d2:	17 c0       	rjmp	.+46     	; 0x202 <__EEPROM_REGION_LENGTH__+0x102>
	}
	else
	voltageORcurrent->Result = (ADC0_Read()/0.256)+0.5;  // Read ADC value, scale it, and round the result
     1d4:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC0_Read>
     1d8:	bc 01       	movw	r22, r24
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__floatunsisf>
     1e2:	2f e6       	ldi	r18, 0x6F	; 111
     1e4:	32 e1       	ldi	r19, 0x12	; 18
     1e6:	43 e8       	ldi	r20, 0x83	; 131
     1e8:	5e e3       	ldi	r21, 0x3E	; 62
     1ea:	0e 94 2f 04 	call	0x85e	; 0x85e <__divsf3>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	5f e3       	ldi	r21, 0x3F	; 63
     1f6:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
     1fa:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
     1fe:	68 83       	st	Y, r22
     200:	79 83       	std	Y+1, r23	; 0x01
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	80 e6       	ldi	r24, 0x60	; 96
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	81 e6       	ldi	r24, 0x61	; 97
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 5e 08 	call	0x10bc	; 0x10bc <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
     21c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6e35>
     220:	80 fd       	sbrc	r24, 0
     222:	fc cf       	rjmp	.-8      	; 0x21c <CLOCK_INHF_clock_init+0x14>
     224:	08 95       	ret

00000226 <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     22a:	8b 01       	movw	r16, r22
     22c:	9c 01       	movw	r18, r24
     22e:	0f 2e       	mov	r0, r31
     230:	fc e0       	ldi	r31, 0x0C	; 12
     232:	36 95       	lsr	r19
     234:	27 95       	ror	r18
     236:	17 95       	ror	r17
     238:	07 95       	ror	r16
     23a:	fa 95       	dec	r31
     23c:	d1 f7       	brne	.-12     	; 0x232 <crc6_mt6701_lookup+0xc>
     23e:	f0 2d       	mov	r31, r0
     240:	0f 73       	andi	r16, 0x3F	; 63
     242:	11 27       	eor	r17, r17
     244:	22 27       	eor	r18, r18
     246:	33 27       	eor	r19, r19
     248:	f8 01       	movw	r30, r16
     24a:	e2 5d       	subi	r30, 0xD2	; 210
     24c:	fd 46       	sbci	r31, 0x6D	; 109
     24e:	40 81       	ld	r20, Z
     250:	8b 01       	movw	r16, r22
     252:	9c 01       	movw	r18, r24
     254:	68 94       	set
     256:	15 f8       	bld	r1, 5
     258:	36 95       	lsr	r19
     25a:	27 95       	ror	r18
     25c:	17 95       	ror	r17
     25e:	07 95       	ror	r16
     260:	16 94       	lsr	r1
     262:	d1 f7       	brne	.-12     	; 0x258 <crc6_mt6701_lookup+0x32>
     264:	0f 73       	andi	r16, 0x3F	; 63
     266:	11 27       	eor	r17, r17
     268:	22 27       	eor	r18, r18
     26a:	33 27       	eor	r19, r19
     26c:	04 27       	eor	r16, r20
     26e:	f8 01       	movw	r30, r16
     270:	e2 5d       	subi	r30, 0xD2	; 210
     272:	fd 46       	sbci	r31, 0x6D	; 109
     274:	20 81       	ld	r18, Z
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	8f 73       	andi	r24, 0x3F	; 63
     27c:	99 27       	eor	r25, r25
     27e:	aa 27       	eor	r26, r26
     280:	bb 27       	eor	r27, r27
     282:	82 27       	eor	r24, r18
     284:	fc 01       	movw	r30, r24
     286:	e2 5d       	subi	r30, 0xD2	; 210
     288:	fd 46       	sbci	r31, 0x6D	; 109
}
     28a:	80 81       	ld	r24, Z
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret

00000292 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     292:	cf 93       	push	r28
     294:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     296:	80 81       	ld	r24, Z
     298:	91 81       	ldd	r25, Z+1	; 0x01
     29a:	a2 81       	ldd	r26, Z+2	; 0x02
     29c:	b3 81       	ldd	r27, Z+3	; 0x03
     29e:	c8 2f       	mov	r28, r24
     2a0:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	68 94       	set
     2a8:	15 f8       	bld	r1, 5
     2aa:	96 95       	lsr	r25
     2ac:	87 95       	ror	r24
     2ae:	77 95       	ror	r23
     2b0:	67 95       	ror	r22
     2b2:	16 94       	lsr	r1
     2b4:	d1 f7       	brne	.-12     	; 0x2aa <MT6701CRC+0x18>
     2b6:	60 83       	st	Z, r22
     2b8:	71 83       	std	Z+1, r23	; 0x01
     2ba:	82 83       	std	Z+2, r24	; 0x02
     2bc:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     2be:	0e 94 13 01 	call	0x226	; 0x226 <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	c8 13       	cpse	r28, r24
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <MT6701CRC+0x38>
     2c8:	90 e0       	ldi	r25, 0x00	; 0
}
     2ca:	89 2f       	mov	r24, r25
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     2d0:	2f 92       	push	r2
     2d2:	3f 92       	push	r3
     2d4:	4f 92       	push	r4
     2d6:	5f 92       	push	r5
     2d8:	6f 92       	push	r6
     2da:	7f 92       	push	r7
     2dc:	8f 92       	push	r8
     2de:	9f 92       	push	r9
     2e0:	af 92       	push	r10
     2e2:	bf 92       	push	r11
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	2b 97       	sbiw	r28, 0x0b	; 11
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	c2 2e       	mov	r12, r18
     300:	b3 2e       	mov	r11, r19
     302:	a4 2e       	mov	r10, r20
     304:	95 2e       	mov	r9, r21
     306:	86 2e       	mov	r8, r22
     308:	77 2e       	mov	r7, r23
     30a:	68 2e       	mov	r6, r24
     30c:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     30e:	f2 2e       	mov	r15, r18
     310:	03 2f       	mov	r16, r19
     312:	14 2f       	mov	r17, r20
     314:	5a 87       	std	Y+10, r21	; 0x0a
     316:	69 83       	std	Y+1, r22	; 0x01
     318:	b7 2f       	mov	r27, r23
     31a:	d8 2e       	mov	r13, r24
     31c:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     31e:	e0 e0       	ldi	r30, 0x00	; 0
     320:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     322:	14 c0       	rjmp	.+40     	; 0x34c <crc8_cdma2000+0x7c>
        length++;
     324:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     326:	2f 2d       	mov	r18, r15
     328:	30 2f       	mov	r19, r16
     32a:	41 2f       	mov	r20, r17
     32c:	5a 85       	ldd	r21, Y+10	; 0x0a
     32e:	69 81       	ldd	r22, Y+1	; 0x01
     330:	7b 2f       	mov	r23, r27
     332:	8d 2d       	mov	r24, r13
     334:	9e 2d       	mov	r25, r14
     336:	08 e0       	ldi	r16, 0x08	; 8
     338:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__lshrdi3>
     33c:	f2 2e       	mov	r15, r18
     33e:	03 2f       	mov	r16, r19
     340:	14 2f       	mov	r17, r20
     342:	5a 87       	std	Y+10, r21	; 0x0a
     344:	69 83       	std	Y+1, r22	; 0x01
     346:	b7 2f       	mov	r27, r23
     348:	d8 2e       	mov	r13, r24
     34a:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     34c:	2f 2d       	mov	r18, r15
     34e:	30 2f       	mov	r19, r16
     350:	41 2f       	mov	r20, r17
     352:	5a 85       	ldd	r21, Y+10	; 0x0a
     354:	69 81       	ldd	r22, Y+1	; 0x01
     356:	7b 2f       	mov	r23, r27
     358:	8d 2d       	mov	r24, r13
     35a:	9e 2d       	mov	r25, r14
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	0e 94 95 05 	call	0xb2a	; 0xb2a <__cmpdi2_s8>
     362:	01 f7       	brne	.-64     	; 0x324 <crc8_cdma2000+0x54>
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	8a 87       	std	Y+10, r24	; 0x0a
     368:	cb 86       	std	Y+11, r12	; 0x0b
     36a:	b9 82       	std	Y+1, r11	; 0x01
     36c:	4a 2c       	mov	r4, r10
     36e:	39 2c       	mov	r3, r9
     370:	28 2c       	mov	r2, r8
     372:	1a c0       	rjmp	.+52     	; 0x3a8 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     374:	8d 01       	movw	r16, r26
     376:	00 0f       	add	r16, r16
     378:	11 1f       	adc	r17, r17
     37a:	00 0f       	add	r16, r16
     37c:	11 1f       	adc	r17, r17
     37e:	00 0f       	add	r16, r16
     380:	11 1f       	adc	r17, r17
     382:	2b 85       	ldd	r18, Y+11	; 0x0b
     384:	39 81       	ldd	r19, Y+1	; 0x01
     386:	44 2d       	mov	r20, r4
     388:	53 2d       	mov	r21, r3
     38a:	62 2d       	mov	r22, r2
     38c:	77 2d       	mov	r23, r7
     38e:	86 2d       	mov	r24, r6
     390:	95 2d       	mov	r25, r5
     392:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__lshrdi3>
     396:	8a 84       	ldd	r8, Y+10	; 0x0a
     398:	82 26       	eor	r8, r18
     39a:	91 2c       	mov	r9, r1
     39c:	f4 01       	movw	r30, r8
     39e:	e2 5d       	subi	r30, 0xD2	; 210
     3a0:	fe 46       	sbci	r31, 0x6E	; 110
     3a2:	80 81       	ld	r24, Z
     3a4:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     3a6:	fd 01       	movw	r30, r26
     3a8:	df 01       	movw	r26, r30
     3aa:	11 97       	sbiw	r26, 0x01	; 1
     3ac:	ef 2b       	or	r30, r31
     3ae:	11 f7       	brne	.-60     	; 0x374 <crc8_cdma2000+0xa4>
     3b0:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     3b2:	2b 96       	adiw	r28, 0x0b	; 11
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	8f 90       	pop	r8
     3d0:	7f 90       	pop	r7
     3d2:	6f 90       	pop	r6
     3d4:	5f 90       	pop	r5
     3d6:	4f 90       	pop	r4
     3d8:	3f 90       	pop	r3
     3da:	2f 90       	pop	r2
     3dc:	08 95       	ret

000003de <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     3de:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f73b4>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     3e2:	e0 e2       	ldi	r30, 0x20	; 32
     3e4:	f4 e0       	ldi	r31, 0x04	; 4
     3e6:	86 e0       	ldi	r24, 0x06	; 6
     3e8:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
     3ee:	99 e0       	ldi	r25, 0x09	; 9
     3f0:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
     3f2:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     3f4:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     3f6:	e0 e0       	ldi	r30, 0x00	; 0
     3f8:	f4 e0       	ldi	r31, 0x04	; 4
     3fa:	92 ec       	ldi	r25, 0xC2	; 194
     3fc:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
     3fe:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
     400:	94 e0       	ldi	r25, 0x04	; 4
     402:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     404:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     406:	80 ec       	ldi	r24, 0xC0	; 192
     408:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
     40a:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
     40c:	95 8b       	std	Z+21, r25	; 0x15
     40e:	08 95       	ret

00000410 <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
     410:	0e 94 04 01 	call	0x208	; 0x208 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
     414:	0e 94 ef 01 	call	0x3de	; 0x3de <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     418:	0e 94 3d 03 	call	0x67a	; 0x67a <USART0_init>
	USART1_init();
     41c:	0e 94 66 03 	call	0x6cc	; 0x6cc <USART1_init>
	ADC0_init();
     420:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	0e 94 b0 02 	call	0x560	; 0x560 <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     42a:	80 e4       	ldi	r24, 0x40	; 64
     42c:	0e 94 b0 02 	call	0x560	; 0x560 <MT6701_SSI_Angle>
		ReadSolarCells(Voltage);
     430:	85 e0       	ldi	r24, 0x05	; 5
     432:	0e 94 75 00 	call	0xea	; 0xea <ReadSolarCells>
		ReadSolarCells(Current);
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	0e 94 75 00 	call	0xea	; 0xea <ReadSolarCells>
		uint8_t y = YEndSwitches();
     43c:	0e 94 b4 03 	call	0x768	; 0x768 <YEndSwitches>
     440:	d8 2e       	mov	r13, r24
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;
     442:	ca e0       	ldi	r28, 0x0A	; 10
     444:	d8 e3       	ldi	r29, 0x38	; 56
     446:	48 81       	ld	r20, Y
     448:	59 81       	ldd	r21, Y+1	; 0x01
     44a:	24 2f       	mov	r18, r20
     44c:	35 2f       	mov	r19, r21
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 e2       	ldi	r16, 0x28	; 40
     45c:	0e 94 5e 05 	call	0xabc	; 0xabc <__ashldi3>
     460:	72 2e       	mov	r7, r18
     462:	e3 2f       	mov	r30, r19
     464:	84 2e       	mov	r8, r20
     466:	95 2e       	mov	r9, r21
     468:	a6 2e       	mov	r10, r22
     46a:	17 2f       	mov	r17, r23
     46c:	68 2e       	mov	r6, r24
     46e:	f9 2f       	mov	r31, r25
     470:	0f 2e       	mov	r0, r31
     472:	f4 e0       	ldi	r31, 0x04	; 4
     474:	ef 2e       	mov	r14, r31
     476:	f8 e3       	ldi	r31, 0x38	; 56
     478:	ff 2e       	mov	r15, r31
     47a:	f0 2d       	mov	r31, r0
     47c:	d7 01       	movw	r26, r14
     47e:	8d 91       	ld	r24, X+
     480:	9c 91       	ld	r25, X
     482:	ac 01       	movw	r20, r24
     484:	24 2f       	mov	r18, r20
     486:	35 2f       	mov	r19, r21
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	08 e1       	ldi	r16, 0x18	; 24
     496:	0e 94 5e 05 	call	0xabc	; 0xabc <__ashldi3>
     49a:	c2 2e       	mov	r12, r18
     49c:	e3 2b       	or	r30, r19
     49e:	84 2a       	or	r8, r20
     4a0:	95 2a       	or	r9, r21
     4a2:	a6 2a       	or	r10, r22
     4a4:	b1 2e       	mov	r11, r17
     4a6:	b7 2a       	or	r11, r23
     4a8:	00 91 00 38 	lds	r16, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     4ac:	10 91 01 38 	lds	r17, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fc e0       	ldi	r31, 0x0C	; 12
     4b8:	00 0f       	add	r16, r16
     4ba:	11 1f       	adc	r17, r17
     4bc:	22 1f       	adc	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	fa 95       	dec	r31
     4c2:	d1 f7       	brne	.-12     	; 0x4b8 <main+0xa8>
     4c4:	f0 2d       	mov	r31, r0
     4c6:	b7 2d       	mov	r27, r7
     4c8:	bc 29       	or	r27, r12
     4ca:	e1 2b       	or	r30, r17
     4cc:	82 2a       	or	r8, r18
     4ce:	93 2a       	or	r9, r19
     4d0:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <ReadCurrent>
     4d4:	10 91 03 38 	lds	r17, 0x3803	; 0x803803 <ReadCurrent+0x1>
     4d8:	02 95       	swap	r16
     4da:	12 95       	swap	r17
     4dc:	10 7f       	andi	r17, 0xF0	; 240
     4de:	10 27       	eor	r17, r16
     4e0:	00 7f       	andi	r16, 0xF0	; 240
     4e2:	10 27       	eor	r17, r16
     4e4:	b0 2b       	or	r27, r16
     4e6:	31 2f       	mov	r19, r17
     4e8:	3e 2b       	or	r19, r30
     4ea:	2b 2f       	mov	r18, r27
     4ec:	2d 29       	or	r18, r13
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint8_t)ReadCurrent.Result,            ///< Current (2 digits)
		        (uint8_t)y,            ///< End switch status (1 digit)
		        (uint8_t)crc8_cdma2000(combined)); ///< CRC value (1 byte)
     4ee:	48 2d       	mov	r20, r8
     4f0:	59 2d       	mov	r21, r9
     4f2:	6a 2d       	mov	r22, r10
     4f4:	7b 2d       	mov	r23, r11
     4f6:	86 29       	or	r24, r6
     4f8:	9f 2b       	or	r25, r31
     4fa:	0e 94 68 01 	call	0x2d0	; 0x2d0 <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint8_t)ReadCurrent.Result,            ///< Current (2 digits)
     4fe:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <ReadCurrent>
     502:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <ReadCurrent+0x1>

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     506:	e0 91 00 38 	lds	r30, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     50a:	f0 91 01 38 	lds	r31, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     50e:	d7 01       	movw	r26, r14
     510:	6c 91       	ld	r22, X
     512:	11 96       	adiw	r26, 0x01	; 1
     514:	7c 91       	ld	r23, X
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     516:	48 81       	ld	r20, Y
     518:	59 81       	ldd	r21, Y+1	; 0x01
		uint8_t y = YEndSwitches();
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 40) | ((uint64_t)MT6701AZIMUTH.Angle << 24) | ((uint32_t)ReadVoltage.Result << 12) | ((uint16_t)ReadCurrent.Result << 4) | y;


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%02x%x%02x>\r\n",
     51a:	1f 92       	push	r1
     51c:	8f 93       	push	r24
     51e:	1f 92       	push	r1
     520:	df 92       	push	r13
     522:	c9 01       	movw	r24, r18
     524:	99 27       	eor	r25, r25
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	ff 93       	push	r31
     52c:	ef 93       	push	r30
     52e:	7f 93       	push	r23
     530:	6f 93       	push	r22
     532:	5f 93       	push	r21
     534:	4f 93       	push	r20
     536:	8e e6       	ldi	r24, 0x6E	; 110
     538:	92 e9       	ldi	r25, 0x92	; 146
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 96 03 	call	0x72c	; 0x72c <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     542:	bf e7       	ldi	r27, 0x7F	; 127
     544:	2a e1       	ldi	r18, 0x1A	; 26
     546:	86 e0       	ldi	r24, 0x06	; 6
     548:	b1 50       	subi	r27, 0x01	; 1
     54a:	20 40       	sbci	r18, 0x00	; 0
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x138>
     550:	00 c0       	rjmp	.+0      	; 0x552 <main+0x142>
     552:	00 00       	nop
     554:	ad b7       	in	r26, 0x3d	; 61
     556:	be b7       	in	r27, 0x3e	; 62
     558:	1e 96       	adiw	r26, 0x0e	; 14
     55a:	ad bf       	out	0x3d, r26	; 61
     55c:	be bf       	out	0x3e, r27	; 62
     55e:	62 cf       	rjmp	.-316    	; 0x424 <main+0x14>

00000560 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	00 d0       	rcall	.+0      	; 0x56a <MT6701_SSI_Angle+0xa>
     56a:	00 d0       	rcall	.+0      	; 0x56c <MT6701_SSI_Angle+0xc>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     572:	19 82       	std	Y+1, r1	; 0x01
     574:	1a 82       	std	Y+2, r1	; 0x02
     576:	1b 82       	std	Y+3, r1	; 0x03
     578:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     57a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f71d8>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     57e:	10 e0       	ldi	r17, 0x00	; 0
     580:	24 c0       	rjmp	.+72     	; 0x5ca <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     582:	8f e6       	ldi	r24, 0x6F	; 111
     584:	0e 94 48 03 	call	0x690	; 0x690 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     588:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f75d6>
     58c:	86 ff       	sbrs	r24, 6
     58e:	fc cf       	rjmp	.-8      	; 0x588 <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     590:	e0 e0       	ldi	r30, 0x00	; 0
     592:	f8 e0       	ldi	r31, 0x08	; 8
     594:	84 81       	ldd	r24, Z+4	; 0x04
     596:	80 64       	ori	r24, 0x40	; 64
     598:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	ab 81       	ldd	r26, Y+3	; 0x03
     5a0:	bc 81       	ldd	r27, Y+4	; 0x04
     5a2:	ba 2f       	mov	r27, r26
     5a4:	a9 2f       	mov	r26, r25
     5a6:	98 2f       	mov	r25, r24
     5a8:	88 27       	eor	r24, r24
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	ab 83       	std	Y+3, r26	; 0x03
     5b0:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     5b2:	0e 94 4f 03 	call	0x69e	; 0x69e <USART0_readChar>
     5b6:	49 81       	ldd	r20, Y+1	; 0x01
     5b8:	5a 81       	ldd	r21, Y+2	; 0x02
     5ba:	6b 81       	ldd	r22, Y+3	; 0x03
     5bc:	7c 81       	ldd	r23, Y+4	; 0x04
     5be:	48 2b       	or	r20, r24
     5c0:	49 83       	std	Y+1, r20	; 0x01
     5c2:	5a 83       	std	Y+2, r21	; 0x02
     5c4:	6b 83       	std	Y+3, r22	; 0x03
     5c6:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     5c8:	1f 5f       	subi	r17, 0xFF	; 255
     5ca:	13 30       	cpi	r17, 0x03	; 3
     5cc:	d0 f2       	brcs	.-76     	; 0x582 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     5ce:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f71d7>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     5d2:	00 38       	cpi	r16, 0x80	; 128
     5d4:	19 f4       	brne	.+6      	; 0x5dc <MT6701_SSI_Angle+0x7c>
     5d6:	0a e0       	ldi	r16, 0x0A	; 10
     5d8:	18 e3       	ldi	r17, 0x38	; 56
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <MT6701_SSI_Angle+0x80>
     5dc:	04 e0       	ldi	r16, 0x04	; 4
     5de:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	0e 94 49 01 	call	0x292	; 0x292 <MT6701CRC>
     5e8:	f8 01       	movw	r30, r16
     5ea:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	83 70       	andi	r24, 0x03	; 3
     5f0:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	ab 81       	ldd	r26, Y+3	; 0x03
     5f8:	bc 81       	ldd	r27, Y+4	; 0x04
     5fa:	b6 95       	lsr	r27
     5fc:	a7 95       	ror	r26
     5fe:	97 95       	ror	r25
     600:	87 95       	ror	r24
     602:	b6 95       	lsr	r27
     604:	a7 95       	ror	r26
     606:	97 95       	ror	r25
     608:	87 95       	ror	r24
     60a:	81 70       	andi	r24, 0x01	; 1
     60c:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	ab 81       	ldd	r26, Y+3	; 0x03
     614:	bc 81       	ldd	r27, Y+4	; 0x04
     616:	ac 01       	movw	r20, r24
     618:	bd 01       	movw	r22, r26
     61a:	68 94       	set
     61c:	12 f8       	bld	r1, 2
     61e:	76 95       	lsr	r23
     620:	67 95       	ror	r22
     622:	57 95       	ror	r21
     624:	47 95       	ror	r20
     626:	16 94       	lsr	r1
     628:	d1 f7       	brne	.-12     	; 0x61e <MT6701_SSI_Angle+0xbe>
     62a:	24 2f       	mov	r18, r20
     62c:	21 70       	andi	r18, 0x01	; 1
     62e:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	68 94       	set
     636:	13 f8       	bld	r1, 3
     638:	96 95       	lsr	r25
     63a:	87 95       	ror	r24
     63c:	77 95       	ror	r23
     63e:	67 95       	ror	r22
     640:	16 94       	lsr	r1
     642:	d1 f7       	brne	.-12     	; 0x638 <MT6701_SSI_Angle+0xd8>
     644:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__floatunsisf>
     648:	23 e5       	ldi	r18, 0x53	; 83
     64a:	34 e0       	ldi	r19, 0x04	; 4
     64c:	49 ee       	ldi	r20, 0xE9	; 233
     64e:	5e e3       	ldi	r21, 0x3E	; 62
     650:	0e 94 2f 04 	call	0x85e	; 0x85e <__divsf3>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
     660:	0e 94 a1 04 	call	0x942	; 0x942 <__fixunssfsi>
     664:	f8 01       	movw	r30, r16
     666:	60 83       	st	Z, r22
     668:	71 83       	std	Z+1, r23	; 0x01
     66a:	24 96       	adiw	r28, 0x04	; 4
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	de bf       	out	0x3e, r29	; 62
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	08 95       	ret

0000067a <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     67a:	e0 e0       	ldi	r30, 0x00	; 0
     67c:	f8 e0       	ldi	r31, 0x08	; 8
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	95 e0       	ldi	r25, 0x05	; 5
     682:	80 87       	std	Z+8, r24	; 0x08
     684:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     68a:	82 ec       	ldi	r24, 0xC2	; 194
     68c:	87 83       	std	Z+7, r24	; 0x07
     68e:	08 95       	ret

00000690 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     690:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f75d6>
     694:	95 ff       	sbrs	r25, 5
     696:	fc cf       	rjmp	.-8      	; 0x690 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     698:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f75d4>
     69c:	08 95       	ret

0000069e <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f75d6>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     6a4:	80 e4       	ldi	r24, 0x40	; 64
     6a6:	9c e9       	ldi	r25, 0x9C	; 156
     6a8:	a0 e0       	ldi	r26, 0x00	; 0
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	a1 09       	sbc	r26, r1
     6b2:	b1 09       	sbc	r27, r1
     6b4:	21 f4       	brne	.+8      	; 0x6be <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     6be:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f75d6>
     6c2:	22 23       	and	r18, r18
     6c4:	a4 f7       	brge	.-24     	; 0x6ae <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     6c6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f75d2>
}
     6ca:	08 95       	ret

000006cc <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     6cc:	e0 e2       	ldi	r30, 0x20	; 32
     6ce:	f8 e0       	ldi	r31, 0x08	; 8
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	80 87       	std	Z+8, r24	; 0x08
     6d6:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     6d8:	82 e4       	ldi	r24, 0x42	; 66
     6da:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	87 83       	std	Z+7, r24	; 0x07
     6e0:	08 95       	ret

000006e2 <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     6e2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f75f6>
     6e6:	95 ff       	sbrs	r25, 5
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     6ea:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f75f4>
     6ee:	08 95       	ret

000006f0 <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     700:	f8 01       	movw	r30, r16
     702:	ec 0f       	add	r30, r28
     704:	fd 1f       	adc	r31, r29
     706:	80 81       	ld	r24, Z
     708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     70c:	21 96       	adiw	r28, 0x01	; 1
     70e:	f8 01       	movw	r30, r16
     710:	01 90       	ld	r0, Z+
     712:	00 20       	and	r0, r0
     714:	e9 f7       	brne	.-6      	; 0x710 <USART1_sendString+0x20>
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	e0 1b       	sub	r30, r16
     71a:	f1 0b       	sbc	r31, r17
     71c:	ce 17       	cp	r28, r30
     71e:	df 07       	cpc	r29, r31
     720:	78 f3       	brcs	.-34     	; 0x700 <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	6e 97       	sbiw	r28, 0x1e	; 30
     736:	cd bf       	out	0x3d, r28	; 61
     738:	de bf       	out	0x3e, r29	; 62
     73a:	9e 01       	movw	r18, r28
     73c:	2d 5d       	subi	r18, 0xDD	; 221
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	41 91       	ld	r20, Z+
     744:	51 91       	ld	r21, Z+
     746:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     748:	6e e1       	ldi	r22, 0x1E	; 30
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	0e 94 a1 05 	call	0xb42	; 0xb42 <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 78 03 	call	0x6f0	; 0x6f0 <USART1_sendString>
     75c:	6e 96       	adiw	r28, 0x1e	; 30
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	de bf       	out	0x3e, r29	; 62
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
     768:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f71fa>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	89 27       	eor	r24, r25
     770:	81 70       	andi	r24, 0x01	; 1
     772:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f71da>
     776:	92 fd       	sbrc	r25, 2
     778:	02 c0       	rjmp	.+4      	; 0x77e <YEndSwitches+0x16>
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	01 c0       	rjmp	.+2      	; 0x780 <YEndSwitches+0x18>
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	08 95       	ret

00000784 <__subsf3>:
     784:	50 58       	subi	r21, 0x80	; 128

00000786 <__addsf3>:
     786:	bb 27       	eor	r27, r27
     788:	aa 27       	eor	r26, r26
     78a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__addsf3x>
     78e:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_round>
     792:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscA>
     796:	38 f0       	brcs	.+14     	; 0x7a6 <__addsf3+0x20>
     798:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscB>
     79c:	20 f0       	brcs	.+8      	; 0x7a6 <__addsf3+0x20>
     79e:	39 f4       	brne	.+14     	; 0x7ae <__addsf3+0x28>
     7a0:	9f 3f       	cpi	r25, 0xFF	; 255
     7a2:	19 f4       	brne	.+6      	; 0x7aa <__addsf3+0x24>
     7a4:	26 f4       	brtc	.+8      	; 0x7ae <__addsf3+0x28>
     7a6:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_nan>
     7aa:	0e f4       	brtc	.+2      	; 0x7ae <__addsf3+0x28>
     7ac:	e0 95       	com	r30
     7ae:	e7 fb       	bst	r30, 7
     7b0:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>

000007b4 <__addsf3x>:
     7b4:	e9 2f       	mov	r30, r25
     7b6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_split3>
     7ba:	58 f3       	brcs	.-42     	; 0x792 <__addsf3+0xc>
     7bc:	ba 17       	cp	r27, r26
     7be:	62 07       	cpc	r22, r18
     7c0:	73 07       	cpc	r23, r19
     7c2:	84 07       	cpc	r24, r20
     7c4:	95 07       	cpc	r25, r21
     7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__addsf3x+0x1c>
     7c8:	79 f4       	brne	.+30     	; 0x7e8 <__addsf3x+0x34>
     7ca:	a6 f5       	brtc	.+104    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     7cc:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_zero>
     7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3x+0x20>
     7d2:	e0 95       	com	r30
     7d4:	0b 2e       	mov	r0, r27
     7d6:	ba 2f       	mov	r27, r26
     7d8:	a0 2d       	mov	r26, r0
     7da:	0b 01       	movw	r0, r22
     7dc:	b9 01       	movw	r22, r18
     7de:	90 01       	movw	r18, r0
     7e0:	0c 01       	movw	r0, r24
     7e2:	ca 01       	movw	r24, r20
     7e4:	a0 01       	movw	r20, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	ff 27       	eor	r31, r31
     7ea:	59 1b       	sub	r21, r25
     7ec:	99 f0       	breq	.+38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7ee:	59 3f       	cpi	r21, 0xF9	; 249
     7f0:	50 f4       	brcc	.+20     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7f2:	50 3e       	cpi	r21, 0xE0	; 224
     7f4:	68 f1       	brcs	.+90     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     7f6:	1a 16       	cp	r1, r26
     7f8:	f0 40       	sbci	r31, 0x00	; 0
     7fa:	a2 2f       	mov	r26, r18
     7fc:	23 2f       	mov	r18, r19
     7fe:	34 2f       	mov	r19, r20
     800:	44 27       	eor	r20, r20
     802:	58 5f       	subi	r21, 0xF8	; 248
     804:	f3 cf       	rjmp	.-26     	; 0x7ec <__addsf3x+0x38>
     806:	46 95       	lsr	r20
     808:	37 95       	ror	r19
     80a:	27 95       	ror	r18
     80c:	a7 95       	ror	r26
     80e:	f0 40       	sbci	r31, 0x00	; 0
     810:	53 95       	inc	r21
     812:	c9 f7       	brne	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     814:	7e f4       	brtc	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     816:	1f 16       	cp	r1, r31
     818:	ba 0b       	sbc	r27, r26
     81a:	62 0b       	sbc	r22, r18
     81c:	73 0b       	sbc	r23, r19
     81e:	84 0b       	sbc	r24, r20
     820:	ba f0       	brmi	.+46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     822:	91 50       	subi	r25, 0x01	; 1
     824:	a1 f0       	breq	.+40     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     826:	ff 0f       	add	r31, r31
     828:	bb 1f       	adc	r27, r27
     82a:	66 1f       	adc	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	88 1f       	adc	r24, r24
     830:	c2 f7       	brpl	.-16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     832:	0e c0       	rjmp	.+28     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     834:	ba 0f       	add	r27, r26
     836:	62 1f       	adc	r22, r18
     838:	73 1f       	adc	r23, r19
     83a:	84 1f       	adc	r24, r20
     83c:	48 f4       	brcc	.+18     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     83e:	87 95       	ror	r24
     840:	77 95       	ror	r23
     842:	67 95       	ror	r22
     844:	b7 95       	ror	r27
     846:	f7 95       	ror	r31
     848:	9e 3f       	cpi	r25, 0xFE	; 254
     84a:	08 f0       	brcs	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84c:	b0 cf       	rjmp	.-160    	; 0x7ae <__addsf3+0x28>
     84e:	93 95       	inc	r25
     850:	88 0f       	add	r24, r24
     852:	08 f0       	brcs	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     854:	99 27       	eor	r25, r25
     856:	ee 0f       	add	r30, r30
     858:	97 95       	ror	r25
     85a:	87 95       	ror	r24
     85c:	08 95       	ret

0000085e <__divsf3>:
     85e:	0e 94 43 04 	call	0x886	; 0x886 <__divsf3x>
     862:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_round>
     866:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_pscB>
     86a:	58 f0       	brcs	.+22     	; 0x882 <__divsf3+0x24>
     86c:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscA>
     870:	40 f0       	brcs	.+16     	; 0x882 <__divsf3+0x24>
     872:	29 f4       	brne	.+10     	; 0x87e <__divsf3+0x20>
     874:	5f 3f       	cpi	r21, 0xFF	; 255
     876:	29 f0       	breq	.+10     	; 0x882 <__divsf3+0x24>
     878:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     87c:	51 11       	cpse	r21, r1
     87e:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>
     882:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_nan>

00000886 <__divsf3x>:
     886:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_split3>
     88a:	68 f3       	brcs	.-38     	; 0x866 <__divsf3+0x8>

0000088c <__divsf3_pse>:
     88c:	99 23       	and	r25, r25
     88e:	b1 f3       	breq	.-20     	; 0x87c <__divsf3+0x1e>
     890:	55 23       	and	r21, r21
     892:	91 f3       	breq	.-28     	; 0x878 <__divsf3+0x1a>
     894:	95 1b       	sub	r25, r21
     896:	55 0b       	sbc	r21, r21
     898:	bb 27       	eor	r27, r27
     89a:	aa 27       	eor	r26, r26
     89c:	62 17       	cp	r22, r18
     89e:	73 07       	cpc	r23, r19
     8a0:	84 07       	cpc	r24, r20
     8a2:	38 f0       	brcs	.+14     	; 0x8b2 <__divsf3_pse+0x26>
     8a4:	9f 5f       	subi	r25, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	44 1f       	adc	r20, r20
     8ae:	aa 1f       	adc	r26, r26
     8b0:	a9 f3       	breq	.-22     	; 0x89c <__divsf3_pse+0x10>
     8b2:	35 d0       	rcall	.+106    	; 0x91e <__divsf3_pse+0x92>
     8b4:	0e 2e       	mov	r0, r30
     8b6:	3a f0       	brmi	.+14     	; 0x8c6 <__divsf3_pse+0x3a>
     8b8:	e0 e8       	ldi	r30, 0x80	; 128
     8ba:	32 d0       	rcall	.+100    	; 0x920 <__divsf3_pse+0x94>
     8bc:	91 50       	subi	r25, 0x01	; 1
     8be:	50 40       	sbci	r21, 0x00	; 0
     8c0:	e6 95       	lsr	r30
     8c2:	00 1c       	adc	r0, r0
     8c4:	ca f7       	brpl	.-14     	; 0x8b8 <__divsf3_pse+0x2c>
     8c6:	2b d0       	rcall	.+86     	; 0x91e <__divsf3_pse+0x92>
     8c8:	fe 2f       	mov	r31, r30
     8ca:	29 d0       	rcall	.+82     	; 0x91e <__divsf3_pse+0x92>
     8cc:	66 0f       	add	r22, r22
     8ce:	77 1f       	adc	r23, r23
     8d0:	88 1f       	adc	r24, r24
     8d2:	bb 1f       	adc	r27, r27
     8d4:	26 17       	cp	r18, r22
     8d6:	37 07       	cpc	r19, r23
     8d8:	48 07       	cpc	r20, r24
     8da:	ab 07       	cpc	r26, r27
     8dc:	b0 e8       	ldi	r27, 0x80	; 128
     8de:	09 f0       	breq	.+2      	; 0x8e2 <__divsf3_pse+0x56>
     8e0:	bb 0b       	sbc	r27, r27
     8e2:	80 2d       	mov	r24, r0
     8e4:	bf 01       	movw	r22, r30
     8e6:	ff 27       	eor	r31, r31
     8e8:	93 58       	subi	r25, 0x83	; 131
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	3a f0       	brmi	.+14     	; 0x8fc <__divsf3_pse+0x70>
     8ee:	9e 3f       	cpi	r25, 0xFE	; 254
     8f0:	51 05       	cpc	r21, r1
     8f2:	78 f0       	brcs	.+30     	; 0x912 <__divsf3_pse+0x86>
     8f4:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_inf>
     8f8:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_szero>
     8fc:	5f 3f       	cpi	r21, 0xFF	; 255
     8fe:	e4 f3       	brlt	.-8      	; 0x8f8 <__divsf3_pse+0x6c>
     900:	98 3e       	cpi	r25, 0xE8	; 232
     902:	d4 f3       	brlt	.-12     	; 0x8f8 <__divsf3_pse+0x6c>
     904:	86 95       	lsr	r24
     906:	77 95       	ror	r23
     908:	67 95       	ror	r22
     90a:	b7 95       	ror	r27
     90c:	f7 95       	ror	r31
     90e:	9f 5f       	subi	r25, 0xFF	; 255
     910:	c9 f7       	brne	.-14     	; 0x904 <__divsf3_pse+0x78>
     912:	88 0f       	add	r24, r24
     914:	91 1d       	adc	r25, r1
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	97 f9       	bld	r25, 7
     91c:	08 95       	ret
     91e:	e1 e0       	ldi	r30, 0x01	; 1
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	88 1f       	adc	r24, r24
     926:	bb 1f       	adc	r27, r27
     928:	62 17       	cp	r22, r18
     92a:	73 07       	cpc	r23, r19
     92c:	84 07       	cpc	r24, r20
     92e:	ba 07       	cpc	r27, r26
     930:	20 f0       	brcs	.+8      	; 0x93a <__divsf3_pse+0xae>
     932:	62 1b       	sub	r22, r18
     934:	73 0b       	sbc	r23, r19
     936:	84 0b       	sbc	r24, r20
     938:	ba 0b       	sbc	r27, r26
     93a:	ee 1f       	adc	r30, r30
     93c:	88 f7       	brcc	.-30     	; 0x920 <__divsf3_pse+0x94>
     93e:	e0 95       	com	r30
     940:	08 95       	ret

00000942 <__fixunssfsi>:
     942:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_splitA>
     946:	88 f0       	brcs	.+34     	; 0x96a <__fixunssfsi+0x28>
     948:	9f 57       	subi	r25, 0x7F	; 127
     94a:	98 f0       	brcs	.+38     	; 0x972 <__fixunssfsi+0x30>
     94c:	b9 2f       	mov	r27, r25
     94e:	99 27       	eor	r25, r25
     950:	b7 51       	subi	r27, 0x17	; 23
     952:	b0 f0       	brcs	.+44     	; 0x980 <__fixunssfsi+0x3e>
     954:	e1 f0       	breq	.+56     	; 0x98e <__fixunssfsi+0x4c>
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	88 1f       	adc	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	1a f0       	brmi	.+6      	; 0x966 <__fixunssfsi+0x24>
     960:	ba 95       	dec	r27
     962:	c9 f7       	brne	.-14     	; 0x956 <__fixunssfsi+0x14>
     964:	14 c0       	rjmp	.+40     	; 0x98e <__fixunssfsi+0x4c>
     966:	b1 30       	cpi	r27, 0x01	; 1
     968:	91 f0       	breq	.+36     	; 0x98e <__fixunssfsi+0x4c>
     96a:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_zero>
     96e:	b1 e0       	ldi	r27, 0x01	; 1
     970:	08 95       	ret
     972:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_zero>
     976:	67 2f       	mov	r22, r23
     978:	78 2f       	mov	r23, r24
     97a:	88 27       	eor	r24, r24
     97c:	b8 5f       	subi	r27, 0xF8	; 248
     97e:	39 f0       	breq	.+14     	; 0x98e <__fixunssfsi+0x4c>
     980:	b9 3f       	cpi	r27, 0xF9	; 249
     982:	cc f3       	brlt	.-14     	; 0x976 <__fixunssfsi+0x34>
     984:	86 95       	lsr	r24
     986:	77 95       	ror	r23
     988:	67 95       	ror	r22
     98a:	b3 95       	inc	r27
     98c:	d9 f7       	brne	.-10     	; 0x984 <__fixunssfsi+0x42>
     98e:	3e f4       	brtc	.+14     	; 0x99e <__fixunssfsi+0x5c>
     990:	90 95       	com	r25
     992:	80 95       	com	r24
     994:	70 95       	com	r23
     996:	61 95       	neg	r22
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	8f 4f       	sbci	r24, 0xFF	; 255
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	08 95       	ret

000009a0 <__floatunsisf>:
     9a0:	e8 94       	clt
     9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__floatsisf+0x12>

000009a4 <__floatsisf>:
     9a4:	97 fb       	bst	r25, 7
     9a6:	3e f4       	brtc	.+14     	; 0x9b6 <__floatsisf+0x12>
     9a8:	90 95       	com	r25
     9aa:	80 95       	com	r24
     9ac:	70 95       	com	r23
     9ae:	61 95       	neg	r22
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	8f 4f       	sbci	r24, 0xFF	; 255
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	99 23       	and	r25, r25
     9b8:	a9 f0       	breq	.+42     	; 0x9e4 <__floatsisf+0x40>
     9ba:	f9 2f       	mov	r31, r25
     9bc:	96 e9       	ldi	r25, 0x96	; 150
     9be:	bb 27       	eor	r27, r27
     9c0:	93 95       	inc	r25
     9c2:	f6 95       	lsr	r31
     9c4:	87 95       	ror	r24
     9c6:	77 95       	ror	r23
     9c8:	67 95       	ror	r22
     9ca:	b7 95       	ror	r27
     9cc:	f1 11       	cpse	r31, r1
     9ce:	f8 cf       	rjmp	.-16     	; 0x9c0 <__floatsisf+0x1c>
     9d0:	fa f4       	brpl	.+62     	; 0xa10 <__floatsisf+0x6c>
     9d2:	bb 0f       	add	r27, r27
     9d4:	11 f4       	brne	.+4      	; 0x9da <__floatsisf+0x36>
     9d6:	60 ff       	sbrs	r22, 0
     9d8:	1b c0       	rjmp	.+54     	; 0xa10 <__floatsisf+0x6c>
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	8f 4f       	sbci	r24, 0xFF	; 255
     9e0:	9f 4f       	sbci	r25, 0xFF	; 255
     9e2:	16 c0       	rjmp	.+44     	; 0xa10 <__floatsisf+0x6c>
     9e4:	88 23       	and	r24, r24
     9e6:	11 f0       	breq	.+4      	; 0x9ec <__floatsisf+0x48>
     9e8:	96 e9       	ldi	r25, 0x96	; 150
     9ea:	11 c0       	rjmp	.+34     	; 0xa0e <__floatsisf+0x6a>
     9ec:	77 23       	and	r23, r23
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <__floatsisf+0x54>
     9f0:	9e e8       	ldi	r25, 0x8E	; 142
     9f2:	87 2f       	mov	r24, r23
     9f4:	76 2f       	mov	r23, r22
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__floatsisf+0x5e>
     9f8:	66 23       	and	r22, r22
     9fa:	71 f0       	breq	.+28     	; 0xa18 <__floatsisf+0x74>
     9fc:	96 e8       	ldi	r25, 0x86	; 134
     9fe:	86 2f       	mov	r24, r22
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	2a f0       	brmi	.+10     	; 0xa10 <__floatsisf+0x6c>
     a06:	9a 95       	dec	r25
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	88 1f       	adc	r24, r24
     a0e:	da f7       	brpl	.-10     	; 0xa06 <__floatsisf+0x62>
     a10:	88 0f       	add	r24, r24
     a12:	96 95       	lsr	r25
     a14:	87 95       	ror	r24
     a16:	97 f9       	bld	r25, 7
     a18:	08 95       	ret

00000a1a <__fp_inf>:
     a1a:	97 f9       	bld	r25, 7
     a1c:	9f 67       	ori	r25, 0x7F	; 127
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	08 95       	ret

00000a26 <__fp_nan>:
     a26:	9f ef       	ldi	r25, 0xFF	; 255
     a28:	80 ec       	ldi	r24, 0xC0	; 192
     a2a:	08 95       	ret

00000a2c <__fp_pscA>:
     a2c:	00 24       	eor	r0, r0
     a2e:	0a 94       	dec	r0
     a30:	16 16       	cp	r1, r22
     a32:	17 06       	cpc	r1, r23
     a34:	18 06       	cpc	r1, r24
     a36:	09 06       	cpc	r0, r25
     a38:	08 95       	ret

00000a3a <__fp_pscB>:
     a3a:	00 24       	eor	r0, r0
     a3c:	0a 94       	dec	r0
     a3e:	12 16       	cp	r1, r18
     a40:	13 06       	cpc	r1, r19
     a42:	14 06       	cpc	r1, r20
     a44:	05 06       	cpc	r0, r21
     a46:	08 95       	ret

00000a48 <__fp_round>:
     a48:	09 2e       	mov	r0, r25
     a4a:	03 94       	inc	r0
     a4c:	00 0c       	add	r0, r0
     a4e:	11 f4       	brne	.+4      	; 0xa54 <__fp_round+0xc>
     a50:	88 23       	and	r24, r24
     a52:	52 f0       	brmi	.+20     	; 0xa68 <__fp_round+0x20>
     a54:	bb 0f       	add	r27, r27
     a56:	40 f4       	brcc	.+16     	; 0xa68 <__fp_round+0x20>
     a58:	bf 2b       	or	r27, r31
     a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0x18>
     a5c:	60 ff       	sbrs	r22, 0
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__fp_round+0x20>
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	8f 4f       	sbci	r24, 0xFF	; 255
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	08 95       	ret

00000a6a <__fp_split3>:
     a6a:	57 fd       	sbrc	r21, 7
     a6c:	90 58       	subi	r25, 0x80	; 128
     a6e:	44 0f       	add	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	59 f0       	breq	.+22     	; 0xa8a <__fp_splitA+0x10>
     a74:	5f 3f       	cpi	r21, 0xFF	; 255
     a76:	71 f0       	breq	.+28     	; 0xa94 <__fp_splitA+0x1a>
     a78:	47 95       	ror	r20

00000a7a <__fp_splitA>:
     a7a:	88 0f       	add	r24, r24
     a7c:	97 fb       	bst	r25, 7
     a7e:	99 1f       	adc	r25, r25
     a80:	61 f0       	breq	.+24     	; 0xa9a <__fp_splitA+0x20>
     a82:	9f 3f       	cpi	r25, 0xFF	; 255
     a84:	79 f0       	breq	.+30     	; 0xaa4 <__fp_splitA+0x2a>
     a86:	87 95       	ror	r24
     a88:	08 95       	ret
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	14 06       	cpc	r1, r20
     a90:	55 1f       	adc	r21, r21
     a92:	f2 cf       	rjmp	.-28     	; 0xa78 <__fp_split3+0xe>
     a94:	46 95       	lsr	r20
     a96:	f1 df       	rcall	.-30     	; 0xa7a <__fp_splitA>
     a98:	08 c0       	rjmp	.+16     	; 0xaaa <__fp_splitA+0x30>
     a9a:	16 16       	cp	r1, r22
     a9c:	17 06       	cpc	r1, r23
     a9e:	18 06       	cpc	r1, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	f1 cf       	rjmp	.-30     	; 0xa86 <__fp_splitA+0xc>
     aa4:	86 95       	lsr	r24
     aa6:	71 05       	cpc	r23, r1
     aa8:	61 05       	cpc	r22, r1
     aaa:	08 94       	sec
     aac:	08 95       	ret

00000aae <__fp_zero>:
     aae:	e8 94       	clt

00000ab0 <__fp_szero>:
     ab0:	bb 27       	eor	r27, r27
     ab2:	66 27       	eor	r22, r22
     ab4:	77 27       	eor	r23, r23
     ab6:	cb 01       	movw	r24, r22
     ab8:	97 f9       	bld	r25, 7
     aba:	08 95       	ret

00000abc <__ashldi3>:
     abc:	0f 93       	push	r16
     abe:	08 30       	cpi	r16, 0x08	; 8
     ac0:	90 f0       	brcs	.+36     	; 0xae6 <__ashldi3+0x2a>
     ac2:	98 2f       	mov	r25, r24
     ac4:	87 2f       	mov	r24, r23
     ac6:	76 2f       	mov	r23, r22
     ac8:	65 2f       	mov	r22, r21
     aca:	54 2f       	mov	r21, r20
     acc:	43 2f       	mov	r20, r19
     ace:	32 2f       	mov	r19, r18
     ad0:	22 27       	eor	r18, r18
     ad2:	08 50       	subi	r16, 0x08	; 8
     ad4:	f4 cf       	rjmp	.-24     	; 0xabe <__ashldi3+0x2>
     ad6:	22 0f       	add	r18, r18
     ad8:	33 1f       	adc	r19, r19
     ada:	44 1f       	adc	r20, r20
     adc:	55 1f       	adc	r21, r21
     ade:	66 1f       	adc	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	0a 95       	dec	r16
     ae8:	b2 f7       	brpl	.-20     	; 0xad6 <__ashldi3+0x1a>
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <__ashrdi3>:
     aee:	97 fb       	bst	r25, 7
     af0:	10 f8       	bld	r1, 0

00000af2 <__lshrdi3>:
     af2:	16 94       	lsr	r1
     af4:	00 08       	sbc	r0, r0
     af6:	0f 93       	push	r16
     af8:	08 30       	cpi	r16, 0x08	; 8
     afa:	98 f0       	brcs	.+38     	; 0xb22 <__lshrdi3+0x30>
     afc:	08 50       	subi	r16, 0x08	; 8
     afe:	23 2f       	mov	r18, r19
     b00:	34 2f       	mov	r19, r20
     b02:	45 2f       	mov	r20, r21
     b04:	56 2f       	mov	r21, r22
     b06:	67 2f       	mov	r22, r23
     b08:	78 2f       	mov	r23, r24
     b0a:	89 2f       	mov	r24, r25
     b0c:	90 2d       	mov	r25, r0
     b0e:	f4 cf       	rjmp	.-24     	; 0xaf8 <__lshrdi3+0x6>
     b10:	05 94       	asr	r0
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	77 95       	ror	r23
     b18:	67 95       	ror	r22
     b1a:	57 95       	ror	r21
     b1c:	47 95       	ror	r20
     b1e:	37 95       	ror	r19
     b20:	27 95       	ror	r18
     b22:	0a 95       	dec	r16
     b24:	aa f7       	brpl	.-22     	; 0xb10 <__lshrdi3+0x1e>
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <__cmpdi2_s8>:
     b2a:	00 24       	eor	r0, r0
     b2c:	a7 fd       	sbrc	r26, 7
     b2e:	00 94       	com	r0
     b30:	2a 17       	cp	r18, r26
     b32:	30 05       	cpc	r19, r0
     b34:	40 05       	cpc	r20, r0
     b36:	50 05       	cpc	r21, r0
     b38:	60 05       	cpc	r22, r0
     b3a:	70 05       	cpc	r23, r0
     b3c:	80 05       	cpc	r24, r0
     b3e:	90 05       	cpc	r25, r0
     b40:	08 95       	ret

00000b42 <vsnprintf>:
     b42:	ae e0       	ldi	r26, 0x0E	; 14
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e7 ea       	ldi	r30, 0xA7	; 167
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__prologue_saves__+0x1c>
     b4e:	8c 01       	movw	r16, r24
     b50:	fa 01       	movw	r30, r20
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	8c 83       	std	Y+4, r24	; 0x04
     b56:	09 83       	std	Y+1, r16	; 0x01
     b58:	1a 83       	std	Y+2, r17	; 0x02
     b5a:	77 ff       	sbrs	r23, 7
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vsnprintf+0x20>
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e8       	ldi	r23, 0x80	; 128
     b62:	cb 01       	movw	r24, r22
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	8d 83       	std	Y+5, r24	; 0x05
     b68:	9e 83       	std	Y+6, r25	; 0x06
     b6a:	a9 01       	movw	r20, r18
     b6c:	bf 01       	movw	r22, r30
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vfprintf>
     b76:	4d 81       	ldd	r20, Y+5	; 0x05
     b78:	5e 81       	ldd	r21, Y+6	; 0x06
     b7a:	57 fd       	sbrc	r21, 7
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <vsnprintf+0x50>
     b7e:	2f 81       	ldd	r18, Y+7	; 0x07
     b80:	38 85       	ldd	r19, Y+8	; 0x08
     b82:	42 17       	cp	r20, r18
     b84:	53 07       	cpc	r21, r19
     b86:	0c f4       	brge	.+2      	; 0xb8a <vsnprintf+0x48>
     b88:	9a 01       	movw	r18, r20
     b8a:	f8 01       	movw	r30, r16
     b8c:	e2 0f       	add	r30, r18
     b8e:	f3 1f       	adc	r31, r19
     b90:	10 82       	st	Z, r1
     b92:	2e 96       	adiw	r28, 0x0e	; 14
     b94:	e4 e0       	ldi	r30, 0x04	; 4
     b96:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__epilogue_restores__+0x1c>

00000b9a <vfprintf>:
     b9a:	ab e0       	ldi	r26, 0x0B	; 11
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e3 ed       	ldi	r30, 0xD3	; 211
     ba0:	f5 e0       	ldi	r31, 0x05	; 5
     ba2:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__prologue_saves__>
     ba6:	6c 01       	movw	r12, r24
     ba8:	7b 01       	movw	r14, r22
     baa:	8a 01       	movw	r16, r20
     bac:	fc 01       	movw	r30, r24
     bae:	16 82       	std	Z+6, r1	; 0x06
     bb0:	17 82       	std	Z+7, r1	; 0x07
     bb2:	83 81       	ldd	r24, Z+3	; 0x03
     bb4:	81 ff       	sbrs	r24, 1
     bb6:	cc c1       	rjmp	.+920    	; 0xf50 <vfprintf+0x3b6>
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	3c 01       	movw	r6, r24
     bbe:	f6 01       	movw	r30, r12
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	f7 01       	movw	r30, r14
     bc4:	93 fd       	sbrc	r25, 3
     bc6:	85 91       	lpm	r24, Z+
     bc8:	93 ff       	sbrs	r25, 3
     bca:	81 91       	ld	r24, Z+
     bcc:	7f 01       	movw	r14, r30
     bce:	88 23       	and	r24, r24
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <vfprintf+0x3a>
     bd2:	ba c1       	rjmp	.+884    	; 0xf48 <vfprintf+0x3ae>
     bd4:	85 32       	cpi	r24, 0x25	; 37
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <vfprintf+0x4c>
     bd8:	93 fd       	sbrc	r25, 3
     bda:	85 91       	lpm	r24, Z+
     bdc:	93 ff       	sbrs	r25, 3
     bde:	81 91       	ld	r24, Z+
     be0:	7f 01       	movw	r14, r30
     be2:	85 32       	cpi	r24, 0x25	; 37
     be4:	29 f4       	brne	.+10     	; 0xbf0 <vfprintf+0x56>
     be6:	b6 01       	movw	r22, r12
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     bee:	e7 cf       	rjmp	.-50     	; 0xbbe <vfprintf+0x24>
     bf0:	91 2c       	mov	r9, r1
     bf2:	21 2c       	mov	r2, r1
     bf4:	31 2c       	mov	r3, r1
     bf6:	ff e1       	ldi	r31, 0x1F	; 31
     bf8:	f3 15       	cp	r31, r3
     bfa:	d8 f0       	brcs	.+54     	; 0xc32 <vfprintf+0x98>
     bfc:	8b 32       	cpi	r24, 0x2B	; 43
     bfe:	79 f0       	breq	.+30     	; 0xc1e <vfprintf+0x84>
     c00:	38 f4       	brcc	.+14     	; 0xc10 <vfprintf+0x76>
     c02:	80 32       	cpi	r24, 0x20	; 32
     c04:	79 f0       	breq	.+30     	; 0xc24 <vfprintf+0x8a>
     c06:	83 32       	cpi	r24, 0x23	; 35
     c08:	a1 f4       	brne	.+40     	; 0xc32 <vfprintf+0x98>
     c0a:	23 2d       	mov	r18, r3
     c0c:	20 61       	ori	r18, 0x10	; 16
     c0e:	1d c0       	rjmp	.+58     	; 0xc4a <vfprintf+0xb0>
     c10:	8d 32       	cpi	r24, 0x2D	; 45
     c12:	61 f0       	breq	.+24     	; 0xc2c <vfprintf+0x92>
     c14:	80 33       	cpi	r24, 0x30	; 48
     c16:	69 f4       	brne	.+26     	; 0xc32 <vfprintf+0x98>
     c18:	23 2d       	mov	r18, r3
     c1a:	21 60       	ori	r18, 0x01	; 1
     c1c:	16 c0       	rjmp	.+44     	; 0xc4a <vfprintf+0xb0>
     c1e:	83 2d       	mov	r24, r3
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	38 2e       	mov	r3, r24
     c24:	e3 2d       	mov	r30, r3
     c26:	e4 60       	ori	r30, 0x04	; 4
     c28:	3e 2e       	mov	r3, r30
     c2a:	2a c0       	rjmp	.+84     	; 0xc80 <vfprintf+0xe6>
     c2c:	f3 2d       	mov	r31, r3
     c2e:	f8 60       	ori	r31, 0x08	; 8
     c30:	1d c0       	rjmp	.+58     	; 0xc6c <vfprintf+0xd2>
     c32:	37 fc       	sbrc	r3, 7
     c34:	2d c0       	rjmp	.+90     	; 0xc90 <vfprintf+0xf6>
     c36:	20 ed       	ldi	r18, 0xD0	; 208
     c38:	28 0f       	add	r18, r24
     c3a:	2a 30       	cpi	r18, 0x0A	; 10
     c3c:	40 f0       	brcs	.+16     	; 0xc4e <vfprintf+0xb4>
     c3e:	8e 32       	cpi	r24, 0x2E	; 46
     c40:	b9 f4       	brne	.+46     	; 0xc70 <vfprintf+0xd6>
     c42:	36 fc       	sbrc	r3, 6
     c44:	81 c1       	rjmp	.+770    	; 0xf48 <vfprintf+0x3ae>
     c46:	23 2d       	mov	r18, r3
     c48:	20 64       	ori	r18, 0x40	; 64
     c4a:	32 2e       	mov	r3, r18
     c4c:	19 c0       	rjmp	.+50     	; 0xc80 <vfprintf+0xe6>
     c4e:	36 fe       	sbrs	r3, 6
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <vfprintf+0xc4>
     c52:	8a e0       	ldi	r24, 0x0A	; 10
     c54:	98 9e       	mul	r9, r24
     c56:	20 0d       	add	r18, r0
     c58:	11 24       	eor	r1, r1
     c5a:	92 2e       	mov	r9, r18
     c5c:	11 c0       	rjmp	.+34     	; 0xc80 <vfprintf+0xe6>
     c5e:	ea e0       	ldi	r30, 0x0A	; 10
     c60:	2e 9e       	mul	r2, r30
     c62:	20 0d       	add	r18, r0
     c64:	11 24       	eor	r1, r1
     c66:	22 2e       	mov	r2, r18
     c68:	f3 2d       	mov	r31, r3
     c6a:	f0 62       	ori	r31, 0x20	; 32
     c6c:	3f 2e       	mov	r3, r31
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <vfprintf+0xe6>
     c70:	8c 36       	cpi	r24, 0x6C	; 108
     c72:	21 f4       	brne	.+8      	; 0xc7c <vfprintf+0xe2>
     c74:	83 2d       	mov	r24, r3
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	38 2e       	mov	r3, r24
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0xe6>
     c7c:	88 36       	cpi	r24, 0x68	; 104
     c7e:	41 f4       	brne	.+16     	; 0xc90 <vfprintf+0xf6>
     c80:	f7 01       	movw	r30, r14
     c82:	93 fd       	sbrc	r25, 3
     c84:	85 91       	lpm	r24, Z+
     c86:	93 ff       	sbrs	r25, 3
     c88:	81 91       	ld	r24, Z+
     c8a:	7f 01       	movw	r14, r30
     c8c:	81 11       	cpse	r24, r1
     c8e:	b3 cf       	rjmp	.-154    	; 0xbf6 <vfprintf+0x5c>
     c90:	98 2f       	mov	r25, r24
     c92:	9f 7d       	andi	r25, 0xDF	; 223
     c94:	95 54       	subi	r25, 0x45	; 69
     c96:	93 30       	cpi	r25, 0x03	; 3
     c98:	28 f4       	brcc	.+10     	; 0xca4 <vfprintf+0x10a>
     c9a:	0c 5f       	subi	r16, 0xFC	; 252
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	9f e3       	ldi	r25, 0x3F	; 63
     ca0:	99 83       	std	Y+1, r25	; 0x01
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <vfprintf+0x124>
     ca4:	83 36       	cpi	r24, 0x63	; 99
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <vfprintf+0x11a>
     ca8:	83 37       	cpi	r24, 0x73	; 115
     caa:	71 f0       	breq	.+28     	; 0xcc8 <vfprintf+0x12e>
     cac:	83 35       	cpi	r24, 0x53	; 83
     cae:	09 f0       	breq	.+2      	; 0xcb2 <vfprintf+0x118>
     cb0:	59 c0       	rjmp	.+178    	; 0xd64 <vfprintf+0x1ca>
     cb2:	21 c0       	rjmp	.+66     	; 0xcf6 <vfprintf+0x15c>
     cb4:	f8 01       	movw	r30, r16
     cb6:	80 81       	ld	r24, Z
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	0e 5f       	subi	r16, 0xFE	; 254
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	88 24       	eor	r8, r8
     cc0:	83 94       	inc	r8
     cc2:	91 2c       	mov	r9, r1
     cc4:	53 01       	movw	r10, r6
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <vfprintf+0x154>
     cc8:	28 01       	movw	r4, r16
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	4f 0e       	add	r4, r31
     cce:	51 1c       	adc	r5, r1
     cd0:	f8 01       	movw	r30, r16
     cd2:	a0 80       	ld	r10, Z
     cd4:	b1 80       	ldd	r11, Z+1	; 0x01
     cd6:	36 fe       	sbrs	r3, 6
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <vfprintf+0x146>
     cda:	69 2d       	mov	r22, r9
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x14a>
     ce0:	6f ef       	ldi	r22, 0xFF	; 255
     ce2:	7f ef       	ldi	r23, 0xFF	; 255
     ce4:	c5 01       	movw	r24, r10
     ce6:	0e 94 b9 07 	call	0xf72	; 0xf72 <strnlen>
     cea:	4c 01       	movw	r8, r24
     cec:	82 01       	movw	r16, r4
     cee:	f3 2d       	mov	r31, r3
     cf0:	ff 77       	andi	r31, 0x7F	; 127
     cf2:	3f 2e       	mov	r3, r31
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <vfprintf+0x188>
     cf6:	28 01       	movw	r4, r16
     cf8:	22 e0       	ldi	r18, 0x02	; 2
     cfa:	42 0e       	add	r4, r18
     cfc:	51 1c       	adc	r5, r1
     cfe:	f8 01       	movw	r30, r16
     d00:	a0 80       	ld	r10, Z
     d02:	b1 80       	ldd	r11, Z+1	; 0x01
     d04:	36 fe       	sbrs	r3, 6
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <vfprintf+0x174>
     d08:	69 2d       	mov	r22, r9
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x178>
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	7f ef       	ldi	r23, 0xFF	; 255
     d12:	c5 01       	movw	r24, r10
     d14:	0e 94 ae 07 	call	0xf5c	; 0xf5c <strnlen_P>
     d18:	4c 01       	movw	r8, r24
     d1a:	f3 2d       	mov	r31, r3
     d1c:	f0 68       	ori	r31, 0x80	; 128
     d1e:	3f 2e       	mov	r3, r31
     d20:	82 01       	movw	r16, r4
     d22:	33 fc       	sbrc	r3, 3
     d24:	1b c0       	rjmp	.+54     	; 0xd5c <vfprintf+0x1c2>
     d26:	82 2d       	mov	r24, r2
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	88 16       	cp	r8, r24
     d2c:	99 06       	cpc	r9, r25
     d2e:	b0 f4       	brcc	.+44     	; 0xd5c <vfprintf+0x1c2>
     d30:	b6 01       	movw	r22, r12
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     d3a:	2a 94       	dec	r2
     d3c:	f4 cf       	rjmp	.-24     	; 0xd26 <vfprintf+0x18c>
     d3e:	f5 01       	movw	r30, r10
     d40:	37 fc       	sbrc	r3, 7
     d42:	85 91       	lpm	r24, Z+
     d44:	37 fe       	sbrs	r3, 7
     d46:	81 91       	ld	r24, Z+
     d48:	5f 01       	movw	r10, r30
     d4a:	b6 01       	movw	r22, r12
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     d52:	21 10       	cpse	r2, r1
     d54:	2a 94       	dec	r2
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	82 1a       	sub	r8, r18
     d5a:	91 08       	sbc	r9, r1
     d5c:	81 14       	cp	r8, r1
     d5e:	91 04       	cpc	r9, r1
     d60:	71 f7       	brne	.-36     	; 0xd3e <vfprintf+0x1a4>
     d62:	e8 c0       	rjmp	.+464    	; 0xf34 <vfprintf+0x39a>
     d64:	84 36       	cpi	r24, 0x64	; 100
     d66:	11 f0       	breq	.+4      	; 0xd6c <vfprintf+0x1d2>
     d68:	89 36       	cpi	r24, 0x69	; 105
     d6a:	41 f5       	brne	.+80     	; 0xdbc <vfprintf+0x222>
     d6c:	f8 01       	movw	r30, r16
     d6e:	37 fe       	sbrs	r3, 7
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <vfprintf+0x1e6>
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	0c 5f       	subi	r16, 0xFC	; 252
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <vfprintf+0x1f6>
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	07 2e       	mov	r0, r23
     d86:	00 0c       	add	r0, r0
     d88:	88 0b       	sbc	r24, r24
     d8a:	99 0b       	sbc	r25, r25
     d8c:	0e 5f       	subi	r16, 0xFE	; 254
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	f3 2d       	mov	r31, r3
     d92:	ff 76       	andi	r31, 0x6F	; 111
     d94:	3f 2e       	mov	r3, r31
     d96:	97 ff       	sbrs	r25, 7
     d98:	09 c0       	rjmp	.+18     	; 0xdac <vfprintf+0x212>
     d9a:	90 95       	com	r25
     d9c:	80 95       	com	r24
     d9e:	70 95       	com	r23
     da0:	61 95       	neg	r22
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	8f 4f       	sbci	r24, 0xFF	; 255
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	f0 68       	ori	r31, 0x80	; 128
     daa:	3f 2e       	mov	r3, r31
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	a3 01       	movw	r20, r6
     db2:	0e 94 00 08 	call	0x1000	; 0x1000 <__ultoa_invert>
     db6:	88 2e       	mov	r8, r24
     db8:	86 18       	sub	r8, r6
     dba:	45 c0       	rjmp	.+138    	; 0xe46 <vfprintf+0x2ac>
     dbc:	85 37       	cpi	r24, 0x75	; 117
     dbe:	31 f4       	brne	.+12     	; 0xdcc <vfprintf+0x232>
     dc0:	23 2d       	mov	r18, r3
     dc2:	2f 7e       	andi	r18, 0xEF	; 239
     dc4:	b2 2e       	mov	r11, r18
     dc6:	2a e0       	ldi	r18, 0x0A	; 10
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	25 c0       	rjmp	.+74     	; 0xe16 <vfprintf+0x27c>
     dcc:	93 2d       	mov	r25, r3
     dce:	99 7f       	andi	r25, 0xF9	; 249
     dd0:	b9 2e       	mov	r11, r25
     dd2:	8f 36       	cpi	r24, 0x6F	; 111
     dd4:	c1 f0       	breq	.+48     	; 0xe06 <vfprintf+0x26c>
     dd6:	18 f4       	brcc	.+6      	; 0xdde <vfprintf+0x244>
     dd8:	88 35       	cpi	r24, 0x58	; 88
     dda:	79 f0       	breq	.+30     	; 0xdfa <vfprintf+0x260>
     ddc:	b5 c0       	rjmp	.+362    	; 0xf48 <vfprintf+0x3ae>
     dde:	80 37       	cpi	r24, 0x70	; 112
     de0:	19 f0       	breq	.+6      	; 0xde8 <vfprintf+0x24e>
     de2:	88 37       	cpi	r24, 0x78	; 120
     de4:	21 f0       	breq	.+8      	; 0xdee <vfprintf+0x254>
     de6:	b0 c0       	rjmp	.+352    	; 0xf48 <vfprintf+0x3ae>
     de8:	e9 2f       	mov	r30, r25
     dea:	e0 61       	ori	r30, 0x10	; 16
     dec:	be 2e       	mov	r11, r30
     dee:	b4 fe       	sbrs	r11, 4
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <vfprintf+0x272>
     df2:	fb 2d       	mov	r31, r11
     df4:	f4 60       	ori	r31, 0x04	; 4
     df6:	bf 2e       	mov	r11, r31
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <vfprintf+0x272>
     dfa:	34 fe       	sbrs	r3, 4
     dfc:	0a c0       	rjmp	.+20     	; 0xe12 <vfprintf+0x278>
     dfe:	29 2f       	mov	r18, r25
     e00:	26 60       	ori	r18, 0x06	; 6
     e02:	b2 2e       	mov	r11, r18
     e04:	06 c0       	rjmp	.+12     	; 0xe12 <vfprintf+0x278>
     e06:	28 e0       	ldi	r18, 0x08	; 8
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <vfprintf+0x27c>
     e0c:	20 e1       	ldi	r18, 0x10	; 16
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0x27c>
     e12:	20 e1       	ldi	r18, 0x10	; 16
     e14:	32 e0       	ldi	r19, 0x02	; 2
     e16:	f8 01       	movw	r30, r16
     e18:	b7 fe       	sbrs	r11, 7
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <vfprintf+0x290>
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	0c 5f       	subi	r16, 0xFC	; 252
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <vfprintf+0x29c>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 5f       	subi	r16, 0xFE	; 254
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	a3 01       	movw	r20, r6
     e38:	0e 94 00 08 	call	0x1000	; 0x1000 <__ultoa_invert>
     e3c:	88 2e       	mov	r8, r24
     e3e:	86 18       	sub	r8, r6
     e40:	fb 2d       	mov	r31, r11
     e42:	ff 77       	andi	r31, 0x7F	; 127
     e44:	3f 2e       	mov	r3, r31
     e46:	36 fe       	sbrs	r3, 6
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <vfprintf+0x2ca>
     e4a:	23 2d       	mov	r18, r3
     e4c:	2e 7f       	andi	r18, 0xFE	; 254
     e4e:	a2 2e       	mov	r10, r18
     e50:	89 14       	cp	r8, r9
     e52:	58 f4       	brcc	.+22     	; 0xe6a <vfprintf+0x2d0>
     e54:	34 fe       	sbrs	r3, 4
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <vfprintf+0x2d4>
     e58:	32 fc       	sbrc	r3, 2
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <vfprintf+0x2d4>
     e5c:	83 2d       	mov	r24, r3
     e5e:	8e 7e       	andi	r24, 0xEE	; 238
     e60:	a8 2e       	mov	r10, r24
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <vfprintf+0x2d4>
     e64:	b8 2c       	mov	r11, r8
     e66:	a3 2c       	mov	r10, r3
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x2d6>
     e6a:	b8 2c       	mov	r11, r8
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <vfprintf+0x2d6>
     e6e:	b9 2c       	mov	r11, r9
     e70:	a4 fe       	sbrs	r10, 4
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <vfprintf+0x2f8>
     e74:	fe 01       	movw	r30, r28
     e76:	e8 0d       	add	r30, r8
     e78:	f1 1d       	adc	r31, r1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	21 f4       	brne	.+8      	; 0xe88 <vfprintf+0x2ee>
     e80:	9a 2d       	mov	r25, r10
     e82:	99 7e       	andi	r25, 0xE9	; 233
     e84:	a9 2e       	mov	r10, r25
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <vfprintf+0x300>
     e88:	a2 fe       	sbrs	r10, 2
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <vfprintf+0x2fe>
     e8c:	b3 94       	inc	r11
     e8e:	b3 94       	inc	r11
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <vfprintf+0x300>
     e92:	8a 2d       	mov	r24, r10
     e94:	86 78       	andi	r24, 0x86	; 134
     e96:	09 f0       	breq	.+2      	; 0xe9a <vfprintf+0x300>
     e98:	b3 94       	inc	r11
     e9a:	a3 fc       	sbrc	r10, 3
     e9c:	11 c0       	rjmp	.+34     	; 0xec0 <vfprintf+0x326>
     e9e:	a0 fe       	sbrs	r10, 0
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <vfprintf+0x314>
     ea2:	b2 14       	cp	r11, r2
     ea4:	88 f4       	brcc	.+34     	; 0xec8 <vfprintf+0x32e>
     ea6:	28 0c       	add	r2, r8
     ea8:	92 2c       	mov	r9, r2
     eaa:	9b 18       	sub	r9, r11
     eac:	0e c0       	rjmp	.+28     	; 0xeca <vfprintf+0x330>
     eae:	b2 14       	cp	r11, r2
     eb0:	60 f4       	brcc	.+24     	; 0xeca <vfprintf+0x330>
     eb2:	b6 01       	movw	r22, r12
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     ebc:	b3 94       	inc	r11
     ebe:	f7 cf       	rjmp	.-18     	; 0xeae <vfprintf+0x314>
     ec0:	b2 14       	cp	r11, r2
     ec2:	18 f4       	brcc	.+6      	; 0xeca <vfprintf+0x330>
     ec4:	2b 18       	sub	r2, r11
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <vfprintf+0x332>
     ec8:	98 2c       	mov	r9, r8
     eca:	21 2c       	mov	r2, r1
     ecc:	a4 fe       	sbrs	r10, 4
     ece:	10 c0       	rjmp	.+32     	; 0xef0 <vfprintf+0x356>
     ed0:	b6 01       	movw	r22, r12
     ed2:	80 e3       	ldi	r24, 0x30	; 48
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     eda:	a2 fe       	sbrs	r10, 2
     edc:	17 c0       	rjmp	.+46     	; 0xf0c <vfprintf+0x372>
     ede:	a1 fc       	sbrc	r10, 1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <vfprintf+0x34e>
     ee2:	88 e7       	ldi	r24, 0x78	; 120
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x352>
     ee8:	88 e5       	ldi	r24, 0x58	; 88
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b6 01       	movw	r22, r12
     eee:	0c c0       	rjmp	.+24     	; 0xf08 <vfprintf+0x36e>
     ef0:	8a 2d       	mov	r24, r10
     ef2:	86 78       	andi	r24, 0x86	; 134
     ef4:	59 f0       	breq	.+22     	; 0xf0c <vfprintf+0x372>
     ef6:	a1 fe       	sbrs	r10, 1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <vfprintf+0x364>
     efa:	8b e2       	ldi	r24, 0x2B	; 43
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <vfprintf+0x366>
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	a7 fc       	sbrc	r10, 7
     f02:	8d e2       	ldi	r24, 0x2D	; 45
     f04:	b6 01       	movw	r22, r12
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     f0c:	89 14       	cp	r8, r9
     f0e:	38 f4       	brcc	.+14     	; 0xf1e <vfprintf+0x384>
     f10:	b6 01       	movw	r22, r12
     f12:	80 e3       	ldi	r24, 0x30	; 48
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     f1a:	9a 94       	dec	r9
     f1c:	f7 cf       	rjmp	.-18     	; 0xf0c <vfprintf+0x372>
     f1e:	8a 94       	dec	r8
     f20:	f3 01       	movw	r30, r6
     f22:	e8 0d       	add	r30, r8
     f24:	f1 1d       	adc	r31, r1
     f26:	80 81       	ld	r24, Z
     f28:	b6 01       	movw	r22, r12
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     f30:	81 10       	cpse	r8, r1
     f32:	f5 cf       	rjmp	.-22     	; 0xf1e <vfprintf+0x384>
     f34:	22 20       	and	r2, r2
     f36:	09 f4       	brne	.+2      	; 0xf3a <vfprintf+0x3a0>
     f38:	42 ce       	rjmp	.-892    	; 0xbbe <vfprintf+0x24>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     f44:	2a 94       	dec	r2
     f46:	f6 cf       	rjmp	.-20     	; 0xf34 <vfprintf+0x39a>
     f48:	f6 01       	movw	r30, r12
     f4a:	86 81       	ldd	r24, Z+6	; 0x06
     f4c:	97 81       	ldd	r25, Z+7	; 0x07
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x3ba>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	2b 96       	adiw	r28, 0x0b	; 11
     f56:	e2 e1       	ldi	r30, 0x12	; 18
     f58:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__epilogue_restores__>

00000f5c <strnlen_P>:
     f5c:	fc 01       	movw	r30, r24
     f5e:	05 90       	lpm	r0, Z+
     f60:	61 50       	subi	r22, 0x01	; 1
     f62:	70 40       	sbci	r23, 0x00	; 0
     f64:	01 10       	cpse	r0, r1
     f66:	d8 f7       	brcc	.-10     	; 0xf5e <strnlen_P+0x2>
     f68:	80 95       	com	r24
     f6a:	90 95       	com	r25
     f6c:	8e 0f       	add	r24, r30
     f6e:	9f 1f       	adc	r25, r31
     f70:	08 95       	ret

00000f72 <strnlen>:
     f72:	fc 01       	movw	r30, r24
     f74:	61 50       	subi	r22, 0x01	; 1
     f76:	70 40       	sbci	r23, 0x00	; 0
     f78:	01 90       	ld	r0, Z+
     f7a:	01 10       	cpse	r0, r1
     f7c:	d8 f7       	brcc	.-10     	; 0xf74 <strnlen+0x2>
     f7e:	80 95       	com	r24
     f80:	90 95       	com	r25
     f82:	8e 0f       	add	r24, r30
     f84:	9f 1f       	adc	r25, r31
     f86:	08 95       	ret

00000f88 <fputc>:
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	fb 01       	movw	r30, r22
     f92:	23 81       	ldd	r18, Z+3	; 0x03
     f94:	21 fd       	sbrc	r18, 1
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <fputc+0x16>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	2c c0       	rjmp	.+88     	; 0xff6 <fputc+0x6e>
     f9e:	22 ff       	sbrs	r18, 2
     fa0:	16 c0       	rjmp	.+44     	; 0xfce <fputc+0x46>
     fa2:	46 81       	ldd	r20, Z+6	; 0x06
     fa4:	57 81       	ldd	r21, Z+7	; 0x07
     fa6:	24 81       	ldd	r18, Z+4	; 0x04
     fa8:	35 81       	ldd	r19, Z+5	; 0x05
     faa:	42 17       	cp	r20, r18
     fac:	53 07       	cpc	r21, r19
     fae:	44 f4       	brge	.+16     	; 0xfc0 <fputc+0x38>
     fb0:	a0 81       	ld	r26, Z
     fb2:	b1 81       	ldd	r27, Z+1	; 0x01
     fb4:	9d 01       	movw	r18, r26
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	20 83       	st	Z, r18
     fbc:	31 83       	std	Z+1, r19	; 0x01
     fbe:	8c 93       	st	X, r24
     fc0:	26 81       	ldd	r18, Z+6	; 0x06
     fc2:	37 81       	ldd	r19, Z+7	; 0x07
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	26 83       	std	Z+6, r18	; 0x06
     fca:	37 83       	std	Z+7, r19	; 0x07
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <fputc+0x6e>
     fce:	8b 01       	movw	r16, r22
     fd0:	ec 01       	movw	r28, r24
     fd2:	fb 01       	movw	r30, r22
     fd4:	00 84       	ldd	r0, Z+8	; 0x08
     fd6:	f1 85       	ldd	r31, Z+9	; 0x09
     fd8:	e0 2d       	mov	r30, r0
     fda:	09 95       	icall
     fdc:	89 2b       	or	r24, r25
     fde:	e1 f6       	brne	.-72     	; 0xf98 <fputc+0x10>
     fe0:	d8 01       	movw	r26, r16
     fe2:	16 96       	adiw	r26, 0x06	; 6
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	17 97       	sbiw	r26, 0x07	; 7
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	16 96       	adiw	r26, 0x06	; 6
     fee:	8d 93       	st	X+, r24
     ff0:	9c 93       	st	X, r25
     ff2:	17 97       	sbiw	r26, 0x07	; 7
     ff4:	ce 01       	movw	r24, r28
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <__ultoa_invert>:
    1000:	fa 01       	movw	r30, r20
    1002:	aa 27       	eor	r26, r26
    1004:	28 30       	cpi	r18, 0x08	; 8
    1006:	51 f1       	breq	.+84     	; 0x105c <__ultoa_invert+0x5c>
    1008:	20 31       	cpi	r18, 0x10	; 16
    100a:	81 f1       	breq	.+96     	; 0x106c <__ultoa_invert+0x6c>
    100c:	e8 94       	clt
    100e:	6f 93       	push	r22
    1010:	6e 7f       	andi	r22, 0xFE	; 254
    1012:	6e 5f       	subi	r22, 0xFE	; 254
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	af 4f       	sbci	r26, 0xFF	; 255
    101c:	b1 e0       	ldi	r27, 0x01	; 1
    101e:	3e d0       	rcall	.+124    	; 0x109c <__ultoa_invert+0x9c>
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	3c d0       	rcall	.+120    	; 0x109c <__ultoa_invert+0x9c>
    1024:	67 0f       	add	r22, r23
    1026:	78 1f       	adc	r23, r24
    1028:	89 1f       	adc	r24, r25
    102a:	9a 1f       	adc	r25, r26
    102c:	a1 1d       	adc	r26, r1
    102e:	68 0f       	add	r22, r24
    1030:	79 1f       	adc	r23, r25
    1032:	8a 1f       	adc	r24, r26
    1034:	91 1d       	adc	r25, r1
    1036:	a1 1d       	adc	r26, r1
    1038:	6a 0f       	add	r22, r26
    103a:	71 1d       	adc	r23, r1
    103c:	81 1d       	adc	r24, r1
    103e:	91 1d       	adc	r25, r1
    1040:	a1 1d       	adc	r26, r1
    1042:	20 d0       	rcall	.+64     	; 0x1084 <__ultoa_invert+0x84>
    1044:	09 f4       	brne	.+2      	; 0x1048 <__ultoa_invert+0x48>
    1046:	68 94       	set
    1048:	3f 91       	pop	r19
    104a:	2a e0       	ldi	r18, 0x0A	; 10
    104c:	26 9f       	mul	r18, r22
    104e:	11 24       	eor	r1, r1
    1050:	30 19       	sub	r19, r0
    1052:	30 5d       	subi	r19, 0xD0	; 208
    1054:	31 93       	st	Z+, r19
    1056:	de f6       	brtc	.-74     	; 0x100e <__ultoa_invert+0xe>
    1058:	cf 01       	movw	r24, r30
    105a:	08 95       	ret
    105c:	46 2f       	mov	r20, r22
    105e:	47 70       	andi	r20, 0x07	; 7
    1060:	40 5d       	subi	r20, 0xD0	; 208
    1062:	41 93       	st	Z+, r20
    1064:	b3 e0       	ldi	r27, 0x03	; 3
    1066:	0f d0       	rcall	.+30     	; 0x1086 <__ultoa_invert+0x86>
    1068:	c9 f7       	brne	.-14     	; 0x105c <__ultoa_invert+0x5c>
    106a:	f6 cf       	rjmp	.-20     	; 0x1058 <__ultoa_invert+0x58>
    106c:	46 2f       	mov	r20, r22
    106e:	4f 70       	andi	r20, 0x0F	; 15
    1070:	40 5d       	subi	r20, 0xD0	; 208
    1072:	4a 33       	cpi	r20, 0x3A	; 58
    1074:	18 f0       	brcs	.+6      	; 0x107c <__ultoa_invert+0x7c>
    1076:	49 5d       	subi	r20, 0xD9	; 217
    1078:	31 fd       	sbrc	r19, 1
    107a:	40 52       	subi	r20, 0x20	; 32
    107c:	41 93       	st	Z+, r20
    107e:	02 d0       	rcall	.+4      	; 0x1084 <__ultoa_invert+0x84>
    1080:	a9 f7       	brne	.-22     	; 0x106c <__ultoa_invert+0x6c>
    1082:	ea cf       	rjmp	.-44     	; 0x1058 <__ultoa_invert+0x58>
    1084:	b4 e0       	ldi	r27, 0x04	; 4
    1086:	a6 95       	lsr	r26
    1088:	97 95       	ror	r25
    108a:	87 95       	ror	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	ba 95       	dec	r27
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__ultoa_invert+0x86>
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	61 05       	cpc	r22, r1
    1098:	71 05       	cpc	r23, r1
    109a:	08 95       	ret
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	0a 2e       	mov	r0, r26
    10a2:	06 94       	lsr	r0
    10a4:	57 95       	ror	r21
    10a6:	47 95       	ror	r20
    10a8:	37 95       	ror	r19
    10aa:	27 95       	ror	r18
    10ac:	ba 95       	dec	r27
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <__ultoa_invert+0xa2>
    10b0:	62 0f       	add	r22, r18
    10b2:	73 1f       	adc	r23, r19
    10b4:	84 1f       	adc	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	a0 1d       	adc	r26, r0
    10ba:	08 95       	ret

000010bc <ccp_write_io>:
    10bc:	dc 01       	movw	r26, r24
    10be:	28 ed       	ldi	r18, 0xD8	; 216
    10c0:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6e06>
    10c4:	6c 93       	st	X, r22
    10c6:	08 95       	ret

000010c8 <__prologue_saves__>:
    10c8:	2f 92       	push	r2
    10ca:	3f 92       	push	r3
    10cc:	4f 92       	push	r4
    10ce:	5f 92       	push	r5
    10d0:	6f 92       	push	r6
    10d2:	7f 92       	push	r7
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	ca 1b       	sub	r28, r26
    10f2:	db 0b       	sbc	r29, r27
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	09 94       	ijmp

000010fa <__epilogue_restores__>:
    10fa:	2a 88       	ldd	r2, Y+18	; 0x12
    10fc:	39 88       	ldd	r3, Y+17	; 0x11
    10fe:	48 88       	ldd	r4, Y+16	; 0x10
    1100:	5f 84       	ldd	r5, Y+15	; 0x0f
    1102:	6e 84       	ldd	r6, Y+14	; 0x0e
    1104:	7d 84       	ldd	r7, Y+13	; 0x0d
    1106:	8c 84       	ldd	r8, Y+12	; 0x0c
    1108:	9b 84       	ldd	r9, Y+11	; 0x0b
    110a:	aa 84       	ldd	r10, Y+10	; 0x0a
    110c:	b9 84       	ldd	r11, Y+9	; 0x09
    110e:	c8 84       	ldd	r12, Y+8	; 0x08
    1110:	df 80       	ldd	r13, Y+7	; 0x07
    1112:	ee 80       	ldd	r14, Y+6	; 0x06
    1114:	fd 80       	ldd	r15, Y+5	; 0x05
    1116:	0c 81       	ldd	r16, Y+4	; 0x04
    1118:	1b 81       	ldd	r17, Y+3	; 0x03
    111a:	aa 81       	ldd	r26, Y+2	; 0x02
    111c:	b9 81       	ldd	r27, Y+1	; 0x01
    111e:	ce 0f       	add	r28, r30
    1120:	d1 1d       	adc	r29, r1
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	ed 01       	movw	r28, r26
    1128:	08 95       	ret

0000112a <_exit>:
    112a:	f8 94       	cli

0000112c <__stop_program>:
    112c:	ff cf       	rjmp	.-2      	; 0x112c <__stop_program>
