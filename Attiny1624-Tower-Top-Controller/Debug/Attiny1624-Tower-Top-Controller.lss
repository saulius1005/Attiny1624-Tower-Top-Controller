
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00001527  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  00009338  00001338  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000062  00803800  00803800  00001527  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  000015c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a73  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024d5  00000000  00000000  000051d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010b5  00000000  00000000  000076a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000314  00000000  00000000  00008760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d6b  00000000  00000000  00008a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000904  00000000  00000000  0000a7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000b0e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a2 36       	cpi	r26, 0x62	; 98
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 4a 02 	call	0x494	; 0x494 <main>
      98:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 * - Applies timebase for proper sampling setup.
 * - Uses 1024-sample accumulation for noise reduction.
 * - Configures burst mode.
 */
void ADC0_init() {
	ADC0.CTRLA = ADC_ENABLE_bm; ///< Enable ADC
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV10_gc; ///< Set ADC clock prescaler to divide by 10
      a8:	84 e0       	ldi	r24, 0x04	; 4
      aa:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp); ///< Set ADC timebase
      ac:	80 ea       	ldi	r24, 0xA0	; 160
      ae:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLE = 0; ///< Set sampling length to 0.5 ADC cycles
      b0:	10 86       	std	Z+8, r1	; 0x08
	ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc; ///< Accumulate 1024 samples for each result
      b2:	8a e0       	ldi	r24, 0x0A	; 10
      b4:	81 87       	std	Z+9, r24	; 0x09
	ADC0.COMMAND = ADC_MODE_BURST_SCALING_gc; ///< Use burst mode for better averaging
      b6:	80 e5       	ldi	r24, 0x50	; 80
      b8:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait until ADC is ready
      ba:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f71ce>
      be:	80 fd       	sbrc	r24, 0
      c0:	fc cf       	rjmp	.-8      	; 0xba <ADC0_init+0x1a>
}
      c2:	08 95       	ret

000000c4 <ADC0_Read>:
 *
 * @param channel The ADC multiplexer positive input channel.
 * @return 16-bit averaged ADC result.
 */
uint16_t ADC0_Read(uint8_t channel) {
	ADC0.MUXPOS = channel;
      c4:	e0 e0       	ldi	r30, 0x00	; 0
      c6:	f6 e0       	ldi	r31, 0x06	; 6
      c8:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; ///< Start conversion
      ca:	82 85       	ldd	r24, Z+10	; 0x0a
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait for ADC to become ready
      d0:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f71ce>
      d4:	80 fd       	sbrc	r24, 0
      d6:	fc cf       	rjmp	.-8      	; 0xd0 <ADC0_Read+0xc>
	while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm)); ///< Wait until the result is ready
      d8:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f71cd>
      dc:	81 ff       	sbrs	r24, 1
      de:	fc cf       	rjmp	.-8      	; 0xd8 <ADC0_Read+0x14>
	ADC0.INTFLAGS = ADC_SAMPRDY_bm; ///< Clear the sample ready flag
      e0:	e0 e0       	ldi	r30, 0x00	; 0
      e2:	f6 e0       	ldi	r31, 0x06	; 6
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	85 83       	std	Z+5, r24	; 0x05
	return ADC0.SAMPLE; ///< Return averaged result
      e8:	84 89       	ldd	r24, Z+20	; 0x14
      ea:	95 89       	ldd	r25, Z+21	; 0x15
}
      ec:	08 95       	ret

000000ee <ReadSolarCells>:

void ReadSolarCells(solarrcells_t channel) {
      ee:	8f 92       	push	r8
      f0:	9f 92       	push	r9
      f2:	af 92       	push	r10
      f4:	bf 92       	push	r11
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	c8 2f       	mov	r28, r24
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
     102:	82 30       	cpi	r24, 0x02	; 2
     104:	19 f4       	brne	.+6      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	18 e3       	ldi	r17, 0x38	; 56
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
     10c:	0b e2       	ldi	r16, 0x2B	; 43
     10e:	18 e3       	ldi	r17, 0x38	; 56

	if (channel == Current) {
     110:	cb 30       	cpi	r28, 0x0B	; 11
     112:	09 f0       	breq	.+2      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     114:	49 c0       	rjmp	.+146    	; 0x1a8 <__EEPROM_REGION_LENGTH__+0xa8>
		// Current measurement depends on MCU VDD; we need to measure VDD to calibrate range.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_1024MV_gc;
     116:	0f 2e       	mov	r0, r31
     118:	e1 2c       	mov	r14, r1
     11a:	f6 e0       	ldi	r31, 0x06	; 6
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	f7 01       	movw	r30, r14
     122:	82 81       	ldd	r24, Z+2	; 0x02
     124:	88 7f       	andi	r24, 0xF8	; 248
     126:	84 60       	ori	r24, 0x04	; 4
     128:	82 83       	std	Z+2, r24	; 0x02
		float mcuVoltage = 0.25 * ADC0_Read(ADC_MUXPOS_VDDDIV10_gc); ///< VDD = 10 × ADC result × 1.024 / 4096
     12a:	81 e3       	ldi	r24, 0x31	; 49
     12c:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     130:	bc 01       	movw	r22, r24
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e8       	ldi	r20, 0x80	; 128
     140:	5e e3       	ldi	r21, 0x3E	; 62
     142:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
		float koef = mcuVoltage / 409.6;
     146:	2d ec       	ldi	r18, 0xCD	; 205
     148:	3c ec       	ldi	r19, 0xCC	; 204
     14a:	4c ec       	ldi	r20, 0xCC	; 204
     14c:	53 e4       	ldi	r21, 0x43	; 67
     14e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__divsf3>
     152:	4b 01       	movw	r8, r22
     154:	5c 01       	movw	r10, r24
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_VDD_gc;
     156:	f7 01       	movw	r30, r14
     158:	82 81       	ldd	r24, Z+2	; 0x02
     15a:	88 7f       	andi	r24, 0xF8	; 248
     15c:	82 83       	std	Z+2, r24	; 0x02
		uint16_t current = abs((ADC0_Read(channel)*koef/4)-12); //-0,125A
     15e:	8c 2f       	mov	r24, r28
     160:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     164:	bc 01       	movw	r22, r24
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
     16e:	a5 01       	movw	r20, r10
     170:	94 01       	movw	r18, r8
     172:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e8       	ldi	r20, 0x80	; 128
     17c:	5e e3       	ldi	r21, 0x3E	; 62
     17e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e4       	ldi	r20, 0x40	; 64
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 09 04 	call	0x812	; 0x812 <__subsf3>
     18e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fixsfsi>
     192:	9b 01       	movw	r18, r22
     194:	77 23       	and	r23, r23
     196:	24 f4       	brge	.+8      	; 0x1a0 <__EEPROM_REGION_LENGTH__+0xa0>
     198:	22 27       	eor	r18, r18
     19a:	33 27       	eor	r19, r19
     19c:	26 1b       	sub	r18, r22
     19e:	37 0b       	sbc	r19, r23
		voltageORcurrent->Result = current /*> TMCS1100_ZERO_I ? current - TMCS1100_ZERO_I : current*/;
     1a0:	f8 01       	movw	r30, r16
     1a2:	20 83       	st	Z, r18
     1a4:	31 83       	std	Z+1, r19	; 0x01
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <__EEPROM_REGION_LENGTH__+0xda>
	}
	else {
		// Voltage measurement uses a fixed 2.048V reference, independent of VDD.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_2048MV_gc;
     1a8:	e0 e0       	ldi	r30, 0x00	; 0
     1aa:	f6 e0       	ldi	r31, 0x06	; 6
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	88 7f       	andi	r24, 0xF8	; 248
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	82 83       	std	Z+2, r24	; 0x02
		voltageORcurrent->Result = AMC1311_COEF * ADC0_Read(channel);
     1b4:	8c 2f       	mov	r24, r28
     1b6:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     1ba:	bc 01       	movw	r22, r24
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e4       	ldi	r20, 0x40	; 64
     1ca:	5f e3       	ldi	r21, 0x3F	; 63
     1cc:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
     1d0:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
     1d4:	f8 01       	movw	r30, r16
     1d6:	60 83       	st	Z, r22
     1d8:	71 83       	std	Z+1, r23	; 0x01
	}
}
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	bf 90       	pop	r11
     1e6:	af 90       	pop	r10
     1e8:	9f 90       	pop	r9
     1ea:	8f 90       	pop	r8
     1ec:	08 95       	ret

000001ee <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Wait for external clock change to stable */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm)
     1ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6c2b>
     1f2:	88 23       	and	r24, r24
     1f4:	e4 f3       	brlt	.-8      	; 0x1ee <CLOCK_XOSCHF_clock_init>
	{};
	/* Enable external (20 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKSEL_OSC20M_gc);
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	80 e6       	ldi	r24, 0x60	; 96
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ccp_write_io>

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	81 e6       	ldi	r24, 0x61	; 97
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     20a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6c2b>
     20e:	80 fd       	sbrc	r24, 0
     210:	fc cf       	rjmp	.-8      	; 0x20a <CLOCK_XOSCHF_clock_init+0x1c>
	{};
	/* Configuration complete;*/
}
     212:	08 95       	ret

00000214 <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     218:	8b 01       	movw	r16, r22
     21a:	9c 01       	movw	r18, r24
     21c:	0f 2e       	mov	r0, r31
     21e:	fc e0       	ldi	r31, 0x0C	; 12
     220:	36 95       	lsr	r19
     222:	27 95       	ror	r18
     224:	17 95       	ror	r17
     226:	07 95       	ror	r16
     228:	fa 95       	dec	r31
     22a:	d1 f7       	brne	.-12     	; 0x220 <crc6_mt6701_lookup+0xc>
     22c:	f0 2d       	mov	r31, r0
     22e:	0f 73       	andi	r16, 0x3F	; 63
     230:	11 27       	eor	r17, r17
     232:	22 27       	eor	r18, r18
     234:	33 27       	eor	r19, r19
     236:	f8 01       	movw	r30, r16
     238:	e8 5c       	subi	r30, 0xC8	; 200
     23a:	fb 46       	sbci	r31, 0x6B	; 107
     23c:	40 81       	ld	r20, Z
     23e:	8b 01       	movw	r16, r22
     240:	9c 01       	movw	r18, r24
     242:	68 94       	set
     244:	15 f8       	bld	r1, 5
     246:	36 95       	lsr	r19
     248:	27 95       	ror	r18
     24a:	17 95       	ror	r17
     24c:	07 95       	ror	r16
     24e:	16 94       	lsr	r1
     250:	d1 f7       	brne	.-12     	; 0x246 <crc6_mt6701_lookup+0x32>
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	22 27       	eor	r18, r18
     258:	33 27       	eor	r19, r19
     25a:	04 27       	eor	r16, r20
     25c:	f8 01       	movw	r30, r16
     25e:	e8 5c       	subi	r30, 0xC8	; 200
     260:	fb 46       	sbci	r31, 0x6B	; 107
     262:	20 81       	ld	r18, Z
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	8f 73       	andi	r24, 0x3F	; 63
     26a:	99 27       	eor	r25, r25
     26c:	aa 27       	eor	r26, r26
     26e:	bb 27       	eor	r27, r27
     270:	82 27       	eor	r24, r18
     272:	fc 01       	movw	r30, r24
     274:	e8 5c       	subi	r30, 0xC8	; 200
     276:	fb 46       	sbci	r31, 0x6B	; 107
}
     278:	80 81       	ld	r24, Z
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     280:	cf 93       	push	r28
     282:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     284:	80 81       	ld	r24, Z
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	a2 81       	ldd	r26, Z+2	; 0x02
     28a:	b3 81       	ldd	r27, Z+3	; 0x03
     28c:	c8 2f       	mov	r28, r24
     28e:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	68 94       	set
     296:	15 f8       	bld	r1, 5
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	77 95       	ror	r23
     29e:	67 95       	ror	r22
     2a0:	16 94       	lsr	r1
     2a2:	d1 f7       	brne	.-12     	; 0x298 <MT6701CRC+0x18>
     2a4:	60 83       	st	Z, r22
     2a6:	71 83       	std	Z+1, r23	; 0x01
     2a8:	82 83       	std	Z+2, r24	; 0x02
     2aa:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     2ac:	0e 94 0a 01 	call	0x214	; 0x214 <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	c8 13       	cpse	r28, r24
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <MT6701CRC+0x38>
     2b6:	90 e0       	ldi	r25, 0x00	; 0
}
     2b8:	89 2f       	mov	r24, r25
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     2be:	2f 92       	push	r2
     2c0:	3f 92       	push	r3
     2c2:	4f 92       	push	r4
     2c4:	5f 92       	push	r5
     2c6:	6f 92       	push	r6
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2b 97       	sbiw	r28, 0x0b	; 11
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	c2 2e       	mov	r12, r18
     2ee:	b3 2e       	mov	r11, r19
     2f0:	a4 2e       	mov	r10, r20
     2f2:	95 2e       	mov	r9, r21
     2f4:	86 2e       	mov	r8, r22
     2f6:	77 2e       	mov	r7, r23
     2f8:	68 2e       	mov	r6, r24
     2fa:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2fc:	f2 2e       	mov	r15, r18
     2fe:	03 2f       	mov	r16, r19
     300:	14 2f       	mov	r17, r20
     302:	5a 87       	std	Y+10, r21	; 0x0a
     304:	69 83       	std	Y+1, r22	; 0x01
     306:	b7 2f       	mov	r27, r23
     308:	d8 2e       	mov	r13, r24
     30a:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     310:	14 c0       	rjmp	.+40     	; 0x33a <crc8_cdma2000+0x7c>
        length++;
     312:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     314:	2f 2d       	mov	r18, r15
     316:	30 2f       	mov	r19, r16
     318:	41 2f       	mov	r20, r17
     31a:	5a 85       	ldd	r21, Y+10	; 0x0a
     31c:	69 81       	ldd	r22, Y+1	; 0x01
     31e:	7b 2f       	mov	r23, r27
     320:	8d 2d       	mov	r24, r13
     322:	9e 2d       	mov	r25, r14
     324:	08 e0       	ldi	r16, 0x08	; 8
     326:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__lshrdi3>
     32a:	f2 2e       	mov	r15, r18
     32c:	03 2f       	mov	r16, r19
     32e:	14 2f       	mov	r17, r20
     330:	5a 87       	std	Y+10, r21	; 0x0a
     332:	69 83       	std	Y+1, r22	; 0x01
     334:	b7 2f       	mov	r27, r23
     336:	d8 2e       	mov	r13, r24
     338:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     33a:	2f 2d       	mov	r18, r15
     33c:	30 2f       	mov	r19, r16
     33e:	41 2f       	mov	r20, r17
     340:	5a 85       	ldd	r21, Y+10	; 0x0a
     342:	69 81       	ldd	r22, Y+1	; 0x01
     344:	7b 2f       	mov	r23, r27
     346:	8d 2d       	mov	r24, r13
     348:	9e 2d       	mov	r25, r14
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	0e 94 86 06 	call	0xd0c	; 0xd0c <__cmpdi2_s8>
     350:	01 f7       	brne	.-64     	; 0x312 <crc8_cdma2000+0x54>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	8a 87       	std	Y+10, r24	; 0x0a
     356:	cb 86       	std	Y+11, r12	; 0x0b
     358:	b9 82       	std	Y+1, r11	; 0x01
     35a:	4a 2c       	mov	r4, r10
     35c:	39 2c       	mov	r3, r9
     35e:	28 2c       	mov	r2, r8
     360:	1a c0       	rjmp	.+52     	; 0x396 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     362:	8d 01       	movw	r16, r26
     364:	00 0f       	add	r16, r16
     366:	11 1f       	adc	r17, r17
     368:	00 0f       	add	r16, r16
     36a:	11 1f       	adc	r17, r17
     36c:	00 0f       	add	r16, r16
     36e:	11 1f       	adc	r17, r17
     370:	2b 85       	ldd	r18, Y+11	; 0x0b
     372:	39 81       	ldd	r19, Y+1	; 0x01
     374:	44 2d       	mov	r20, r4
     376:	53 2d       	mov	r21, r3
     378:	62 2d       	mov	r22, r2
     37a:	77 2d       	mov	r23, r7
     37c:	86 2d       	mov	r24, r6
     37e:	95 2d       	mov	r25, r5
     380:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__lshrdi3>
     384:	8a 84       	ldd	r8, Y+10	; 0x0a
     386:	82 26       	eor	r8, r18
     388:	91 2c       	mov	r9, r1
     38a:	f4 01       	movw	r30, r8
     38c:	e8 5c       	subi	r30, 0xC8	; 200
     38e:	fc 46       	sbci	r31, 0x6C	; 108
     390:	80 81       	ld	r24, Z
     392:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     394:	fd 01       	movw	r30, r26
     396:	df 01       	movw	r26, r30
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	ef 2b       	or	r30, r31
     39c:	11 f7       	brne	.-60     	; 0x362 <crc8_cdma2000+0xa4>
     39e:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     3a0:	2b 96       	adiw	r28, 0x0b	; 11
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	6f 90       	pop	r6
     3c2:	5f 90       	pop	r5
     3c4:	4f 90       	pop	r4
     3c6:	3f 90       	pop	r3
     3c8:	2f 90       	pop	r2
     3ca:	08 95       	ret

000003cc <FIR>:
 * - The new measurement is added to a circular buffer.
 * - The filtered result is calculated as the average of all samples in the buffer.
 *
 * @param channel Specifies whether to process voltage or current (Voltage or Current).
 */
void FIR(solarrcells_t channel) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	c8 2f       	mov	r28, r24
	ReadSolarCells(channel); ///< Read raw measurement from the selected ADC channel
     3d2:	0e 94 77 00 	call	0xee	; 0xee <ReadSolarCells>

	// Select target ADC_VALUES structure based on the channel (voltage or current)
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
     3d6:	c2 30       	cpi	r28, 0x02	; 2
     3d8:	19 f4       	brne	.+6      	; 0x3e0 <FIR+0x14>
     3da:	c0 e0       	ldi	r28, 0x00	; 0
     3dc:	d8 e3       	ldi	r29, 0x38	; 56
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <FIR+0x18>
     3e0:	cb e2       	ldi	r28, 0x2B	; 43
     3e2:	d8 e3       	ldi	r29, 0x38	; 56

	// Store the latest measurement into the filter buffer at the current index
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result;
     3e4:	ea a5       	ldd	r30, Y+42	; 0x2a
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ec 0f       	add	r30, r28
     3f4:	fd 1f       	adc	r31, r29
     3f6:	80 83       	st	Z, r24
     3f8:	91 83       	std	Z+1, r25	; 0x01

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;
     3fa:	8a a5       	ldd	r24, Y+42	; 0x2a
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	64 e1       	ldi	r22, 0x14	; 20
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 19 06 	call	0xc32	; 0xc32 <__divmodhi4>
     408:	8a a7       	std	Y+42, r24	; 0x2a

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     40a:	80 e0       	ldi	r24, 0x00	; 0

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	ba 01       	movw	r22, r20
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     412:	0e c0       	rjmp	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		sum += voltageORcurrent->Filter[i];
     414:	e8 2f       	mov	r30, r24
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	31 96       	adiw	r30, 0x01	; 1
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	20 81       	ld	r18, Z
     424:	31 81       	ldd	r19, Z+1	; 0x01
     426:	42 0f       	add	r20, r18
     428:	53 1f       	adc	r21, r19
     42a:	61 1d       	adc	r22, r1
     42c:	71 1d       	adc	r23, r1
	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	84 31       	cpi	r24, 0x14	; 20
     432:	80 f3       	brcs	.-32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		sum += voltageORcurrent->Filter[i];
	}

	// Store the filtered result as the average of the buffer
	voltageORcurrent->Result = sum / FIR_STEPS;
     434:	cb 01       	movw	r24, r22
     436:	ba 01       	movw	r22, r20
     438:	24 e1       	ldi	r18, 0x14	; 20
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__udivmodsi4>
     444:	28 83       	st	Y, r18
     446:	39 83       	std	Y+1, r19	; 0x01
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     44e:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f71aa>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b4 e0       	ldi	r27, 0x04	; 4
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	11 96       	adiw	r26, 0x01	; 1
     45a:	8c 93       	st	X, r24
     45c:	11 97       	sbiw	r26, 0x01	; 1
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	52 96       	adiw	r26, 0x12	; 18
     462:	8c 93       	st	X, r24
     464:	52 97       	sbiw	r26, 0x12	; 18
    PORTB.DIRCLR =  PIN3_bm; ///< PB3 as input (USART0 RX as MISO (MT6701 DO))	
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	8c 93       	st	X, r24
     46a:	12 97       	sbiw	r26, 0x02	; 2
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     46c:	53 96       	adiw	r26, 0x13	; 19
     46e:	8c 93       	st	X, r24
     470:	53 97       	sbiw	r26, 0x13	; 19

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     472:	e0 e0       	ldi	r30, 0x00	; 0
     474:	f4 e0       	ldi	r31, 0x04	; 4
     476:	92 ec       	ldi	r25, 0xC2	; 194
     478:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_INVEN_bm; ///< Invert for PA1 (USART1 TX LED TX) to save LED life and consumed energy
     47a:	90 e8       	ldi	r25, 0x80	; 128
     47c:	91 8b       	std	Z+17, r25	; 0x11
	PORTA.DIRCLR = PIN4_bm | PIN5_bm; ///< Set PA4 as input (Y MAX), Set PB0 as input (Y MIN)
     47e:	90 e3       	ldi	r25, 0x30	; 48
     480:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     482:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA5 (Y MIN)
     484:	85 8b       	std	Z+21, r24	; 0x15
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     486:	80 ec       	ldi	r24, 0xC0	; 192
     488:	85 83       	std	Z+5, r24	; 0x05

	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PB0 (SC Current)
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	50 96       	adiw	r26, 0x10	; 16
     48e:	8c 93       	st	X, r24
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA2 (SC Voltage)
     490:	82 8b       	std	Z+18, r24	; 0x12
     492:	08 95       	ret

00000494 <main>:
 * @return int (not used, since the function never exits).
 */

int main(void)
{
	CLOCK_XOSCHF_clock_init(); ///< Initialize exteral system clock
     494:	0e 94 f7 00 	call	0x1ee	; 0x1ee <CLOCK_XOSCHF_clock_init>
    //CLOCK_INHF_clock_init(); 
    GPIO_init(); ///< Initialize GPIO pins
     498:	0e 94 27 02 	call	0x44e	; 0x44e <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     49c:	0e 94 85 03 	call	0x70a	; 0x70a <USART0_init>
	USART1_init();
     4a0:	0e 94 aa 03 	call	0x754	; 0x754 <USART1_init>
	ADC0_init();
     4a4:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
		//Test for extenal- internal clock
		//PORTA.OUTTGL = PIN1_bm;
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     4a8:	80 e8       	ldi	r24, 0x80	; 128
     4aa:	0e 94 01 03 	call	0x602	; 0x602 <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     4ae:	80 e4       	ldi	r24, 0x40	; 64
     4b0:	0e 94 01 03 	call	0x602	; 0x602 <MT6701_SSI_Angle>
		//ReadSolarCells(Voltage); //uncomment if filtration no needded
		//ReadSolarCells(Current); //uncomment if filtration no needded
		FIR(Voltage); //comment if using ReadSolarCells(Voltage);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <FIR>
		FIR(Current); //comment if using ReadSolarCells(Current);
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <FIR>
		uint8_t y = YEndSwitches();
     4c0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <YEndSwitches>
     4c4:	38 2e       	mov	r3, r24
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);
     4c6:	cc e5       	ldi	r28, 0x5C	; 92
     4c8:	d8 e3       	ldi	r29, 0x38	; 56
     4ca:	88 80       	ld	r8, Y
     4cc:	99 80       	ldd	r9, Y+1	; 0x01
     4ce:	28 2d       	mov	r18, r8
     4d0:	39 2d       	mov	r19, r9
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0c e2       	ldi	r16, 0x2C	; 44
     4e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ashldi3>
     4e4:	92 2e       	mov	r9, r18
     4e6:	a3 2e       	mov	r10, r19
     4e8:	b4 2e       	mov	r11, r20
     4ea:	15 2f       	mov	r17, r21
     4ec:	c6 2e       	mov	r12, r22
     4ee:	d7 2e       	mov	r13, r23
     4f0:	f8 2f       	mov	r31, r24
     4f2:	e9 2f       	mov	r30, r25
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f6 e5       	ldi	r31, 0x56	; 86
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f8 e3       	ldi	r31, 0x38	; 56
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	d7 01       	movw	r26, r14
     502:	4d 91       	ld	r20, X+
     504:	5c 91       	ld	r21, X
     506:	24 2f       	mov	r18, r20
     508:	35 2f       	mov	r19, r21
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0c e1       	ldi	r16, 0x1C	; 28
     518:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ashldi3>
     51c:	92 2a       	or	r9, r18
     51e:	a3 2a       	or	r10, r19
     520:	b4 2a       	or	r11, r20
     522:	15 2b       	or	r17, r21
     524:	7c 2c       	mov	r7, r12
     526:	76 2a       	or	r7, r22
     528:	8d 2c       	mov	r8, r13
     52a:	87 2a       	or	r8, r23
     52c:	f8 2b       	or	r31, r24
     52e:	e9 2b       	or	r30, r25
     530:	0f 2e       	mov	r0, r31
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	cf 2e       	mov	r12, r31
     536:	f8 e3       	ldi	r31, 0x38	; 56
     538:	df 2e       	mov	r13, r31
     53a:	f0 2d       	mov	r31, r0
     53c:	d6 01       	movw	r26, r12
     53e:	8d 91       	ld	r24, X+
     540:	9c 91       	ld	r25, X
     542:	ac 01       	movw	r20, r24
     544:	24 2f       	mov	r18, r20
     546:	35 2f       	mov	r19, r21
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	00 e1       	ldi	r16, 0x10	; 16
     556:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ashldi3>
     55a:	29 29       	or	r18, r9
     55c:	3a 29       	or	r19, r10
     55e:	4b 29       	or	r20, r11
     560:	51 2b       	or	r21, r17
     562:	67 29       	or	r22, r7
     564:	78 29       	or	r23, r8
     566:	0b e2       	ldi	r16, 0x2B	; 43
     568:	18 e3       	ldi	r17, 0x38	; 56
     56a:	d8 01       	movw	r26, r16
     56c:	4d 90       	ld	r4, X+
     56e:	5c 90       	ld	r5, X
     570:	61 2c       	mov	r6, r1
     572:	71 2c       	mov	r7, r1
     574:	44 0c       	add	r4, r4
     576:	55 1c       	adc	r5, r5
     578:	66 1c       	adc	r6, r6
     57a:	77 1c       	adc	r7, r7
     57c:	44 0c       	add	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	66 1c       	adc	r6, r6
     582:	77 1c       	adc	r7, r7
     584:	44 0c       	add	r4, r4
     586:	55 1c       	adc	r5, r5
     588:	66 1c       	adc	r6, r6
     58a:	77 1c       	adc	r7, r7
     58c:	44 0c       	add	r4, r4
     58e:	55 1c       	adc	r5, r5
     590:	66 1c       	adc	r6, r6
     592:	77 1c       	adc	r7, r7
     594:	24 29       	or	r18, r4
     596:	35 29       	or	r19, r5
     598:	46 29       	or	r20, r6
     59a:	57 29       	or	r21, r7
     59c:	23 29       	or	r18, r3
     59e:	8f 2b       	or	r24, r31
     5a0:	9e 2b       	or	r25, r30
     5a2:	0e 94 5f 01 	call	0x2be	; 0x2be <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     5a6:	f8 01       	movw	r30, r16
     5a8:	70 81       	ld	r23, Z
     5aa:	e1 81       	ldd	r30, Z+1	; 0x01

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     5ac:	d6 01       	movw	r26, r12
     5ae:	5c 91       	ld	r21, X
     5b0:	11 96       	adiw	r26, 0x01	; 1
     5b2:	6c 91       	ld	r22, X
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     5b4:	d7 01       	movw	r26, r14
     5b6:	3c 91       	ld	r19, X
     5b8:	11 96       	adiw	r26, 0x01	; 1
     5ba:	4c 91       	ld	r20, X
		uint8_t y = YEndSwitches();
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     5bc:	98 81       	ld	r25, Y
     5be:	29 81       	ldd	r18, Y+1	; 0x01
		FIR(Current); //comment if using ReadSolarCells(Current);
		uint8_t y = YEndSwitches();
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	1f 92       	push	r1
     5c6:	3f 92       	push	r3
     5c8:	ef 93       	push	r30
     5ca:	7f 93       	push	r23
     5cc:	6f 93       	push	r22
     5ce:	5f 93       	push	r21
     5d0:	4f 93       	push	r20
     5d2:	3f 93       	push	r19
     5d4:	2f 93       	push	r18
     5d6:	9f 93       	push	r25
     5d8:	88 e7       	ldi	r24, 0x78	; 120
     5da:	94 e9       	ldi	r25, 0x94	; 148
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e4:	bf e7       	ldi	r27, 0x7F	; 127
     5e6:	ea e1       	ldi	r30, 0x1A	; 26
     5e8:	f6 e0       	ldi	r31, 0x06	; 6
     5ea:	b1 50       	subi	r27, 0x01	; 1
     5ec:	e0 40       	sbci	r30, 0x00	; 0
     5ee:	f0 40       	sbci	r31, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x156>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x160>
     5f4:	00 00       	nop
     5f6:	8d b7       	in	r24, 0x3d	; 61
     5f8:	9e b7       	in	r25, 0x3e	; 62
     5fa:	0e 96       	adiw	r24, 0x0e	; 14
     5fc:	8d bf       	out	0x3d, r24	; 61
     5fe:	9e bf       	out	0x3e, r25	; 62
     600:	53 cf       	rjmp	.-346    	; 0x4a8 <main+0x14>

00000602 <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <MT6701_SSI_Angle+0xa>
     60c:	00 d0       	rcall	.+0      	; 0x60e <MT6701_SSI_Angle+0xc>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	1b 82       	std	Y+3, r1	; 0x03
     61a:	1c 82       	std	Y+4, r1	; 0x04
    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     61c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f6fce>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	1b c0       	rjmp	.+54     	; 0x65a <MT6701_SSI_Angle+0x58>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     624:	8f e6       	ldi	r24, 0x6F	; 111
     626:	0e 94 90 03 	call	0x720	; 0x720 <USART0_sendChar>
        received_data <<= 8; ///< Shift previous data left by 8 bits
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	ab 81       	ldd	r26, Y+3	; 0x03
     630:	bc 81       	ldd	r27, Y+4	; 0x04
     632:	ba 2f       	mov	r27, r26
     634:	a9 2f       	mov	r26, r25
     636:	98 2f       	mov	r25, r24
     638:	88 27       	eor	r24, r24
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	9a 83       	std	Y+2, r25	; 0x02
     63e:	ab 83       	std	Y+3, r26	; 0x03
     640:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     642:	0e 94 97 03 	call	0x72e	; 0x72e <USART0_readChar>
     646:	49 81       	ldd	r20, Y+1	; 0x01
     648:	5a 81       	ldd	r21, Y+2	; 0x02
     64a:	6b 81       	ldd	r22, Y+3	; 0x03
     64c:	7c 81       	ldd	r23, Y+4	; 0x04
     64e:	48 2b       	or	r20, r24
     650:	49 83       	std	Y+1, r20	; 0x01
     652:	5a 83       	std	Y+2, r21	; 0x02
     654:	6b 83       	std	Y+3, r22	; 0x03
     656:	7c 83       	std	Y+4, r23	; 0x04
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;
    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     658:	1f 5f       	subi	r17, 0xFF	; 255
     65a:	13 30       	cpi	r17, 0x03	; 3
     65c:	18 f3       	brcs	.-58     	; 0x624 <MT6701_SSI_Angle+0x22>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     65e:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f6fcd>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     662:	00 38       	cpi	r16, 0x80	; 128
     664:	19 f4       	brne	.+6      	; 0x66c <MT6701_SSI_Angle+0x6a>
     666:	0c e5       	ldi	r16, 0x5C	; 92
     668:	18 e3       	ldi	r17, 0x38	; 56
     66a:	02 c0       	rjmp	.+4      	; 0x670 <MT6701_SSI_Angle+0x6e>
     66c:	06 e5       	ldi	r16, 0x56	; 86
     66e:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	0e 94 40 01 	call	0x280	; 0x280 <MT6701CRC>
     678:	f8 01       	movw	r30, r16
     67a:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	83 70       	andi	r24, 0x03	; 3
     680:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	ab 81       	ldd	r26, Y+3	; 0x03
     688:	bc 81       	ldd	r27, Y+4	; 0x04
     68a:	b6 95       	lsr	r27
     68c:	a7 95       	ror	r26
     68e:	97 95       	ror	r25
     690:	87 95       	ror	r24
     692:	b6 95       	lsr	r27
     694:	a7 95       	ror	r26
     696:	97 95       	ror	r25
     698:	87 95       	ror	r24
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	ab 81       	ldd	r26, Y+3	; 0x03
     6a4:	bc 81       	ldd	r27, Y+4	; 0x04
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	68 94       	set
     6ac:	12 f8       	bld	r1, 2
     6ae:	76 95       	lsr	r23
     6b0:	67 95       	ror	r22
     6b2:	57 95       	ror	r21
     6b4:	47 95       	ror	r20
     6b6:	16 94       	lsr	r1
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <MT6701_SSI_Angle+0xac>
     6ba:	24 2f       	mov	r18, r20
     6bc:	21 70       	andi	r18, 0x01	; 1
     6be:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	68 94       	set
     6c6:	13 f8       	bld	r1, 3
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	77 95       	ror	r23
     6ce:	67 95       	ror	r22
     6d0:	16 94       	lsr	r1
     6d2:	d1 f7       	brne	.-12     	; 0x6c8 <MT6701_SSI_Angle+0xc6>
     6d4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__floatunsisf>
     6d8:	23 e5       	ldi	r18, 0x53	; 83
     6da:	34 e0       	ldi	r19, 0x04	; 4
     6dc:	49 ee       	ldi	r20, 0xE9	; 233
     6de:	5e e3       	ldi	r21, 0x3E	; 62
     6e0:	0e 94 76 04 	call	0x8ec	; 0x8ec <__divsf3>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	0e 94 0a 04 	call	0x814	; 0x814 <__addsf3>
     6f0:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
     6f4:	f8 01       	movw	r30, r16
     6f6:	60 83       	st	Z, r22
     6f8:	71 83       	std	Z+1, r23	; 0x01
     6fa:	24 96       	adiw	r28, 0x04	; 4
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	08 95       	ret

0000070a <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     70a:	e0 e0       	ldi	r30, 0x00	; 0
     70c:	f8 e0       	ldi	r31, 0x08	; 8
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	95 e0       	ldi	r25, 0x05	; 5
     712:	80 87       	std	Z+8, r24	; 0x08
     714:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     716:	80 ec       	ldi	r24, 0xC0	; 192
     718:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     71a:	82 ec       	ldi	r24, 0xC2	; 194
     71c:	87 83       	std	Z+7, r24	; 0x07
     71e:	08 95       	ret

00000720 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     720:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f73cc>
     724:	95 ff       	sbrs	r25, 5
     726:	fc cf       	rjmp	.-8      	; 0x720 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     728:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f73ca>
     72c:	08 95       	ret

0000072e <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     72e:	80 e8       	ldi	r24, 0x80	; 128
     730:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f73cc>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     734:	80 e4       	ldi	r24, 0x40	; 64
     736:	9c e9       	ldi	r25, 0x9C	; 156
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     73c:	04 c0       	rjmp	.+8      	; 0x746 <USART0_readChar+0x18>
        if (--timeout_counter == 0) { // Timeout condition
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	a1 09       	sbc	r26, r1
     742:	b1 09       	sbc	r27, r1
     744:	21 f0       	breq	.+8      	; 0x74e <USART0_readChar+0x20>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     746:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f73cc>
     74a:	22 23       	and	r18, r18
     74c:	c4 f7       	brge	.-16     	; 0x73e <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
           // Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     74e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f73c8>
}
     752:	08 95       	ret

00000754 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(460800); // Set baud rate to 0.4608M
     754:	e0 e2       	ldi	r30, 0x20	; 32
     756:	f8 e0       	ldi	r31, 0x08	; 8
     758:	8b e5       	ldi	r24, 0x5B	; 91
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	80 87       	std	Z+8, r24	; 0x08
     75e:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     760:	82 e4       	ldi	r24, 0x42	; 66
     762:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	87 83       	std	Z+7, r24	; 0x07
     768:	08 95       	ret

0000076a <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     76a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f73ec>
     76e:	95 ff       	sbrs	r25, 5
     770:	fc cf       	rjmp	.-8      	; 0x76a <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     772:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f73ea>
     776:	08 95       	ret

00000778 <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	d0 e0       	ldi	r29, 0x00	; 0
     786:	07 c0       	rjmp	.+14     	; 0x796 <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     788:	f8 01       	movw	r30, r16
     78a:	ec 0f       	add	r30, r28
     78c:	fd 1f       	adc	r31, r29
     78e:	80 81       	ld	r24, Z
     790:	0e 94 b5 03 	call	0x76a	; 0x76a <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     794:	21 96       	adiw	r28, 0x01	; 1
     796:	f8 01       	movw	r30, r16
     798:	01 90       	ld	r0, Z+
     79a:	00 20       	and	r0, r0
     79c:	e9 f7       	brne	.-6      	; 0x798 <USART1_sendString+0x20>
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	e0 1b       	sub	r30, r16
     7a2:	f1 0b       	sbc	r31, r17
     7a4:	ce 17       	cp	r28, r30
     7a6:	df 07       	cpc	r29, r31
     7a8:	78 f3       	brcs	.-34     	; 0x788 <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	6e 97       	sbiw	r28, 0x1e	; 30
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	9e 01       	movw	r18, r28
     7c4:	2d 5d       	subi	r18, 0xDD	; 221
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	f9 01       	movw	r30, r18
     7ca:	41 91       	ld	r20, Z+
     7cc:	51 91       	ld	r21, Z+
     7ce:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     7d0:	6e e1       	ldi	r22, 0x1E	; 30
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	0e 94 bc 03 	call	0x778	; 0x778 <USART1_sendString>
     7e4:	6e 96       	adiw	r28, 0x1e	; 30
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTA.IN & PIN5_bm)) | ((!(PORTA.IN & PIN4_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values) and it will be 0,1,2,3
     7f0:	e0 e0       	ldi	r30, 0x00	; 0
     7f2:	f4 e0       	ldi	r31, 0x04	; 4
     7f4:	80 85       	ldd	r24, Z+8	; 0x08
     7f6:	82 95       	swap	r24
     7f8:	86 95       	lsr	r24
     7fa:	87 70       	andi	r24, 0x07	; 7
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	89 27       	eor	r24, r25
     800:	81 70       	andi	r24, 0x01	; 1
     802:	90 85       	ldd	r25, Z+8	; 0x08
     804:	94 fd       	sbrc	r25, 4
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	01 c0       	rjmp	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	89 2b       	or	r24, r25
     810:	08 95       	ret

00000812 <__subsf3>:
     812:	50 58       	subi	r21, 0x80	; 128

00000814 <__addsf3>:
     814:	bb 27       	eor	r27, r27
     816:	aa 27       	eor	r26, r26
     818:	0e 94 21 04 	call	0x842	; 0x842 <__addsf3x>
     81c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_round>
     820:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscA>
     824:	38 f0       	brcs	.+14     	; 0x834 <__addsf3+0x20>
     826:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscB>
     82a:	20 f0       	brcs	.+8      	; 0x834 <__addsf3+0x20>
     82c:	39 f4       	brne	.+14     	; 0x83c <__addsf3+0x28>
     82e:	9f 3f       	cpi	r25, 0xFF	; 255
     830:	19 f4       	brne	.+6      	; 0x838 <__addsf3+0x24>
     832:	26 f4       	brtc	.+8      	; 0x83c <__addsf3+0x28>
     834:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__fp_nan>
     838:	0e f4       	brtc	.+2      	; 0x83c <__addsf3+0x28>
     83a:	e0 95       	com	r30
     83c:	e7 fb       	bst	r30, 7
     83e:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_inf>

00000842 <__addsf3x>:
     842:	e9 2f       	mov	r30, r25
     844:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_split3>
     848:	58 f3       	brcs	.-42     	; 0x820 <__addsf3+0xc>
     84a:	ba 17       	cp	r27, r26
     84c:	62 07       	cpc	r22, r18
     84e:	73 07       	cpc	r23, r19
     850:	84 07       	cpc	r24, r20
     852:	95 07       	cpc	r25, r21
     854:	20 f0       	brcs	.+8      	; 0x85e <__addsf3x+0x1c>
     856:	79 f4       	brne	.+30     	; 0x876 <__addsf3x+0x34>
     858:	a6 f5       	brtc	.+104    	; 0x8c2 <__addsf3x+0x80>
     85a:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_zero>
     85e:	0e f4       	brtc	.+2      	; 0x862 <__addsf3x+0x20>
     860:	e0 95       	com	r30
     862:	0b 2e       	mov	r0, r27
     864:	ba 2f       	mov	r27, r26
     866:	a0 2d       	mov	r26, r0
     868:	0b 01       	movw	r0, r22
     86a:	b9 01       	movw	r22, r18
     86c:	90 01       	movw	r18, r0
     86e:	0c 01       	movw	r0, r24
     870:	ca 01       	movw	r24, r20
     872:	a0 01       	movw	r20, r0
     874:	11 24       	eor	r1, r1
     876:	ff 27       	eor	r31, r31
     878:	59 1b       	sub	r21, r25
     87a:	99 f0       	breq	.+38     	; 0x8a2 <__addsf3x+0x60>
     87c:	59 3f       	cpi	r21, 0xF9	; 249
     87e:	50 f4       	brcc	.+20     	; 0x894 <__addsf3x+0x52>
     880:	50 3e       	cpi	r21, 0xE0	; 224
     882:	68 f1       	brcs	.+90     	; 0x8de <__addsf3x+0x9c>
     884:	1a 16       	cp	r1, r26
     886:	f0 40       	sbci	r31, 0x00	; 0
     888:	a2 2f       	mov	r26, r18
     88a:	23 2f       	mov	r18, r19
     88c:	34 2f       	mov	r19, r20
     88e:	44 27       	eor	r20, r20
     890:	58 5f       	subi	r21, 0xF8	; 248
     892:	f3 cf       	rjmp	.-26     	; 0x87a <__addsf3x+0x38>
     894:	46 95       	lsr	r20
     896:	37 95       	ror	r19
     898:	27 95       	ror	r18
     89a:	a7 95       	ror	r26
     89c:	f0 40       	sbci	r31, 0x00	; 0
     89e:	53 95       	inc	r21
     8a0:	c9 f7       	brne	.-14     	; 0x894 <__addsf3x+0x52>
     8a2:	7e f4       	brtc	.+30     	; 0x8c2 <__addsf3x+0x80>
     8a4:	1f 16       	cp	r1, r31
     8a6:	ba 0b       	sbc	r27, r26
     8a8:	62 0b       	sbc	r22, r18
     8aa:	73 0b       	sbc	r23, r19
     8ac:	84 0b       	sbc	r24, r20
     8ae:	ba f0       	brmi	.+46     	; 0x8de <__addsf3x+0x9c>
     8b0:	91 50       	subi	r25, 0x01	; 1
     8b2:	a1 f0       	breq	.+40     	; 0x8dc <__addsf3x+0x9a>
     8b4:	ff 0f       	add	r31, r31
     8b6:	bb 1f       	adc	r27, r27
     8b8:	66 1f       	adc	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	88 1f       	adc	r24, r24
     8be:	c2 f7       	brpl	.-16     	; 0x8b0 <__addsf3x+0x6e>
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <__addsf3x+0x9c>
     8c2:	ba 0f       	add	r27, r26
     8c4:	62 1f       	adc	r22, r18
     8c6:	73 1f       	adc	r23, r19
     8c8:	84 1f       	adc	r24, r20
     8ca:	48 f4       	brcc	.+18     	; 0x8de <__addsf3x+0x9c>
     8cc:	87 95       	ror	r24
     8ce:	77 95       	ror	r23
     8d0:	67 95       	ror	r22
     8d2:	b7 95       	ror	r27
     8d4:	f7 95       	ror	r31
     8d6:	9e 3f       	cpi	r25, 0xFE	; 254
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__addsf3x+0x9a>
     8da:	b0 cf       	rjmp	.-160    	; 0x83c <__addsf3+0x28>
     8dc:	93 95       	inc	r25
     8de:	88 0f       	add	r24, r24
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__addsf3x+0xa2>
     8e2:	99 27       	eor	r25, r25
     8e4:	ee 0f       	add	r30, r30
     8e6:	97 95       	ror	r25
     8e8:	87 95       	ror	r24
     8ea:	08 95       	ret

000008ec <__divsf3>:
     8ec:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3x>
     8f0:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_round>
     8f4:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscB>
     8f8:	58 f0       	brcs	.+22     	; 0x910 <__divsf3+0x24>
     8fa:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscA>
     8fe:	40 f0       	brcs	.+16     	; 0x910 <__divsf3+0x24>
     900:	29 f4       	brne	.+10     	; 0x90c <__divsf3+0x20>
     902:	5f 3f       	cpi	r21, 0xFF	; 255
     904:	29 f0       	breq	.+10     	; 0x910 <__divsf3+0x24>
     906:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_inf>
     90a:	51 11       	cpse	r21, r1
     90c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_szero>
     910:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__fp_nan>

00000914 <__divsf3x>:
     914:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_split3>
     918:	68 f3       	brcs	.-38     	; 0x8f4 <__divsf3+0x8>

0000091a <__divsf3_pse>:
     91a:	99 23       	and	r25, r25
     91c:	b1 f3       	breq	.-20     	; 0x90a <__divsf3+0x1e>
     91e:	55 23       	and	r21, r21
     920:	91 f3       	breq	.-28     	; 0x906 <__divsf3+0x1a>
     922:	95 1b       	sub	r25, r21
     924:	55 0b       	sbc	r21, r21
     926:	bb 27       	eor	r27, r27
     928:	aa 27       	eor	r26, r26
     92a:	62 17       	cp	r22, r18
     92c:	73 07       	cpc	r23, r19
     92e:	84 07       	cpc	r24, r20
     930:	38 f0       	brcs	.+14     	; 0x940 <__divsf3_pse+0x26>
     932:	9f 5f       	subi	r25, 0xFF	; 255
     934:	5f 4f       	sbci	r21, 0xFF	; 255
     936:	22 0f       	add	r18, r18
     938:	33 1f       	adc	r19, r19
     93a:	44 1f       	adc	r20, r20
     93c:	aa 1f       	adc	r26, r26
     93e:	a9 f3       	breq	.-22     	; 0x92a <__divsf3_pse+0x10>
     940:	35 d0       	rcall	.+106    	; 0x9ac <__divsf3_pse+0x92>
     942:	0e 2e       	mov	r0, r30
     944:	3a f0       	brmi	.+14     	; 0x954 <__divsf3_pse+0x3a>
     946:	e0 e8       	ldi	r30, 0x80	; 128
     948:	32 d0       	rcall	.+100    	; 0x9ae <__divsf3_pse+0x94>
     94a:	91 50       	subi	r25, 0x01	; 1
     94c:	50 40       	sbci	r21, 0x00	; 0
     94e:	e6 95       	lsr	r30
     950:	00 1c       	adc	r0, r0
     952:	ca f7       	brpl	.-14     	; 0x946 <__divsf3_pse+0x2c>
     954:	2b d0       	rcall	.+86     	; 0x9ac <__divsf3_pse+0x92>
     956:	fe 2f       	mov	r31, r30
     958:	29 d0       	rcall	.+82     	; 0x9ac <__divsf3_pse+0x92>
     95a:	66 0f       	add	r22, r22
     95c:	77 1f       	adc	r23, r23
     95e:	88 1f       	adc	r24, r24
     960:	bb 1f       	adc	r27, r27
     962:	26 17       	cp	r18, r22
     964:	37 07       	cpc	r19, r23
     966:	48 07       	cpc	r20, r24
     968:	ab 07       	cpc	r26, r27
     96a:	b0 e8       	ldi	r27, 0x80	; 128
     96c:	09 f0       	breq	.+2      	; 0x970 <__divsf3_pse+0x56>
     96e:	bb 0b       	sbc	r27, r27
     970:	80 2d       	mov	r24, r0
     972:	bf 01       	movw	r22, r30
     974:	ff 27       	eor	r31, r31
     976:	93 58       	subi	r25, 0x83	; 131
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	3a f0       	brmi	.+14     	; 0x98a <__divsf3_pse+0x70>
     97c:	9e 3f       	cpi	r25, 0xFE	; 254
     97e:	51 05       	cpc	r21, r1
     980:	78 f0       	brcs	.+30     	; 0x9a0 <__divsf3_pse+0x86>
     982:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_inf>
     986:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_szero>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	e4 f3       	brlt	.-8      	; 0x986 <__divsf3_pse+0x6c>
     98e:	98 3e       	cpi	r25, 0xE8	; 232
     990:	d4 f3       	brlt	.-12     	; 0x986 <__divsf3_pse+0x6c>
     992:	86 95       	lsr	r24
     994:	77 95       	ror	r23
     996:	67 95       	ror	r22
     998:	b7 95       	ror	r27
     99a:	f7 95       	ror	r31
     99c:	9f 5f       	subi	r25, 0xFF	; 255
     99e:	c9 f7       	brne	.-14     	; 0x992 <__divsf3_pse+0x78>
     9a0:	88 0f       	add	r24, r24
     9a2:	91 1d       	adc	r25, r1
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	97 f9       	bld	r25, 7
     9aa:	08 95       	ret
     9ac:	e1 e0       	ldi	r30, 0x01	; 1
     9ae:	66 0f       	add	r22, r22
     9b0:	77 1f       	adc	r23, r23
     9b2:	88 1f       	adc	r24, r24
     9b4:	bb 1f       	adc	r27, r27
     9b6:	62 17       	cp	r22, r18
     9b8:	73 07       	cpc	r23, r19
     9ba:	84 07       	cpc	r24, r20
     9bc:	ba 07       	cpc	r27, r26
     9be:	20 f0       	brcs	.+8      	; 0x9c8 <__divsf3_pse+0xae>
     9c0:	62 1b       	sub	r22, r18
     9c2:	73 0b       	sbc	r23, r19
     9c4:	84 0b       	sbc	r24, r20
     9c6:	ba 0b       	sbc	r27, r26
     9c8:	ee 1f       	adc	r30, r30
     9ca:	88 f7       	brcc	.-30     	; 0x9ae <__divsf3_pse+0x94>
     9cc:	e0 95       	com	r30
     9ce:	08 95       	ret

000009d0 <__fixsfsi>:
     9d0:	0e 94 ef 04 	call	0x9de	; 0x9de <__fixunssfsi>
     9d4:	68 94       	set
     9d6:	b1 11       	cpse	r27, r1
     9d8:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_szero>
     9dc:	08 95       	ret

000009de <__fixunssfsi>:
     9de:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_splitA>
     9e2:	88 f0       	brcs	.+34     	; 0xa06 <__fixunssfsi+0x28>
     9e4:	9f 57       	subi	r25, 0x7F	; 127
     9e6:	98 f0       	brcs	.+38     	; 0xa0e <__fixunssfsi+0x30>
     9e8:	b9 2f       	mov	r27, r25
     9ea:	99 27       	eor	r25, r25
     9ec:	b7 51       	subi	r27, 0x17	; 23
     9ee:	b0 f0       	brcs	.+44     	; 0xa1c <__fixunssfsi+0x3e>
     9f0:	e1 f0       	breq	.+56     	; 0xa2a <__fixunssfsi+0x4c>
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	88 1f       	adc	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	1a f0       	brmi	.+6      	; 0xa02 <__fixunssfsi+0x24>
     9fc:	ba 95       	dec	r27
     9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__fixunssfsi+0x14>
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <__fixunssfsi+0x4c>
     a02:	b1 30       	cpi	r27, 0x01	; 1
     a04:	91 f0       	breq	.+36     	; 0xa2a <__fixunssfsi+0x4c>
     a06:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_zero>
     a0a:	b1 e0       	ldi	r27, 0x01	; 1
     a0c:	08 95       	ret
     a0e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_zero>
     a12:	67 2f       	mov	r22, r23
     a14:	78 2f       	mov	r23, r24
     a16:	88 27       	eor	r24, r24
     a18:	b8 5f       	subi	r27, 0xF8	; 248
     a1a:	39 f0       	breq	.+14     	; 0xa2a <__fixunssfsi+0x4c>
     a1c:	b9 3f       	cpi	r27, 0xF9	; 249
     a1e:	cc f3       	brlt	.-14     	; 0xa12 <__fixunssfsi+0x34>
     a20:	86 95       	lsr	r24
     a22:	77 95       	ror	r23
     a24:	67 95       	ror	r22
     a26:	b3 95       	inc	r27
     a28:	d9 f7       	brne	.-10     	; 0xa20 <__fixunssfsi+0x42>
     a2a:	3e f4       	brtc	.+14     	; 0xa3a <__fixunssfsi+0x5c>
     a2c:	90 95       	com	r25
     a2e:	80 95       	com	r24
     a30:	70 95       	com	r23
     a32:	61 95       	neg	r22
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	8f 4f       	sbci	r24, 0xFF	; 255
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	08 95       	ret

00000a3c <__floatunsisf>:
     a3c:	e8 94       	clt
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__floatsisf+0x12>

00000a40 <__floatsisf>:
     a40:	97 fb       	bst	r25, 7
     a42:	3e f4       	brtc	.+14     	; 0xa52 <__floatsisf+0x12>
     a44:	90 95       	com	r25
     a46:	80 95       	com	r24
     a48:	70 95       	com	r23
     a4a:	61 95       	neg	r22
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	8f 4f       	sbci	r24, 0xFF	; 255
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	99 23       	and	r25, r25
     a54:	a9 f0       	breq	.+42     	; 0xa80 <__floatsisf+0x40>
     a56:	f9 2f       	mov	r31, r25
     a58:	96 e9       	ldi	r25, 0x96	; 150
     a5a:	bb 27       	eor	r27, r27
     a5c:	93 95       	inc	r25
     a5e:	f6 95       	lsr	r31
     a60:	87 95       	ror	r24
     a62:	77 95       	ror	r23
     a64:	67 95       	ror	r22
     a66:	b7 95       	ror	r27
     a68:	f1 11       	cpse	r31, r1
     a6a:	f8 cf       	rjmp	.-16     	; 0xa5c <__floatsisf+0x1c>
     a6c:	fa f4       	brpl	.+62     	; 0xaac <__floatsisf+0x6c>
     a6e:	bb 0f       	add	r27, r27
     a70:	11 f4       	brne	.+4      	; 0xa76 <__floatsisf+0x36>
     a72:	60 ff       	sbrs	r22, 0
     a74:	1b c0       	rjmp	.+54     	; 0xaac <__floatsisf+0x6c>
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	16 c0       	rjmp	.+44     	; 0xaac <__floatsisf+0x6c>
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <__floatsisf+0x48>
     a84:	96 e9       	ldi	r25, 0x96	; 150
     a86:	11 c0       	rjmp	.+34     	; 0xaaa <__floatsisf+0x6a>
     a88:	77 23       	and	r23, r23
     a8a:	21 f0       	breq	.+8      	; 0xa94 <__floatsisf+0x54>
     a8c:	9e e8       	ldi	r25, 0x8E	; 142
     a8e:	87 2f       	mov	r24, r23
     a90:	76 2f       	mov	r23, r22
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <__floatsisf+0x5e>
     a94:	66 23       	and	r22, r22
     a96:	71 f0       	breq	.+28     	; 0xab4 <__floatsisf+0x74>
     a98:	96 e8       	ldi	r25, 0x86	; 134
     a9a:	86 2f       	mov	r24, r22
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	2a f0       	brmi	.+10     	; 0xaac <__floatsisf+0x6c>
     aa2:	9a 95       	dec	r25
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	88 1f       	adc	r24, r24
     aaa:	da f7       	brpl	.-10     	; 0xaa2 <__floatsisf+0x62>
     aac:	88 0f       	add	r24, r24
     aae:	96 95       	lsr	r25
     ab0:	87 95       	ror	r24
     ab2:	97 f9       	bld	r25, 7
     ab4:	08 95       	ret

00000ab6 <__fp_inf>:
     ab6:	97 f9       	bld	r25, 7
     ab8:	9f 67       	ori	r25, 0x7F	; 127
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	08 95       	ret

00000ac2 <__fp_nan>:
     ac2:	9f ef       	ldi	r25, 0xFF	; 255
     ac4:	80 ec       	ldi	r24, 0xC0	; 192
     ac6:	08 95       	ret

00000ac8 <__fp_pscA>:
     ac8:	00 24       	eor	r0, r0
     aca:	0a 94       	dec	r0
     acc:	16 16       	cp	r1, r22
     ace:	17 06       	cpc	r1, r23
     ad0:	18 06       	cpc	r1, r24
     ad2:	09 06       	cpc	r0, r25
     ad4:	08 95       	ret

00000ad6 <__fp_pscB>:
     ad6:	00 24       	eor	r0, r0
     ad8:	0a 94       	dec	r0
     ada:	12 16       	cp	r1, r18
     adc:	13 06       	cpc	r1, r19
     ade:	14 06       	cpc	r1, r20
     ae0:	05 06       	cpc	r0, r21
     ae2:	08 95       	ret

00000ae4 <__fp_round>:
     ae4:	09 2e       	mov	r0, r25
     ae6:	03 94       	inc	r0
     ae8:	00 0c       	add	r0, r0
     aea:	11 f4       	brne	.+4      	; 0xaf0 <__fp_round+0xc>
     aec:	88 23       	and	r24, r24
     aee:	52 f0       	brmi	.+20     	; 0xb04 <__fp_round+0x20>
     af0:	bb 0f       	add	r27, r27
     af2:	40 f4       	brcc	.+16     	; 0xb04 <__fp_round+0x20>
     af4:	bf 2b       	or	r27, r31
     af6:	11 f4       	brne	.+4      	; 0xafc <__fp_round+0x18>
     af8:	60 ff       	sbrs	r22, 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__fp_round+0x20>
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	8f 4f       	sbci	r24, 0xFF	; 255
     b02:	9f 4f       	sbci	r25, 0xFF	; 255
     b04:	08 95       	ret

00000b06 <__fp_split3>:
     b06:	57 fd       	sbrc	r21, 7
     b08:	90 58       	subi	r25, 0x80	; 128
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	59 f0       	breq	.+22     	; 0xb26 <__fp_splitA+0x10>
     b10:	5f 3f       	cpi	r21, 0xFF	; 255
     b12:	71 f0       	breq	.+28     	; 0xb30 <__fp_splitA+0x1a>
     b14:	47 95       	ror	r20

00000b16 <__fp_splitA>:
     b16:	88 0f       	add	r24, r24
     b18:	97 fb       	bst	r25, 7
     b1a:	99 1f       	adc	r25, r25
     b1c:	61 f0       	breq	.+24     	; 0xb36 <__fp_splitA+0x20>
     b1e:	9f 3f       	cpi	r25, 0xFF	; 255
     b20:	79 f0       	breq	.+30     	; 0xb40 <__fp_splitA+0x2a>
     b22:	87 95       	ror	r24
     b24:	08 95       	ret
     b26:	12 16       	cp	r1, r18
     b28:	13 06       	cpc	r1, r19
     b2a:	14 06       	cpc	r1, r20
     b2c:	55 1f       	adc	r21, r21
     b2e:	f2 cf       	rjmp	.-28     	; 0xb14 <__fp_split3+0xe>
     b30:	46 95       	lsr	r20
     b32:	f1 df       	rcall	.-30     	; 0xb16 <__fp_splitA>
     b34:	08 c0       	rjmp	.+16     	; 0xb46 <__fp_splitA+0x30>
     b36:	16 16       	cp	r1, r22
     b38:	17 06       	cpc	r1, r23
     b3a:	18 06       	cpc	r1, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	f1 cf       	rjmp	.-30     	; 0xb22 <__fp_splitA+0xc>
     b40:	86 95       	lsr	r24
     b42:	71 05       	cpc	r23, r1
     b44:	61 05       	cpc	r22, r1
     b46:	08 94       	sec
     b48:	08 95       	ret

00000b4a <__fp_zero>:
     b4a:	e8 94       	clt

00000b4c <__fp_szero>:
     b4c:	bb 27       	eor	r27, r27
     b4e:	66 27       	eor	r22, r22
     b50:	77 27       	eor	r23, r23
     b52:	cb 01       	movw	r24, r22
     b54:	97 f9       	bld	r25, 7
     b56:	08 95       	ret

00000b58 <__mulsf3>:
     b58:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3x>
     b5c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_round>
     b60:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscA>
     b64:	38 f0       	brcs	.+14     	; 0xb74 <__mulsf3+0x1c>
     b66:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_pscB>
     b6a:	20 f0       	brcs	.+8      	; 0xb74 <__mulsf3+0x1c>
     b6c:	95 23       	and	r25, r21
     b6e:	11 f0       	breq	.+4      	; 0xb74 <__mulsf3+0x1c>
     b70:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_inf>
     b74:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__fp_nan>
     b78:	11 24       	eor	r1, r1
     b7a:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_szero>

00000b7e <__mulsf3x>:
     b7e:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_split3>
     b82:	70 f3       	brcs	.-36     	; 0xb60 <__mulsf3+0x8>

00000b84 <__mulsf3_pse>:
     b84:	95 9f       	mul	r25, r21
     b86:	c1 f3       	breq	.-16     	; 0xb78 <__mulsf3+0x20>
     b88:	95 0f       	add	r25, r21
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	55 1f       	adc	r21, r21
     b8e:	62 9f       	mul	r22, r18
     b90:	f0 01       	movw	r30, r0
     b92:	72 9f       	mul	r23, r18
     b94:	bb 27       	eor	r27, r27
     b96:	f0 0d       	add	r31, r0
     b98:	b1 1d       	adc	r27, r1
     b9a:	63 9f       	mul	r22, r19
     b9c:	aa 27       	eor	r26, r26
     b9e:	f0 0d       	add	r31, r0
     ba0:	b1 1d       	adc	r27, r1
     ba2:	aa 1f       	adc	r26, r26
     ba4:	64 9f       	mul	r22, r20
     ba6:	66 27       	eor	r22, r22
     ba8:	b0 0d       	add	r27, r0
     baa:	a1 1d       	adc	r26, r1
     bac:	66 1f       	adc	r22, r22
     bae:	82 9f       	mul	r24, r18
     bb0:	22 27       	eor	r18, r18
     bb2:	b0 0d       	add	r27, r0
     bb4:	a1 1d       	adc	r26, r1
     bb6:	62 1f       	adc	r22, r18
     bb8:	73 9f       	mul	r23, r19
     bba:	b0 0d       	add	r27, r0
     bbc:	a1 1d       	adc	r26, r1
     bbe:	62 1f       	adc	r22, r18
     bc0:	83 9f       	mul	r24, r19
     bc2:	a0 0d       	add	r26, r0
     bc4:	61 1d       	adc	r22, r1
     bc6:	22 1f       	adc	r18, r18
     bc8:	74 9f       	mul	r23, r20
     bca:	33 27       	eor	r19, r19
     bcc:	a0 0d       	add	r26, r0
     bce:	61 1d       	adc	r22, r1
     bd0:	23 1f       	adc	r18, r19
     bd2:	84 9f       	mul	r24, r20
     bd4:	60 0d       	add	r22, r0
     bd6:	21 1d       	adc	r18, r1
     bd8:	82 2f       	mov	r24, r18
     bda:	76 2f       	mov	r23, r22
     bdc:	6a 2f       	mov	r22, r26
     bde:	11 24       	eor	r1, r1
     be0:	9f 57       	subi	r25, 0x7F	; 127
     be2:	50 40       	sbci	r21, 0x00	; 0
     be4:	9a f0       	brmi	.+38     	; 0xc0c <__mulsf3_pse+0x88>
     be6:	f1 f0       	breq	.+60     	; 0xc24 <__mulsf3_pse+0xa0>
     be8:	88 23       	and	r24, r24
     bea:	4a f0       	brmi	.+18     	; 0xbfe <__mulsf3_pse+0x7a>
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	bb 1f       	adc	r27, r27
     bf2:	66 1f       	adc	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	91 50       	subi	r25, 0x01	; 1
     bfa:	50 40       	sbci	r21, 0x00	; 0
     bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__mulsf3_pse+0x64>
     bfe:	9e 3f       	cpi	r25, 0xFE	; 254
     c00:	51 05       	cpc	r21, r1
     c02:	80 f0       	brcs	.+32     	; 0xc24 <__mulsf3_pse+0xa0>
     c04:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__fp_inf>
     c08:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_szero>
     c0c:	5f 3f       	cpi	r21, 0xFF	; 255
     c0e:	e4 f3       	brlt	.-8      	; 0xc08 <__mulsf3_pse+0x84>
     c10:	98 3e       	cpi	r25, 0xE8	; 232
     c12:	d4 f3       	brlt	.-12     	; 0xc08 <__mulsf3_pse+0x84>
     c14:	86 95       	lsr	r24
     c16:	77 95       	ror	r23
     c18:	67 95       	ror	r22
     c1a:	b7 95       	ror	r27
     c1c:	f7 95       	ror	r31
     c1e:	e7 95       	ror	r30
     c20:	9f 5f       	subi	r25, 0xFF	; 255
     c22:	c1 f7       	brne	.-16     	; 0xc14 <__mulsf3_pse+0x90>
     c24:	fe 2b       	or	r31, r30
     c26:	88 0f       	add	r24, r24
     c28:	91 1d       	adc	r25, r1
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	97 f9       	bld	r25, 7
     c30:	08 95       	ret

00000c32 <__divmodhi4>:
     c32:	97 fb       	bst	r25, 7
     c34:	07 2e       	mov	r0, r23
     c36:	16 f4       	brtc	.+4      	; 0xc3c <__divmodhi4+0xa>
     c38:	00 94       	com	r0
     c3a:	07 d0       	rcall	.+14     	; 0xc4a <__divmodhi4_neg1>
     c3c:	77 fd       	sbrc	r23, 7
     c3e:	09 d0       	rcall	.+18     	; 0xc52 <__divmodhi4_neg2>
     c40:	0e 94 92 06 	call	0xd24	; 0xd24 <__udivmodhi4>
     c44:	07 fc       	sbrc	r0, 7
     c46:	05 d0       	rcall	.+10     	; 0xc52 <__divmodhi4_neg2>
     c48:	3e f4       	brtc	.+14     	; 0xc58 <__divmodhi4_exit>

00000c4a <__divmodhi4_neg1>:
     c4a:	90 95       	com	r25
     c4c:	81 95       	neg	r24
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	08 95       	ret

00000c52 <__divmodhi4_neg2>:
     c52:	70 95       	com	r23
     c54:	61 95       	neg	r22
     c56:	7f 4f       	sbci	r23, 0xFF	; 255

00000c58 <__divmodhi4_exit>:
     c58:	08 95       	ret

00000c5a <__udivmodsi4>:
     c5a:	a1 e2       	ldi	r26, 0x21	; 33
     c5c:	1a 2e       	mov	r1, r26
     c5e:	aa 1b       	sub	r26, r26
     c60:	bb 1b       	sub	r27, r27
     c62:	fd 01       	movw	r30, r26
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <__udivmodsi4_ep>

00000c66 <__udivmodsi4_loop>:
     c66:	aa 1f       	adc	r26, r26
     c68:	bb 1f       	adc	r27, r27
     c6a:	ee 1f       	adc	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	a2 17       	cp	r26, r18
     c70:	b3 07       	cpc	r27, r19
     c72:	e4 07       	cpc	r30, r20
     c74:	f5 07       	cpc	r31, r21
     c76:	20 f0       	brcs	.+8      	; 0xc80 <__udivmodsi4_ep>
     c78:	a2 1b       	sub	r26, r18
     c7a:	b3 0b       	sbc	r27, r19
     c7c:	e4 0b       	sbc	r30, r20
     c7e:	f5 0b       	sbc	r31, r21

00000c80 <__udivmodsi4_ep>:
     c80:	66 1f       	adc	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	88 1f       	adc	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	1a 94       	dec	r1
     c8a:	69 f7       	brne	.-38     	; 0xc66 <__udivmodsi4_loop>
     c8c:	60 95       	com	r22
     c8e:	70 95       	com	r23
     c90:	80 95       	com	r24
     c92:	90 95       	com	r25
     c94:	9b 01       	movw	r18, r22
     c96:	ac 01       	movw	r20, r24
     c98:	bd 01       	movw	r22, r26
     c9a:	cf 01       	movw	r24, r30
     c9c:	08 95       	ret

00000c9e <__ashldi3>:
     c9e:	0f 93       	push	r16
     ca0:	08 30       	cpi	r16, 0x08	; 8
     ca2:	90 f0       	brcs	.+36     	; 0xcc8 <__ashldi3+0x2a>
     ca4:	98 2f       	mov	r25, r24
     ca6:	87 2f       	mov	r24, r23
     ca8:	76 2f       	mov	r23, r22
     caa:	65 2f       	mov	r22, r21
     cac:	54 2f       	mov	r21, r20
     cae:	43 2f       	mov	r20, r19
     cb0:	32 2f       	mov	r19, r18
     cb2:	22 27       	eor	r18, r18
     cb4:	08 50       	subi	r16, 0x08	; 8
     cb6:	f4 cf       	rjmp	.-24     	; 0xca0 <__ashldi3+0x2>
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	44 1f       	adc	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	66 1f       	adc	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 95       	dec	r16
     cca:	b2 f7       	brpl	.-20     	; 0xcb8 <__ashldi3+0x1a>
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <__ashrdi3>:
     cd0:	97 fb       	bst	r25, 7
     cd2:	10 f8       	bld	r1, 0

00000cd4 <__lshrdi3>:
     cd4:	16 94       	lsr	r1
     cd6:	00 08       	sbc	r0, r0
     cd8:	0f 93       	push	r16
     cda:	08 30       	cpi	r16, 0x08	; 8
     cdc:	98 f0       	brcs	.+38     	; 0xd04 <__lshrdi3+0x30>
     cde:	08 50       	subi	r16, 0x08	; 8
     ce0:	23 2f       	mov	r18, r19
     ce2:	34 2f       	mov	r19, r20
     ce4:	45 2f       	mov	r20, r21
     ce6:	56 2f       	mov	r21, r22
     ce8:	67 2f       	mov	r22, r23
     cea:	78 2f       	mov	r23, r24
     cec:	89 2f       	mov	r24, r25
     cee:	90 2d       	mov	r25, r0
     cf0:	f4 cf       	rjmp	.-24     	; 0xcda <__lshrdi3+0x6>
     cf2:	05 94       	asr	r0
     cf4:	97 95       	ror	r25
     cf6:	87 95       	ror	r24
     cf8:	77 95       	ror	r23
     cfa:	67 95       	ror	r22
     cfc:	57 95       	ror	r21
     cfe:	47 95       	ror	r20
     d00:	37 95       	ror	r19
     d02:	27 95       	ror	r18
     d04:	0a 95       	dec	r16
     d06:	aa f7       	brpl	.-22     	; 0xcf2 <__lshrdi3+0x1e>
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <__cmpdi2_s8>:
     d0c:	00 24       	eor	r0, r0
     d0e:	a7 fd       	sbrc	r26, 7
     d10:	00 94       	com	r0
     d12:	2a 17       	cp	r18, r26
     d14:	30 05       	cpc	r19, r0
     d16:	40 05       	cpc	r20, r0
     d18:	50 05       	cpc	r21, r0
     d1a:	60 05       	cpc	r22, r0
     d1c:	70 05       	cpc	r23, r0
     d1e:	80 05       	cpc	r24, r0
     d20:	90 05       	cpc	r25, r0
     d22:	08 95       	ret

00000d24 <__udivmodhi4>:
     d24:	aa 1b       	sub	r26, r26
     d26:	bb 1b       	sub	r27, r27
     d28:	51 e1       	ldi	r21, 0x11	; 17
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <__udivmodhi4_ep>

00000d2c <__udivmodhi4_loop>:
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	a6 17       	cp	r26, r22
     d32:	b7 07       	cpc	r27, r23
     d34:	10 f0       	brcs	.+4      	; 0xd3a <__udivmodhi4_ep>
     d36:	a6 1b       	sub	r26, r22
     d38:	b7 0b       	sbc	r27, r23

00000d3a <__udivmodhi4_ep>:
     d3a:	88 1f       	adc	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	5a 95       	dec	r21
     d40:	a9 f7       	brne	.-22     	; 0xd2c <__udivmodhi4_loop>
     d42:	80 95       	com	r24
     d44:	90 95       	com	r25
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	08 95       	ret

00000d4c <vsnprintf>:
     d4c:	ae e0       	ldi	r26, 0x0E	; 14
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ec ea       	ldi	r30, 0xAC	; 172
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__prologue_saves__+0x1c>
     d58:	8c 01       	movw	r16, r24
     d5a:	fa 01       	movw	r30, r20
     d5c:	86 e0       	ldi	r24, 0x06	; 6
     d5e:	8c 83       	std	Y+4, r24	; 0x04
     d60:	09 83       	std	Y+1, r16	; 0x01
     d62:	1a 83       	std	Y+2, r17	; 0x02
     d64:	77 ff       	sbrs	r23, 7
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vsnprintf+0x20>
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e8       	ldi	r23, 0x80	; 128
     d6c:	cb 01       	movw	r24, r22
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	a9 01       	movw	r20, r18
     d76:	bf 01       	movw	r22, r30
     d78:	ce 01       	movw	r24, r28
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	0e 94 d2 06 	call	0xda4	; 0xda4 <vfprintf>
     d80:	4d 81       	ldd	r20, Y+5	; 0x05
     d82:	5e 81       	ldd	r21, Y+6	; 0x06
     d84:	57 fd       	sbrc	r21, 7
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <vsnprintf+0x50>
     d88:	2f 81       	ldd	r18, Y+7	; 0x07
     d8a:	38 85       	ldd	r19, Y+8	; 0x08
     d8c:	42 17       	cp	r20, r18
     d8e:	53 07       	cpc	r21, r19
     d90:	0c f4       	brge	.+2      	; 0xd94 <vsnprintf+0x48>
     d92:	9a 01       	movw	r18, r20
     d94:	f8 01       	movw	r30, r16
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	10 82       	st	Z, r1
     d9c:	2e 96       	adiw	r28, 0x0e	; 14
     d9e:	e4 e0       	ldi	r30, 0x04	; 4
     da0:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__epilogue_restores__+0x1c>

00000da4 <vfprintf>:
     da4:	ab e0       	ldi	r26, 0x0B	; 11
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 ed       	ldi	r30, 0xD8	; 216
     daa:	f6 e0       	ldi	r31, 0x06	; 6
     dac:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__prologue_saves__>
     db0:	6c 01       	movw	r12, r24
     db2:	7b 01       	movw	r14, r22
     db4:	8a 01       	movw	r16, r20
     db6:	fc 01       	movw	r30, r24
     db8:	16 82       	std	Z+6, r1	; 0x06
     dba:	17 82       	std	Z+7, r1	; 0x07
     dbc:	83 81       	ldd	r24, Z+3	; 0x03
     dbe:	81 ff       	sbrs	r24, 1
     dc0:	cc c1       	rjmp	.+920    	; 0x115a <vfprintf+0x3b6>
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	3c 01       	movw	r6, r24
     dc8:	f6 01       	movw	r30, r12
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	f7 01       	movw	r30, r14
     dce:	93 fd       	sbrc	r25, 3
     dd0:	85 91       	lpm	r24, Z+
     dd2:	93 ff       	sbrs	r25, 3
     dd4:	81 91       	ld	r24, Z+
     dd6:	7f 01       	movw	r14, r30
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <vfprintf+0x3a>
     ddc:	ba c1       	rjmp	.+884    	; 0x1152 <vfprintf+0x3ae>
     dde:	85 32       	cpi	r24, 0x25	; 37
     de0:	39 f4       	brne	.+14     	; 0xdf0 <vfprintf+0x4c>
     de2:	93 fd       	sbrc	r25, 3
     de4:	85 91       	lpm	r24, Z+
     de6:	93 ff       	sbrs	r25, 3
     de8:	81 91       	ld	r24, Z+
     dea:	7f 01       	movw	r14, r30
     dec:	85 32       	cpi	r24, 0x25	; 37
     dee:	29 f4       	brne	.+10     	; 0xdfa <vfprintf+0x56>
     df0:	b6 01       	movw	r22, r12
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
     df8:	e7 cf       	rjmp	.-50     	; 0xdc8 <vfprintf+0x24>
     dfa:	91 2c       	mov	r9, r1
     dfc:	21 2c       	mov	r2, r1
     dfe:	31 2c       	mov	r3, r1
     e00:	ff e1       	ldi	r31, 0x1F	; 31
     e02:	f3 15       	cp	r31, r3
     e04:	d8 f0       	brcs	.+54     	; 0xe3c <vfprintf+0x98>
     e06:	8b 32       	cpi	r24, 0x2B	; 43
     e08:	79 f0       	breq	.+30     	; 0xe28 <vfprintf+0x84>
     e0a:	38 f4       	brcc	.+14     	; 0xe1a <vfprintf+0x76>
     e0c:	80 32       	cpi	r24, 0x20	; 32
     e0e:	79 f0       	breq	.+30     	; 0xe2e <vfprintf+0x8a>
     e10:	83 32       	cpi	r24, 0x23	; 35
     e12:	a1 f4       	brne	.+40     	; 0xe3c <vfprintf+0x98>
     e14:	23 2d       	mov	r18, r3
     e16:	20 61       	ori	r18, 0x10	; 16
     e18:	1d c0       	rjmp	.+58     	; 0xe54 <vfprintf+0xb0>
     e1a:	8d 32       	cpi	r24, 0x2D	; 45
     e1c:	61 f0       	breq	.+24     	; 0xe36 <vfprintf+0x92>
     e1e:	80 33       	cpi	r24, 0x30	; 48
     e20:	69 f4       	brne	.+26     	; 0xe3c <vfprintf+0x98>
     e22:	23 2d       	mov	r18, r3
     e24:	21 60       	ori	r18, 0x01	; 1
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <vfprintf+0xb0>
     e28:	83 2d       	mov	r24, r3
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	38 2e       	mov	r3, r24
     e2e:	e3 2d       	mov	r30, r3
     e30:	e4 60       	ori	r30, 0x04	; 4
     e32:	3e 2e       	mov	r3, r30
     e34:	2a c0       	rjmp	.+84     	; 0xe8a <vfprintf+0xe6>
     e36:	f3 2d       	mov	r31, r3
     e38:	f8 60       	ori	r31, 0x08	; 8
     e3a:	1d c0       	rjmp	.+58     	; 0xe76 <vfprintf+0xd2>
     e3c:	37 fc       	sbrc	r3, 7
     e3e:	2d c0       	rjmp	.+90     	; 0xe9a <vfprintf+0xf6>
     e40:	20 ed       	ldi	r18, 0xD0	; 208
     e42:	28 0f       	add	r18, r24
     e44:	2a 30       	cpi	r18, 0x0A	; 10
     e46:	40 f0       	brcs	.+16     	; 0xe58 <vfprintf+0xb4>
     e48:	8e 32       	cpi	r24, 0x2E	; 46
     e4a:	b9 f4       	brne	.+46     	; 0xe7a <vfprintf+0xd6>
     e4c:	36 fc       	sbrc	r3, 6
     e4e:	81 c1       	rjmp	.+770    	; 0x1152 <vfprintf+0x3ae>
     e50:	23 2d       	mov	r18, r3
     e52:	20 64       	ori	r18, 0x40	; 64
     e54:	32 2e       	mov	r3, r18
     e56:	19 c0       	rjmp	.+50     	; 0xe8a <vfprintf+0xe6>
     e58:	36 fe       	sbrs	r3, 6
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <vfprintf+0xc4>
     e5c:	8a e0       	ldi	r24, 0x0A	; 10
     e5e:	98 9e       	mul	r9, r24
     e60:	20 0d       	add	r18, r0
     e62:	11 24       	eor	r1, r1
     e64:	92 2e       	mov	r9, r18
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <vfprintf+0xe6>
     e68:	ea e0       	ldi	r30, 0x0A	; 10
     e6a:	2e 9e       	mul	r2, r30
     e6c:	20 0d       	add	r18, r0
     e6e:	11 24       	eor	r1, r1
     e70:	22 2e       	mov	r2, r18
     e72:	f3 2d       	mov	r31, r3
     e74:	f0 62       	ori	r31, 0x20	; 32
     e76:	3f 2e       	mov	r3, r31
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <vfprintf+0xe6>
     e7a:	8c 36       	cpi	r24, 0x6C	; 108
     e7c:	21 f4       	brne	.+8      	; 0xe86 <vfprintf+0xe2>
     e7e:	83 2d       	mov	r24, r3
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	38 2e       	mov	r3, r24
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <vfprintf+0xe6>
     e86:	88 36       	cpi	r24, 0x68	; 104
     e88:	41 f4       	brne	.+16     	; 0xe9a <vfprintf+0xf6>
     e8a:	f7 01       	movw	r30, r14
     e8c:	93 fd       	sbrc	r25, 3
     e8e:	85 91       	lpm	r24, Z+
     e90:	93 ff       	sbrs	r25, 3
     e92:	81 91       	ld	r24, Z+
     e94:	7f 01       	movw	r14, r30
     e96:	81 11       	cpse	r24, r1
     e98:	b3 cf       	rjmp	.-154    	; 0xe00 <vfprintf+0x5c>
     e9a:	98 2f       	mov	r25, r24
     e9c:	9f 7d       	andi	r25, 0xDF	; 223
     e9e:	95 54       	subi	r25, 0x45	; 69
     ea0:	93 30       	cpi	r25, 0x03	; 3
     ea2:	28 f4       	brcc	.+10     	; 0xeae <vfprintf+0x10a>
     ea4:	0c 5f       	subi	r16, 0xFC	; 252
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	9f e3       	ldi	r25, 0x3F	; 63
     eaa:	99 83       	std	Y+1, r25	; 0x01
     eac:	0d c0       	rjmp	.+26     	; 0xec8 <vfprintf+0x124>
     eae:	83 36       	cpi	r24, 0x63	; 99
     eb0:	31 f0       	breq	.+12     	; 0xebe <vfprintf+0x11a>
     eb2:	83 37       	cpi	r24, 0x73	; 115
     eb4:	71 f0       	breq	.+28     	; 0xed2 <vfprintf+0x12e>
     eb6:	83 35       	cpi	r24, 0x53	; 83
     eb8:	09 f0       	breq	.+2      	; 0xebc <vfprintf+0x118>
     eba:	59 c0       	rjmp	.+178    	; 0xf6e <vfprintf+0x1ca>
     ebc:	21 c0       	rjmp	.+66     	; 0xf00 <vfprintf+0x15c>
     ebe:	f8 01       	movw	r30, r16
     ec0:	80 81       	ld	r24, Z
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	0e 5f       	subi	r16, 0xFE	; 254
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	88 24       	eor	r8, r8
     eca:	83 94       	inc	r8
     ecc:	91 2c       	mov	r9, r1
     ece:	53 01       	movw	r10, r6
     ed0:	13 c0       	rjmp	.+38     	; 0xef8 <vfprintf+0x154>
     ed2:	28 01       	movw	r4, r16
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	4f 0e       	add	r4, r31
     ed8:	51 1c       	adc	r5, r1
     eda:	f8 01       	movw	r30, r16
     edc:	a0 80       	ld	r10, Z
     ede:	b1 80       	ldd	r11, Z+1	; 0x01
     ee0:	36 fe       	sbrs	r3, 6
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <vfprintf+0x146>
     ee4:	69 2d       	mov	r22, r9
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x14a>
     eea:	6f ef       	ldi	r22, 0xFF	; 255
     eec:	7f ef       	ldi	r23, 0xFF	; 255
     eee:	c5 01       	movw	r24, r10
     ef0:	0e 94 be 08 	call	0x117c	; 0x117c <strnlen>
     ef4:	4c 01       	movw	r8, r24
     ef6:	82 01       	movw	r16, r4
     ef8:	f3 2d       	mov	r31, r3
     efa:	ff 77       	andi	r31, 0x7F	; 127
     efc:	3f 2e       	mov	r3, r31
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <vfprintf+0x188>
     f00:	28 01       	movw	r4, r16
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	42 0e       	add	r4, r18
     f06:	51 1c       	adc	r5, r1
     f08:	f8 01       	movw	r30, r16
     f0a:	a0 80       	ld	r10, Z
     f0c:	b1 80       	ldd	r11, Z+1	; 0x01
     f0e:	36 fe       	sbrs	r3, 6
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <vfprintf+0x174>
     f12:	69 2d       	mov	r22, r9
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x178>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	c5 01       	movw	r24, r10
     f1e:	0e 94 b3 08 	call	0x1166	; 0x1166 <strnlen_P>
     f22:	4c 01       	movw	r8, r24
     f24:	f3 2d       	mov	r31, r3
     f26:	f0 68       	ori	r31, 0x80	; 128
     f28:	3f 2e       	mov	r3, r31
     f2a:	82 01       	movw	r16, r4
     f2c:	33 fc       	sbrc	r3, 3
     f2e:	1b c0       	rjmp	.+54     	; 0xf66 <vfprintf+0x1c2>
     f30:	82 2d       	mov	r24, r2
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	88 16       	cp	r8, r24
     f36:	99 06       	cpc	r9, r25
     f38:	b0 f4       	brcc	.+44     	; 0xf66 <vfprintf+0x1c2>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
     f44:	2a 94       	dec	r2
     f46:	f4 cf       	rjmp	.-24     	; 0xf30 <vfprintf+0x18c>
     f48:	f5 01       	movw	r30, r10
     f4a:	37 fc       	sbrc	r3, 7
     f4c:	85 91       	lpm	r24, Z+
     f4e:	37 fe       	sbrs	r3, 7
     f50:	81 91       	ld	r24, Z+
     f52:	5f 01       	movw	r10, r30
     f54:	b6 01       	movw	r22, r12
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
     f5c:	21 10       	cpse	r2, r1
     f5e:	2a 94       	dec	r2
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	82 1a       	sub	r8, r18
     f64:	91 08       	sbc	r9, r1
     f66:	81 14       	cp	r8, r1
     f68:	91 04       	cpc	r9, r1
     f6a:	71 f7       	brne	.-36     	; 0xf48 <vfprintf+0x1a4>
     f6c:	e8 c0       	rjmp	.+464    	; 0x113e <vfprintf+0x39a>
     f6e:	84 36       	cpi	r24, 0x64	; 100
     f70:	11 f0       	breq	.+4      	; 0xf76 <vfprintf+0x1d2>
     f72:	89 36       	cpi	r24, 0x69	; 105
     f74:	41 f5       	brne	.+80     	; 0xfc6 <vfprintf+0x222>
     f76:	f8 01       	movw	r30, r16
     f78:	37 fe       	sbrs	r3, 7
     f7a:	07 c0       	rjmp	.+14     	; 0xf8a <vfprintf+0x1e6>
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	0c 5f       	subi	r16, 0xFC	; 252
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <vfprintf+0x1f6>
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	07 2e       	mov	r0, r23
     f90:	00 0c       	add	r0, r0
     f92:	88 0b       	sbc	r24, r24
     f94:	99 0b       	sbc	r25, r25
     f96:	0e 5f       	subi	r16, 0xFE	; 254
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	f3 2d       	mov	r31, r3
     f9c:	ff 76       	andi	r31, 0x6F	; 111
     f9e:	3f 2e       	mov	r3, r31
     fa0:	97 ff       	sbrs	r25, 7
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x212>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	f0 68       	ori	r31, 0x80	; 128
     fb4:	3f 2e       	mov	r3, r31
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	a3 01       	movw	r20, r6
     fbc:	0e 94 05 09 	call	0x120a	; 0x120a <__ultoa_invert>
     fc0:	88 2e       	mov	r8, r24
     fc2:	86 18       	sub	r8, r6
     fc4:	45 c0       	rjmp	.+138    	; 0x1050 <vfprintf+0x2ac>
     fc6:	85 37       	cpi	r24, 0x75	; 117
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <vfprintf+0x232>
     fca:	23 2d       	mov	r18, r3
     fcc:	2f 7e       	andi	r18, 0xEF	; 239
     fce:	b2 2e       	mov	r11, r18
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	25 c0       	rjmp	.+74     	; 0x1020 <vfprintf+0x27c>
     fd6:	93 2d       	mov	r25, r3
     fd8:	99 7f       	andi	r25, 0xF9	; 249
     fda:	b9 2e       	mov	r11, r25
     fdc:	8f 36       	cpi	r24, 0x6F	; 111
     fde:	c1 f0       	breq	.+48     	; 0x1010 <vfprintf+0x26c>
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <vfprintf+0x244>
     fe2:	88 35       	cpi	r24, 0x58	; 88
     fe4:	79 f0       	breq	.+30     	; 0x1004 <vfprintf+0x260>
     fe6:	b5 c0       	rjmp	.+362    	; 0x1152 <vfprintf+0x3ae>
     fe8:	80 37       	cpi	r24, 0x70	; 112
     fea:	19 f0       	breq	.+6      	; 0xff2 <vfprintf+0x24e>
     fec:	88 37       	cpi	r24, 0x78	; 120
     fee:	21 f0       	breq	.+8      	; 0xff8 <vfprintf+0x254>
     ff0:	b0 c0       	rjmp	.+352    	; 0x1152 <vfprintf+0x3ae>
     ff2:	e9 2f       	mov	r30, r25
     ff4:	e0 61       	ori	r30, 0x10	; 16
     ff6:	be 2e       	mov	r11, r30
     ff8:	b4 fe       	sbrs	r11, 4
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <vfprintf+0x272>
     ffc:	fb 2d       	mov	r31, r11
     ffe:	f4 60       	ori	r31, 0x04	; 4
    1000:	bf 2e       	mov	r11, r31
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <vfprintf+0x272>
    1004:	34 fe       	sbrs	r3, 4
    1006:	0a c0       	rjmp	.+20     	; 0x101c <vfprintf+0x278>
    1008:	29 2f       	mov	r18, r25
    100a:	26 60       	ori	r18, 0x06	; 6
    100c:	b2 2e       	mov	r11, r18
    100e:	06 c0       	rjmp	.+12     	; 0x101c <vfprintf+0x278>
    1010:	28 e0       	ldi	r18, 0x08	; 8
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <vfprintf+0x27c>
    1016:	20 e1       	ldi	r18, 0x10	; 16
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x27c>
    101c:	20 e1       	ldi	r18, 0x10	; 16
    101e:	32 e0       	ldi	r19, 0x02	; 2
    1020:	f8 01       	movw	r30, r16
    1022:	b7 fe       	sbrs	r11, 7
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <vfprintf+0x290>
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	0c 5f       	subi	r16, 0xFC	; 252
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <vfprintf+0x29c>
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 5f       	subi	r16, 0xFE	; 254
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	a3 01       	movw	r20, r6
    1042:	0e 94 05 09 	call	0x120a	; 0x120a <__ultoa_invert>
    1046:	88 2e       	mov	r8, r24
    1048:	86 18       	sub	r8, r6
    104a:	fb 2d       	mov	r31, r11
    104c:	ff 77       	andi	r31, 0x7F	; 127
    104e:	3f 2e       	mov	r3, r31
    1050:	36 fe       	sbrs	r3, 6
    1052:	0d c0       	rjmp	.+26     	; 0x106e <vfprintf+0x2ca>
    1054:	23 2d       	mov	r18, r3
    1056:	2e 7f       	andi	r18, 0xFE	; 254
    1058:	a2 2e       	mov	r10, r18
    105a:	89 14       	cp	r8, r9
    105c:	58 f4       	brcc	.+22     	; 0x1074 <vfprintf+0x2d0>
    105e:	34 fe       	sbrs	r3, 4
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <vfprintf+0x2d4>
    1062:	32 fc       	sbrc	r3, 2
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <vfprintf+0x2d4>
    1066:	83 2d       	mov	r24, r3
    1068:	8e 7e       	andi	r24, 0xEE	; 238
    106a:	a8 2e       	mov	r10, r24
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <vfprintf+0x2d4>
    106e:	b8 2c       	mov	r11, r8
    1070:	a3 2c       	mov	r10, r3
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x2d6>
    1074:	b8 2c       	mov	r11, r8
    1076:	01 c0       	rjmp	.+2      	; 0x107a <vfprintf+0x2d6>
    1078:	b9 2c       	mov	r11, r9
    107a:	a4 fe       	sbrs	r10, 4
    107c:	0f c0       	rjmp	.+30     	; 0x109c <vfprintf+0x2f8>
    107e:	fe 01       	movw	r30, r28
    1080:	e8 0d       	add	r30, r8
    1082:	f1 1d       	adc	r31, r1
    1084:	80 81       	ld	r24, Z
    1086:	80 33       	cpi	r24, 0x30	; 48
    1088:	21 f4       	brne	.+8      	; 0x1092 <vfprintf+0x2ee>
    108a:	9a 2d       	mov	r25, r10
    108c:	99 7e       	andi	r25, 0xE9	; 233
    108e:	a9 2e       	mov	r10, r25
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <vfprintf+0x300>
    1092:	a2 fe       	sbrs	r10, 2
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <vfprintf+0x2fe>
    1096:	b3 94       	inc	r11
    1098:	b3 94       	inc	r11
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <vfprintf+0x300>
    109c:	8a 2d       	mov	r24, r10
    109e:	86 78       	andi	r24, 0x86	; 134
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <vfprintf+0x300>
    10a2:	b3 94       	inc	r11
    10a4:	a3 fc       	sbrc	r10, 3
    10a6:	11 c0       	rjmp	.+34     	; 0x10ca <vfprintf+0x326>
    10a8:	a0 fe       	sbrs	r10, 0
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <vfprintf+0x314>
    10ac:	b2 14       	cp	r11, r2
    10ae:	88 f4       	brcc	.+34     	; 0x10d2 <vfprintf+0x32e>
    10b0:	28 0c       	add	r2, r8
    10b2:	92 2c       	mov	r9, r2
    10b4:	9b 18       	sub	r9, r11
    10b6:	0e c0       	rjmp	.+28     	; 0x10d4 <vfprintf+0x330>
    10b8:	b2 14       	cp	r11, r2
    10ba:	60 f4       	brcc	.+24     	; 0x10d4 <vfprintf+0x330>
    10bc:	b6 01       	movw	r22, r12
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    10c6:	b3 94       	inc	r11
    10c8:	f7 cf       	rjmp	.-18     	; 0x10b8 <vfprintf+0x314>
    10ca:	b2 14       	cp	r11, r2
    10cc:	18 f4       	brcc	.+6      	; 0x10d4 <vfprintf+0x330>
    10ce:	2b 18       	sub	r2, r11
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <vfprintf+0x332>
    10d2:	98 2c       	mov	r9, r8
    10d4:	21 2c       	mov	r2, r1
    10d6:	a4 fe       	sbrs	r10, 4
    10d8:	10 c0       	rjmp	.+32     	; 0x10fa <vfprintf+0x356>
    10da:	b6 01       	movw	r22, r12
    10dc:	80 e3       	ldi	r24, 0x30	; 48
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    10e4:	a2 fe       	sbrs	r10, 2
    10e6:	17 c0       	rjmp	.+46     	; 0x1116 <vfprintf+0x372>
    10e8:	a1 fc       	sbrc	r10, 1
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x34e>
    10ec:	88 e7       	ldi	r24, 0x78	; 120
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <vfprintf+0x352>
    10f2:	88 e5       	ldi	r24, 0x58	; 88
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	b6 01       	movw	r22, r12
    10f8:	0c c0       	rjmp	.+24     	; 0x1112 <vfprintf+0x36e>
    10fa:	8a 2d       	mov	r24, r10
    10fc:	86 78       	andi	r24, 0x86	; 134
    10fe:	59 f0       	breq	.+22     	; 0x1116 <vfprintf+0x372>
    1100:	a1 fe       	sbrs	r10, 1
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x364>
    1104:	8b e2       	ldi	r24, 0x2B	; 43
    1106:	01 c0       	rjmp	.+2      	; 0x110a <vfprintf+0x366>
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	a7 fc       	sbrc	r10, 7
    110c:	8d e2       	ldi	r24, 0x2D	; 45
    110e:	b6 01       	movw	r22, r12
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    1116:	89 14       	cp	r8, r9
    1118:	38 f4       	brcc	.+14     	; 0x1128 <vfprintf+0x384>
    111a:	b6 01       	movw	r22, r12
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    1124:	9a 94       	dec	r9
    1126:	f7 cf       	rjmp	.-18     	; 0x1116 <vfprintf+0x372>
    1128:	8a 94       	dec	r8
    112a:	f3 01       	movw	r30, r6
    112c:	e8 0d       	add	r30, r8
    112e:	f1 1d       	adc	r31, r1
    1130:	80 81       	ld	r24, Z
    1132:	b6 01       	movw	r22, r12
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    113a:	81 10       	cpse	r8, r1
    113c:	f5 cf       	rjmp	.-22     	; 0x1128 <vfprintf+0x384>
    113e:	22 20       	and	r2, r2
    1140:	09 f4       	brne	.+2      	; 0x1144 <vfprintf+0x3a0>
    1142:	42 ce       	rjmp	.-892    	; 0xdc8 <vfprintf+0x24>
    1144:	b6 01       	movw	r22, r12
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 c9 08 	call	0x1192	; 0x1192 <fputc>
    114e:	2a 94       	dec	r2
    1150:	f6 cf       	rjmp	.-20     	; 0x113e <vfprintf+0x39a>
    1152:	f6 01       	movw	r30, r12
    1154:	86 81       	ldd	r24, Z+6	; 0x06
    1156:	97 81       	ldd	r25, Z+7	; 0x07
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0x3ba>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	2b 96       	adiw	r28, 0x0b	; 11
    1160:	e2 e1       	ldi	r30, 0x12	; 18
    1162:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__epilogue_restores__>

00001166 <strnlen_P>:
    1166:	fc 01       	movw	r30, r24
    1168:	05 90       	lpm	r0, Z+
    116a:	61 50       	subi	r22, 0x01	; 1
    116c:	70 40       	sbci	r23, 0x00	; 0
    116e:	01 10       	cpse	r0, r1
    1170:	d8 f7       	brcc	.-10     	; 0x1168 <strnlen_P+0x2>
    1172:	80 95       	com	r24
    1174:	90 95       	com	r25
    1176:	8e 0f       	add	r24, r30
    1178:	9f 1f       	adc	r25, r31
    117a:	08 95       	ret

0000117c <strnlen>:
    117c:	fc 01       	movw	r30, r24
    117e:	61 50       	subi	r22, 0x01	; 1
    1180:	70 40       	sbci	r23, 0x00	; 0
    1182:	01 90       	ld	r0, Z+
    1184:	01 10       	cpse	r0, r1
    1186:	d8 f7       	brcc	.-10     	; 0x117e <strnlen+0x2>
    1188:	80 95       	com	r24
    118a:	90 95       	com	r25
    118c:	8e 0f       	add	r24, r30
    118e:	9f 1f       	adc	r25, r31
    1190:	08 95       	ret

00001192 <fputc>:
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	fb 01       	movw	r30, r22
    119c:	23 81       	ldd	r18, Z+3	; 0x03
    119e:	21 fd       	sbrc	r18, 1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <fputc+0x16>
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	2c c0       	rjmp	.+88     	; 0x1200 <fputc+0x6e>
    11a8:	22 ff       	sbrs	r18, 2
    11aa:	16 c0       	rjmp	.+44     	; 0x11d8 <fputc+0x46>
    11ac:	46 81       	ldd	r20, Z+6	; 0x06
    11ae:	57 81       	ldd	r21, Z+7	; 0x07
    11b0:	24 81       	ldd	r18, Z+4	; 0x04
    11b2:	35 81       	ldd	r19, Z+5	; 0x05
    11b4:	42 17       	cp	r20, r18
    11b6:	53 07       	cpc	r21, r19
    11b8:	44 f4       	brge	.+16     	; 0x11ca <fputc+0x38>
    11ba:	a0 81       	ld	r26, Z
    11bc:	b1 81       	ldd	r27, Z+1	; 0x01
    11be:	9d 01       	movw	r18, r26
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	20 83       	st	Z, r18
    11c6:	31 83       	std	Z+1, r19	; 0x01
    11c8:	8c 93       	st	X, r24
    11ca:	26 81       	ldd	r18, Z+6	; 0x06
    11cc:	37 81       	ldd	r19, Z+7	; 0x07
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	26 83       	std	Z+6, r18	; 0x06
    11d4:	37 83       	std	Z+7, r19	; 0x07
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <fputc+0x6e>
    11d8:	8b 01       	movw	r16, r22
    11da:	ec 01       	movw	r28, r24
    11dc:	fb 01       	movw	r30, r22
    11de:	00 84       	ldd	r0, Z+8	; 0x08
    11e0:	f1 85       	ldd	r31, Z+9	; 0x09
    11e2:	e0 2d       	mov	r30, r0
    11e4:	09 95       	icall
    11e6:	89 2b       	or	r24, r25
    11e8:	e1 f6       	brne	.-72     	; 0x11a2 <fputc+0x10>
    11ea:	d8 01       	movw	r26, r16
    11ec:	16 96       	adiw	r26, 0x06	; 6
    11ee:	8d 91       	ld	r24, X+
    11f0:	9c 91       	ld	r25, X
    11f2:	17 97       	sbiw	r26, 0x07	; 7
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	16 96       	adiw	r26, 0x06	; 6
    11f8:	8d 93       	st	X+, r24
    11fa:	9c 93       	st	X, r25
    11fc:	17 97       	sbiw	r26, 0x07	; 7
    11fe:	ce 01       	movw	r24, r28
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <__ultoa_invert>:
    120a:	fa 01       	movw	r30, r20
    120c:	aa 27       	eor	r26, r26
    120e:	28 30       	cpi	r18, 0x08	; 8
    1210:	51 f1       	breq	.+84     	; 0x1266 <__ultoa_invert+0x5c>
    1212:	20 31       	cpi	r18, 0x10	; 16
    1214:	81 f1       	breq	.+96     	; 0x1276 <__ultoa_invert+0x6c>
    1216:	e8 94       	clt
    1218:	6f 93       	push	r22
    121a:	6e 7f       	andi	r22, 0xFE	; 254
    121c:	6e 5f       	subi	r22, 0xFE	; 254
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	af 4f       	sbci	r26, 0xFF	; 255
    1226:	b1 e0       	ldi	r27, 0x01	; 1
    1228:	3e d0       	rcall	.+124    	; 0x12a6 <__ultoa_invert+0x9c>
    122a:	b4 e0       	ldi	r27, 0x04	; 4
    122c:	3c d0       	rcall	.+120    	; 0x12a6 <__ultoa_invert+0x9c>
    122e:	67 0f       	add	r22, r23
    1230:	78 1f       	adc	r23, r24
    1232:	89 1f       	adc	r24, r25
    1234:	9a 1f       	adc	r25, r26
    1236:	a1 1d       	adc	r26, r1
    1238:	68 0f       	add	r22, r24
    123a:	79 1f       	adc	r23, r25
    123c:	8a 1f       	adc	r24, r26
    123e:	91 1d       	adc	r25, r1
    1240:	a1 1d       	adc	r26, r1
    1242:	6a 0f       	add	r22, r26
    1244:	71 1d       	adc	r23, r1
    1246:	81 1d       	adc	r24, r1
    1248:	91 1d       	adc	r25, r1
    124a:	a1 1d       	adc	r26, r1
    124c:	20 d0       	rcall	.+64     	; 0x128e <__ultoa_invert+0x84>
    124e:	09 f4       	brne	.+2      	; 0x1252 <__ultoa_invert+0x48>
    1250:	68 94       	set
    1252:	3f 91       	pop	r19
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	26 9f       	mul	r18, r22
    1258:	11 24       	eor	r1, r1
    125a:	30 19       	sub	r19, r0
    125c:	30 5d       	subi	r19, 0xD0	; 208
    125e:	31 93       	st	Z+, r19
    1260:	de f6       	brtc	.-74     	; 0x1218 <__ultoa_invert+0xe>
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret
    1266:	46 2f       	mov	r20, r22
    1268:	47 70       	andi	r20, 0x07	; 7
    126a:	40 5d       	subi	r20, 0xD0	; 208
    126c:	41 93       	st	Z+, r20
    126e:	b3 e0       	ldi	r27, 0x03	; 3
    1270:	0f d0       	rcall	.+30     	; 0x1290 <__ultoa_invert+0x86>
    1272:	c9 f7       	brne	.-14     	; 0x1266 <__ultoa_invert+0x5c>
    1274:	f6 cf       	rjmp	.-20     	; 0x1262 <__ultoa_invert+0x58>
    1276:	46 2f       	mov	r20, r22
    1278:	4f 70       	andi	r20, 0x0F	; 15
    127a:	40 5d       	subi	r20, 0xD0	; 208
    127c:	4a 33       	cpi	r20, 0x3A	; 58
    127e:	18 f0       	brcs	.+6      	; 0x1286 <__ultoa_invert+0x7c>
    1280:	49 5d       	subi	r20, 0xD9	; 217
    1282:	31 fd       	sbrc	r19, 1
    1284:	40 52       	subi	r20, 0x20	; 32
    1286:	41 93       	st	Z+, r20
    1288:	02 d0       	rcall	.+4      	; 0x128e <__ultoa_invert+0x84>
    128a:	a9 f7       	brne	.-22     	; 0x1276 <__ultoa_invert+0x6c>
    128c:	ea cf       	rjmp	.-44     	; 0x1262 <__ultoa_invert+0x58>
    128e:	b4 e0       	ldi	r27, 0x04	; 4
    1290:	a6 95       	lsr	r26
    1292:	97 95       	ror	r25
    1294:	87 95       	ror	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	ba 95       	dec	r27
    129c:	c9 f7       	brne	.-14     	; 0x1290 <__ultoa_invert+0x86>
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 05       	cpc	r22, r1
    12a2:	71 05       	cpc	r23, r1
    12a4:	08 95       	ret
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	0a 2e       	mov	r0, r26
    12ac:	06 94       	lsr	r0
    12ae:	57 95       	ror	r21
    12b0:	47 95       	ror	r20
    12b2:	37 95       	ror	r19
    12b4:	27 95       	ror	r18
    12b6:	ba 95       	dec	r27
    12b8:	c9 f7       	brne	.-14     	; 0x12ac <__ultoa_invert+0xa2>
    12ba:	62 0f       	add	r22, r18
    12bc:	73 1f       	adc	r23, r19
    12be:	84 1f       	adc	r24, r20
    12c0:	95 1f       	adc	r25, r21
    12c2:	a0 1d       	adc	r26, r0
    12c4:	08 95       	ret

000012c6 <ccp_write_io>:
    12c6:	dc 01       	movw	r26, r24
    12c8:	28 ed       	ldi	r18, 0xD8	; 216
    12ca:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6bfc>
    12ce:	6c 93       	st	X, r22
    12d0:	08 95       	ret

000012d2 <__prologue_saves__>:
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	ca 1b       	sub	r28, r26
    12fc:	db 0b       	sbc	r29, r27
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	09 94       	ijmp

00001304 <__epilogue_restores__>:
    1304:	2a 88       	ldd	r2, Y+18	; 0x12
    1306:	39 88       	ldd	r3, Y+17	; 0x11
    1308:	48 88       	ldd	r4, Y+16	; 0x10
    130a:	5f 84       	ldd	r5, Y+15	; 0x0f
    130c:	6e 84       	ldd	r6, Y+14	; 0x0e
    130e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1310:	8c 84       	ldd	r8, Y+12	; 0x0c
    1312:	9b 84       	ldd	r9, Y+11	; 0x0b
    1314:	aa 84       	ldd	r10, Y+10	; 0x0a
    1316:	b9 84       	ldd	r11, Y+9	; 0x09
    1318:	c8 84       	ldd	r12, Y+8	; 0x08
    131a:	df 80       	ldd	r13, Y+7	; 0x07
    131c:	ee 80       	ldd	r14, Y+6	; 0x06
    131e:	fd 80       	ldd	r15, Y+5	; 0x05
    1320:	0c 81       	ldd	r16, Y+4	; 0x04
    1322:	1b 81       	ldd	r17, Y+3	; 0x03
    1324:	aa 81       	ldd	r26, Y+2	; 0x02
    1326:	b9 81       	ldd	r27, Y+1	; 0x01
    1328:	ce 0f       	add	r28, r30
    132a:	d1 1d       	adc	r29, r1
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	ed 01       	movw	r28, r26
    1332:	08 95       	ret

00001334 <_exit>:
    1334:	f8 94       	cli

00001336 <__stop_program>:
    1336:	ff cf       	rjmp	.-2      	; 0x1336 <__stop_program>
