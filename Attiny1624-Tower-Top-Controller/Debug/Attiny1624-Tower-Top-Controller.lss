
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  000084f4  000004f4  00000588  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000b  00803800  00803800  000005c8  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000638  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e77  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020fc  00000000  00000000  000035cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b0f  00000000  00000000  000056cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001ac  00000000  00000000  000061dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001665  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002a6  00000000  00000000  000079ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00007c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ab 30       	cpi	r26, 0x0B	; 11
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  98:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e6       	ldi	r24, 0x61	; 97
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
  b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f7b6f>
  b8:	80 fd       	sbrc	r24, 0
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <CLOCK_INHF_clock_init+0x14>
  bc:	08 95       	ret

000000be <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
  c2:	8b 01       	movw	r16, r22
  c4:	9c 01       	movw	r18, r24
  c6:	0f 2e       	mov	r0, r31
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	fa 95       	dec	r31
  d4:	d1 f7       	brne	.-12     	; 0xca <crc6_mt6701_lookup+0xc>
  d6:	f0 2d       	mov	r31, r0
  d8:	0f 73       	andi	r16, 0x3F	; 63
  da:	11 27       	eor	r17, r17
  dc:	22 27       	eor	r18, r18
  de:	33 27       	eor	r19, r19
  e0:	f8 01       	movw	r30, r16
  e2:	ec 50       	subi	r30, 0x0C	; 12
  e4:	fb 47       	sbci	r31, 0x7B	; 123
  e6:	40 81       	ld	r20, Z
  e8:	8b 01       	movw	r16, r22
  ea:	9c 01       	movw	r18, r24
  ec:	68 94       	set
  ee:	15 f8       	bld	r1, 5
  f0:	36 95       	lsr	r19
  f2:	27 95       	ror	r18
  f4:	17 95       	ror	r17
  f6:	07 95       	ror	r16
  f8:	16 94       	lsr	r1
  fa:	d1 f7       	brne	.-12     	; 0xf0 <crc6_mt6701_lookup+0x32>
  fc:	0f 73       	andi	r16, 0x3F	; 63
  fe:	11 27       	eor	r17, r17
 100:	22 27       	eor	r18, r18
 102:	33 27       	eor	r19, r19
 104:	04 27       	eor	r16, r20
 106:	f8 01       	movw	r30, r16
 108:	ec 50       	subi	r30, 0x0C	; 12
 10a:	fb 47       	sbci	r31, 0x7B	; 123
 10c:	20 81       	ld	r18, Z
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	99 27       	eor	r25, r25
 116:	aa 27       	eor	r26, r26
 118:	bb 27       	eor	r27, r27
 11a:	82 27       	eor	r24, r18
 11c:	fc 01       	movw	r30, r24
 11e:	ec 50       	subi	r30, 0x0C	; 12
 120:	fb 47       	sbci	r31, 0x7B	; 123
}
 122:	80 81       	ld	r24, Z
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
 12a:	cf 93       	push	r28
 12c:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	a2 81       	ldd	r26, Z+2	; 0x02
 134:	b3 81       	ldd	r27, Z+3	; 0x03
 136:	c8 2f       	mov	r28, r24
 138:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
 13a:	bc 01       	movw	r22, r24
 13c:	cd 01       	movw	r24, r26
 13e:	68 94       	set
 140:	15 f8       	bld	r1, 5
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	77 95       	ror	r23
 148:	67 95       	ror	r22
 14a:	16 94       	lsr	r1
 14c:	d1 f7       	brne	.-12     	; 0x142 <MT6701CRC+0x18>
 14e:	60 83       	st	Z, r22
 150:	71 83       	std	Z+1, r23	; 0x01
 152:	82 83       	std	Z+2, r24	; 0x02
 154:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	c8 13       	cpse	r28, r24
 15e:	01 c0       	rjmp	.+2      	; 0x162 <MT6701CRC+0x38>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	89 2f       	mov	r24, r25
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <GPIO_init>:
 * - PB2 as TX for dummy data sending with pull-up enabled.
 * - PB3 as RX (MISO, MT6701 DO) with pull-up enabled.
 * - PA7 as SS (MT6701 CSN) output, initially set high.
 */
void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
 168:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f80ee>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
 16c:	e0 e2       	ldi	r30, 0x20	; 32
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MAX), PB3 as input (USART0 RX as MISO (MT6701 DO))
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	92 83       	std	Z+2, r25	; 0x02
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
 17c:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f4 e0       	ldi	r31, 0x04	; 4
 182:	92 ec       	ldi	r25, 0xC2	; 194
 184:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
 186:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MIN)
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	82 83       	std	Z+2, r24	; 0x02
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
 18c:	90 ec       	ldi	r25, 0xC0	; 192
 18e:	95 83       	std	Z+5, r25	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
 190:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
 192:	85 8b       	std	Z+21, r24	; 0x15
 194:	08 95       	ret

00000196 <main>:
 * @return int (not used, since the function never exits).
 */
int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
 196:	0e 94 50 00 	call	0xa0	; 0xa0 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
 19e:	0e 94 49 01 	call	0x292	; 0x292 <USART0_init>

    while (1) 
    {
        MT6701_SSI_Angle(); ///< Read MT6701 sensor data
 1a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MT6701_SSI_Angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f e7       	ldi	r18, 0x7F	; 127
 1a8:	8a e1       	ldi	r24, 0x1A	; 26
 1aa:	96 e0       	ldi	r25, 0x06	; 6
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x16>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x20>
 1b6:	00 00       	nop
 1b8:	f4 cf       	rjmp	.-24     	; 0x1a2 <main+0xc>

000001ba <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle() {
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <MT6701_SSI_Angle+0xa>
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <MT6701_SSI_Angle+0xc>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
    uint32_t received_data = 0;
 1ca:	19 82       	std	Y+1, r1	; 0x01
 1cc:	1a 82       	std	Y+2, r1	; 0x02
 1ce:	1b 82       	std	Y+3, r1	; 0x03
 1d0:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = PIN7_bm; ///< Pull CSN low to start communication   
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f7f12>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	22 c0       	rjmp	.+68     	; 0x220 <MT6701_SSI_Angle+0x66>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
 1dc:	8f e6       	ldi	r24, 0x6F	; 111
 1de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
 1e2:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f8310>
 1e6:	86 ff       	sbrs	r24, 6
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <MT6701_SSI_Angle+0x28>
		USART0.STATUS = USART_TXCIF_bm; ///< Clear frame flag before data collection
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f8310>
        received_data <<= 8; ///< Shift previous data left by 8 bits
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	ab 81       	ldd	r26, Y+3	; 0x03
 1f6:	bc 81       	ldd	r27, Y+4	; 0x04
 1f8:	ba 2f       	mov	r27, r26
 1fa:	a9 2f       	mov	r26, r25
 1fc:	98 2f       	mov	r25, r24
 1fe:	88 27       	eor	r24, r24
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	ab 83       	std	Y+3, r26	; 0x03
 206:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
 208:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART0_readChar>
 20c:	49 81       	ldd	r20, Y+1	; 0x01
 20e:	5a 81       	ldd	r21, Y+2	; 0x02
 210:	6b 81       	ldd	r22, Y+3	; 0x03
 212:	7c 81       	ldd	r23, Y+4	; 0x04
 214:	48 2b       	or	r20, r24
 216:	49 83       	std	Y+1, r20	; 0x01
 218:	5a 83       	std	Y+2, r21	; 0x02
 21a:	6b 83       	std	Y+3, r22	; 0x03
 21c:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle() {
    uint32_t received_data = 0;

    PORTA.OUTCLR = PIN7_bm; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
 21e:	1f 5f       	subi	r17, 0xFF	; 255
 220:	13 30       	cpi	r17, 0x03	; 3
 222:	e0 f2       	brcs	.-72     	; 0x1dc <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS = USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = PIN7_bm; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <crc6_table+0x7f7f11>
    
    MT6701.CRCError = MT6701CRC(&received_data); ///< Verify and remove CRC from received data
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	0e 94 95 00 	call	0x12a	; 0x12a <MT6701CRC>
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	18 e3       	ldi	r17, 0x38	; 56
 236:	f8 01       	movw	r30, r16
 238:	87 83       	std	Z+7, r24	; 0x07
    MT6701.MagneticFieldStatus = (received_data & 0xF) & 0x3; ///< Extract magnetic field status
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	ab 81       	ldd	r26, Y+3	; 0x03
 240:	bc 81       	ldd	r27, Y+4	; 0x04
 242:	28 2f       	mov	r18, r24
 244:	23 70       	andi	r18, 0x03	; 3
 246:	24 83       	std	Z+4, r18	; 0x04
    MT6701.PushButtonStatus = (received_data & 0xF) & 0x4; ///< Extract push button status
 248:	28 2f       	mov	r18, r24
 24a:	24 70       	andi	r18, 0x04	; 4
 24c:	25 83       	std	Z+5, r18	; 0x05
    MT6701.TrackStatus = (received_data & 0xF) & 0x8; ///< Extract track status
 24e:	28 2f       	mov	r18, r24
 250:	28 70       	andi	r18, 0x08	; 8
 252:	26 83       	std	Z+6, r18	; 0x06
    MT6701.Angle = (double)(received_data >> 4) / 45.51111111; ///< Compute angle in degrees (received_data >> 4) / 16384 * 360
 254:	bc 01       	movw	r22, r24
 256:	cd 01       	movw	r24, r26
 258:	68 94       	set
 25a:	13 f8       	bld	r1, 3
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	77 95       	ror	r23
 262:	67 95       	ror	r22
 264:	16 94       	lsr	r1
 266:	d1 f7       	brne	.-12     	; 0x25c <MT6701_SSI_Angle+0xa2>
 268:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__floatunsisf>
 26c:	21 e6       	ldi	r18, 0x61	; 97
 26e:	3b e0       	ldi	r19, 0x0B	; 11
 270:	46 e3       	ldi	r20, 0x36	; 54
 272:	52 e4       	ldi	r21, 0x42	; 66
 274:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divsf3>
 278:	f8 01       	movw	r30, r16
 27a:	60 83       	st	Z, r22
 27c:	71 83       	std	Z+1, r23	; 0x01
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	93 83       	std	Z+3, r25	; 0x03
 282:	24 96       	adiw	r28, 0x04	; 4
 284:	cd bf       	out	0x3d, r28	; 61
 286:	de bf       	out	0x3e, r29	; 62
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
 292:	e0 e0       	ldi	r30, 0x00	; 0
 294:	f8 e0       	ldi	r31, 0x08	; 8
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	95 e0       	ldi	r25, 0x05	; 5
 29a:	80 87       	std	Z+8, r24	; 0x08
 29c:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
 2a2:	82 ec       	ldi	r24, 0xC2	; 194
 2a4:	87 83       	std	Z+7, r24	; 0x07
 2a6:	08 95       	ret

000002a8 <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
 2a8:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f8310>
 2ac:	95 ff       	sbrs	r25, 5
 2ae:	fc cf       	rjmp	.-8      	; 0x2a8 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
 2b0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f830e>
 2b4:	08 95       	ret

000002b6 <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
 2b6:	80 e8       	ldi	r24, 0x80	; 128
 2b8:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f8310>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
 2bc:	80 e4       	ldi	r24, 0x40	; 64
 2be:	9c e9       	ldi	r25, 0x9C	; 156
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	a1 09       	sbc	r26, r1
 2ca:	b1 09       	sbc	r27, r1
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <Status+0x2>
            break;
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 2d6:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f8310>
 2da:	22 23       	and	r18, r18
 2dc:	a4 f7       	brge	.-24     	; 0x2c6 <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
 2de:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f830c>
}
 2e2:	08 95       	ret

000002e4 <__divsf3>:
 2e4:	0e 94 86 01 	call	0x30c	; 0x30c <__divsf3x>
 2e8:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_round>
 2ec:	0e 94 31 02 	call	0x462	; 0x462 <__fp_pscB>
 2f0:	58 f0       	brcs	.+22     	; 0x308 <__divsf3+0x24>
 2f2:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_pscA>
 2f6:	40 f0       	brcs	.+16     	; 0x308 <__divsf3+0x24>
 2f8:	29 f4       	brne	.+10     	; 0x304 <__divsf3+0x20>
 2fa:	5f 3f       	cpi	r21, 0xFF	; 255
 2fc:	29 f0       	breq	.+10     	; 0x308 <__divsf3+0x24>
 2fe:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 302:	51 11       	cpse	r21, r1
 304:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 308:	0c 94 27 02 	jmp	0x44e	; 0x44e <__fp_nan>

0000030c <__divsf3x>:
 30c:	0e 94 49 02 	call	0x492	; 0x492 <__fp_split3>
 310:	68 f3       	brcs	.-38     	; 0x2ec <__divsf3+0x8>

00000312 <__divsf3_pse>:
 312:	99 23       	and	r25, r25
 314:	b1 f3       	breq	.-20     	; 0x302 <__divsf3+0x1e>
 316:	55 23       	and	r21, r21
 318:	91 f3       	breq	.-28     	; 0x2fe <__divsf3+0x1a>
 31a:	95 1b       	sub	r25, r21
 31c:	55 0b       	sbc	r21, r21
 31e:	bb 27       	eor	r27, r27
 320:	aa 27       	eor	r26, r26
 322:	62 17       	cp	r22, r18
 324:	73 07       	cpc	r23, r19
 326:	84 07       	cpc	r24, r20
 328:	38 f0       	brcs	.+14     	; 0x338 <__divsf3_pse+0x26>
 32a:	9f 5f       	subi	r25, 0xFF	; 255
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	44 1f       	adc	r20, r20
 334:	aa 1f       	adc	r26, r26
 336:	a9 f3       	breq	.-22     	; 0x322 <__divsf3_pse+0x10>
 338:	35 d0       	rcall	.+106    	; 0x3a4 <__divsf3_pse+0x92>
 33a:	0e 2e       	mov	r0, r30
 33c:	3a f0       	brmi	.+14     	; 0x34c <__divsf3_pse+0x3a>
 33e:	e0 e8       	ldi	r30, 0x80	; 128
 340:	32 d0       	rcall	.+100    	; 0x3a6 <__divsf3_pse+0x94>
 342:	91 50       	subi	r25, 0x01	; 1
 344:	50 40       	sbci	r21, 0x00	; 0
 346:	e6 95       	lsr	r30
 348:	00 1c       	adc	r0, r0
 34a:	ca f7       	brpl	.-14     	; 0x33e <__divsf3_pse+0x2c>
 34c:	2b d0       	rcall	.+86     	; 0x3a4 <__divsf3_pse+0x92>
 34e:	fe 2f       	mov	r31, r30
 350:	29 d0       	rcall	.+82     	; 0x3a4 <__divsf3_pse+0x92>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	bb 1f       	adc	r27, r27
 35a:	26 17       	cp	r18, r22
 35c:	37 07       	cpc	r19, r23
 35e:	48 07       	cpc	r20, r24
 360:	ab 07       	cpc	r26, r27
 362:	b0 e8       	ldi	r27, 0x80	; 128
 364:	09 f0       	breq	.+2      	; 0x368 <__divsf3_pse+0x56>
 366:	bb 0b       	sbc	r27, r27
 368:	80 2d       	mov	r24, r0
 36a:	bf 01       	movw	r22, r30
 36c:	ff 27       	eor	r31, r31
 36e:	93 58       	subi	r25, 0x83	; 131
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	3a f0       	brmi	.+14     	; 0x382 <__divsf3_pse+0x70>
 374:	9e 3f       	cpi	r25, 0xFE	; 254
 376:	51 05       	cpc	r21, r1
 378:	78 f0       	brcs	.+30     	; 0x398 <__divsf3_pse+0x86>
 37a:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 37e:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 382:	5f 3f       	cpi	r21, 0xFF	; 255
 384:	e4 f3       	brlt	.-8      	; 0x37e <__divsf3_pse+0x6c>
 386:	98 3e       	cpi	r25, 0xE8	; 232
 388:	d4 f3       	brlt	.-12     	; 0x37e <__divsf3_pse+0x6c>
 38a:	86 95       	lsr	r24
 38c:	77 95       	ror	r23
 38e:	67 95       	ror	r22
 390:	b7 95       	ror	r27
 392:	f7 95       	ror	r31
 394:	9f 5f       	subi	r25, 0xFF	; 255
 396:	c9 f7       	brne	.-14     	; 0x38a <__divsf3_pse+0x78>
 398:	88 0f       	add	r24, r24
 39a:	91 1d       	adc	r25, r1
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	97 f9       	bld	r25, 7
 3a2:	08 95       	ret
 3a4:	e1 e0       	ldi	r30, 0x01	; 1
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	bb 1f       	adc	r27, r27
 3ae:	62 17       	cp	r22, r18
 3b0:	73 07       	cpc	r23, r19
 3b2:	84 07       	cpc	r24, r20
 3b4:	ba 07       	cpc	r27, r26
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__divsf3_pse+0xae>
 3b8:	62 1b       	sub	r22, r18
 3ba:	73 0b       	sbc	r23, r19
 3bc:	84 0b       	sbc	r24, r20
 3be:	ba 0b       	sbc	r27, r26
 3c0:	ee 1f       	adc	r30, r30
 3c2:	88 f7       	brcc	.-30     	; 0x3a6 <__divsf3_pse+0x94>
 3c4:	e0 95       	com	r30
 3c6:	08 95       	ret

000003c8 <__floatunsisf>:
 3c8:	e8 94       	clt
 3ca:	09 c0       	rjmp	.+18     	; 0x3de <__floatsisf+0x12>

000003cc <__floatsisf>:
 3cc:	97 fb       	bst	r25, 7
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__floatsisf+0x12>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	99 23       	and	r25, r25
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	f9 2f       	mov	r31, r25
 3e4:	96 e9       	ldi	r25, 0x96	; 150
 3e6:	bb 27       	eor	r27, r27
 3e8:	93 95       	inc	r25
 3ea:	f6 95       	lsr	r31
 3ec:	87 95       	ror	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b7 95       	ror	r27
 3f4:	f1 11       	cpse	r31, r1
 3f6:	f8 cf       	rjmp	.-16     	; 0x3e8 <__floatsisf+0x1c>
 3f8:	fa f4       	brpl	.+62     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3fa:	bb 0f       	add	r27, r27
 3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	60 ff       	sbrs	r22, 0
 400:	1b c0       	rjmp	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	16 c0       	rjmp	.+44     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 40c:	88 23       	and	r24, r24
 40e:	11 f0       	breq	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	96 e9       	ldi	r25, 0x96	; 150
 412:	11 c0       	rjmp	.+34     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 414:	77 23       	and	r23, r23
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	9e e8       	ldi	r25, 0x8E	; 142
 41a:	87 2f       	mov	r24, r23
 41c:	76 2f       	mov	r23, r22
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	66 23       	and	r22, r22
 422:	71 f0       	breq	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	96 e8       	ldi	r25, 0x86	; 134
 426:	86 2f       	mov	r24, r22
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	2a f0       	brmi	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42e:	9a 95       	dec	r25
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	da f7       	brpl	.-10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 438:	88 0f       	add	r24, r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__fp_split3>:
 492:	57 fd       	sbrc	r21, 7
 494:	90 58       	subi	r25, 0x80	; 128
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	59 f0       	breq	.+22     	; 0x4b2 <__fp_splitA+0x10>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	71 f0       	breq	.+28     	; 0x4bc <__fp_splitA+0x1a>
 4a0:	47 95       	ror	r20

000004a2 <__fp_splitA>:
 4a2:	88 0f       	add	r24, r24
 4a4:	97 fb       	bst	r25, 7
 4a6:	99 1f       	adc	r25, r25
 4a8:	61 f0       	breq	.+24     	; 0x4c2 <__fp_splitA+0x20>
 4aa:	9f 3f       	cpi	r25, 0xFF	; 255
 4ac:	79 f0       	breq	.+30     	; 0x4cc <__fp_splitA+0x2a>
 4ae:	87 95       	ror	r24
 4b0:	08 95       	ret
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	14 06       	cpc	r1, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	f2 cf       	rjmp	.-28     	; 0x4a0 <__fp_split3+0xe>
 4bc:	46 95       	lsr	r20
 4be:	f1 df       	rcall	.-30     	; 0x4a2 <__fp_splitA>
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__fp_splitA+0x30>
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <__fp_splitA+0xc>
 4cc:	86 95       	lsr	r24
 4ce:	71 05       	cpc	r23, r1
 4d0:	61 05       	cpc	r22, r1
 4d2:	08 94       	sec
 4d4:	08 95       	ret

000004d6 <__fp_zero>:
 4d6:	e8 94       	clt

000004d8 <__fp_szero>:
 4d8:	bb 27       	eor	r27, r27
 4da:	66 27       	eor	r22, r22
 4dc:	77 27       	eor	r23, r23
 4de:	cb 01       	movw	r24, r22
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <ccp_write_io>:
 4e4:	dc 01       	movw	r26, r24
 4e6:	28 ed       	ldi	r18, 0xD8	; 216
 4e8:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f7b40>
 4ec:	6c 93       	st	X, r22
 4ee:	08 95       	ret

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
