
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00001329  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000113a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  0000913a  0000113a  000011ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  00001329  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  000013c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039f6  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023e7  00000000  00000000  00004f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000101d  00000000  00000000  0000731d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002d8  00000000  00000000  0000833c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d5f  00000000  00000000  00008614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007e7  00000000  00000000  0000a373  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000ab5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a3 31       	cpi	r26, 0x13	; 19
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
      98:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 */ 
 #include "Settings.h"
 #include "ADCVar.h"

 void ADC0_init(){
	 ADC0.CTRLA = ADC_ENABLE_bm; //adc enable
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	 ADC0.CTRLB = ADC_PRESC_DIV4_gc; // 20M / 4 = 5MHz ADC clock (MAX adc clock is 6M)
      a8:	81 83       	std	Z+1, r24	; 0x01
	 ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
      aa:	80 ea       	ldi	r24, 0xA0	; 160
      ac:	82 83       	std	Z+2, r24	; 0x02
	 ADC0.CTRLE = 0; //How long to take a one sample (ADC clock cycles) so it will take 0+ 0.5 = half cycle
      ae:	10 86       	std	Z+8, r1	; 0x08
	 ADC0.CTRLF = ADC_SAMPNUM_NONE_gc ; //samples:
      b0:	11 86       	std	Z+9, r1	; 0x09
	 ADC0.COMMAND = ADC_MODE_SINGLE_12BIT_gc; // 1 sample
      b2:	80 e1       	ldi	r24, 0x10	; 16
      b4:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      b6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f73cc>
      ba:	80 fd       	sbrc	r24, 0
      bc:	fc cf       	rjmp	.-8      	; 0xb6 <ADC0_init+0x16>

 }
      be:	08 95       	ret

000000c0 <ADC0_Read>:

 uint16_t ADC0_Read(){
	 ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
      c0:	e0 e0       	ldi	r30, 0x00	; 0
      c2:	f6 e0       	ldi	r31, 0x06	; 6
      c4:	82 85       	ldd	r24, Z+10	; 0x0a
      c6:	81 60       	ori	r24, 0x01	; 1
      c8:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      ca:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f73cc>
      ce:	80 fd       	sbrc	r24, 0
      d0:	fc cf       	rjmp	.-8      	; 0xca <ADC0_Read+0xa>
	 while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm));
      d2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f73cb>
      d6:	81 ff       	sbrs	r24, 1
      d8:	fc cf       	rjmp	.-8      	; 0xd2 <ADC0_Read+0x12>
	 ADC0.INTFLAGS = ADC_SAMPRDY_bm; //clear result ready flag
      da:	e0 e0       	ldi	r30, 0x00	; 0
      dc:	f6 e0       	ldi	r31, 0x06	; 6
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	85 83       	std	Z+5, r24	; 0x05
	 return ADC0.SAMPLE; //return average ADC value of 1024 measurements
      e2:	84 89       	ldd	r24, Z+20	; 0x14
      e4:	95 89       	ldd	r25, Z+21	; 0x15
 }
      e6:	08 95       	ret

000000e8 <ReadSolarCells>:
	else		
		voltageORcurrent->Result = (channel == Voltage) ?  ADC0_Read()*0.25 : ADC0_Read()*0.0625;  // Read ADC value, scale it, and round the result

}*/

void ReadSolarCells(solarrcells_t channel) {
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	00 d0       	rcall	.+0      	; 0xf6 <ReadSolarCells+0xe>
      f6:	00 d0       	rcall	.+0      	; 0xf8 <ReadSolarCells+0x10>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	08 2f       	mov	r16, r24
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
      fe:	85 30       	cpi	r24, 0x05	; 5
     100:	39 f4       	brne	.+14     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
     102:	0f 2e       	mov	r0, r31
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ef 2e       	mov	r14, r31
     108:	f8 e3       	ldi	r31, 0x38	; 56
     10a:	ff 2e       	mov	r15, r31
     10c:	f0 2d       	mov	r31, r0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
     110:	0f 2e       	mov	r0, r31
     112:	f2 e0       	ldi	r31, 0x02	; 2
     114:	ef 2e       	mov	r14, r31
     116:	f8 e3       	ldi	r31, 0x38	; 56
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
	ADC0.MUXPOS = channel;
     11c:	00 93 0c 06 	sts	0x060C, r16	; 0x80060c <crc6_table+0x7f73d2>

	// Vref pasirinkimo seka (atitinka 1.024V, 2.048V, 4.096V, Vdd (5V))
	const uint8_t vref_options[4] = {ADC_REFSEL_1024MV_gc, ADC_REFSEL_2048MV_gc, ADC_REFSEL_4096MV_gc, ADC_REFSEL_VDD_gc};
     120:	84 e0       	ldi	r24, 0x04	; 4
     122:	89 83       	std	Y+1, r24	; 0x01
     124:	85 e0       	ldi	r24, 0x05	; 5
     126:	8a 83       	std	Y+2, r24	; 0x02
     128:	87 e0       	ldi	r24, 0x07	; 7
     12a:	8b 83       	std	Y+3, r24	; 0x03
     12c:	1c 82       	std	Y+4, r1	; 0x04
	
	uint8_t vref_index = 0;
     12e:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t adcValue;

	// Pasirenkame optimalø Vref
	do {
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | vref_options[vref_index];
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b6 e0       	ldi	r27, 0x06	; 6
     134:	12 96       	adiw	r26, 0x02	; 2
     136:	8c 91       	ld	r24, X
     138:	12 97       	sbiw	r26, 0x02	; 2
     13a:	e1 e0       	ldi	r30, 0x01	; 1
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	ec 0f       	add	r30, r28
     140:	fd 1f       	adc	r31, r29
     142:	e1 0f       	add	r30, r17
     144:	f1 1d       	adc	r31, r1
     146:	90 81       	ld	r25, Z
     148:	88 7f       	andi	r24, 0xF8	; 248
     14a:	89 2b       	or	r24, r25
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	8c 93       	st	X, r24
		adcValue = ADC0_Read();
     150:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
	} while (adcValue >= 0xFF0 && ++vref_index < 4);
     154:	80 3f       	cpi	r24, 0xF0	; 240
     156:	2f e0       	ldi	r18, 0x0F	; 15
     158:	92 07       	cpc	r25, r18
     15a:	18 f0       	brcs	.+6      	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     15c:	1f 5f       	subi	r17, 0xFF	; 255
     15e:	14 30       	cpi	r17, 0x04	; 4
     160:	38 f3       	brcs	.-50     	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>

	// Srovës skaièiavimas
	if (channel == Current) {
     162:	04 30       	cpi	r16, 0x04	; 4
     164:	f1 f4       	brne	.+60     	; 0x1a2 <__EEPROM_REGION_LENGTH__+0xa2>
		voltageORcurrent->Result = (vref_index < 3) ? (adcValue >> (4 - vref_index)) : ((double)adcValue / 3.2768);
     166:	13 30       	cpi	r17, 0x03	; 3
     168:	58 f4       	brcc	.+22     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
     16a:	24 e0       	ldi	r18, 0x04	; 4
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	21 1b       	sub	r18, r17
     170:	31 09       	sbc	r19, r1
     172:	bc 01       	movw	r22, r24
     174:	02 c0       	rjmp	.+4      	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
     176:	76 95       	lsr	r23
     178:	67 95       	ror	r22
     17a:	2a 95       	dec	r18
     17c:	e2 f7       	brpl	.-8      	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
     17e:	0d c0       	rjmp	.+26     	; 0x19a <__EEPROM_REGION_LENGTH__+0x9a>
     180:	bc 01       	movw	r22, r24
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__floatunsisf>
     18a:	27 e1       	ldi	r18, 0x17	; 23
     18c:	37 eb       	ldi	r19, 0xB7	; 183
     18e:	41 e5       	ldi	r20, 0x51	; 81
     190:	50 e4       	ldi	r21, 0x40	; 64
     192:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     196:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
     19a:	f7 01       	movw	r30, r14
     19c:	60 83       	st	Z, r22
     19e:	71 83       	std	Z+1, r23	; 0x01
     1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
	}
	// Átampos skaièiavimas
	else if (vref_index < 3) {
     1a2:	13 30       	cpi	r17, 0x03	; 3
     1a4:	68 f4       	brcc	.+26     	; 0x1c0 <__EEPROM_REGION_LENGTH__+0xc0>
		voltageORcurrent->Result = adcValue >> (2 - vref_index); // 1.024V ? /4, 2.048V ? /2, 4.096V ? /1
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	21 1b       	sub	r18, r17
     1ac:	31 09       	sbc	r19, r1
     1ae:	bc 01       	movw	r22, r24
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__EEPROM_REGION_LENGTH__+0xb6>
     1b2:	76 95       	lsr	r23
     1b4:	67 95       	ror	r22
     1b6:	2a 95       	dec	r18
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <__EEPROM_REGION_LENGTH__+0xb2>
     1ba:	f7 01       	movw	r30, r14
     1bc:	60 83       	st	Z, r22
     1be:	71 83       	std	Z+1, r23	; 0x01
	}
}
     1c0:	24 96       	adiw	r28, 0x04	; 4
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	80 e6       	ldi	r24, 0x60	; 96
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	81 e6       	ldi	r24, 0x61	; 97
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
     1e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6e29>
     1ec:	80 fd       	sbrc	r24, 0
     1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <CLOCK_INHF_clock_init+0x14>
     1f0:	08 95       	ret

000001f2 <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     1f6:	8b 01       	movw	r16, r22
     1f8:	9c 01       	movw	r18, r24
     1fa:	0f 2e       	mov	r0, r31
     1fc:	fc e0       	ldi	r31, 0x0C	; 12
     1fe:	36 95       	lsr	r19
     200:	27 95       	ror	r18
     202:	17 95       	ror	r17
     204:	07 95       	ror	r16
     206:	fa 95       	dec	r31
     208:	d1 f7       	brne	.-12     	; 0x1fe <crc6_mt6701_lookup+0xc>
     20a:	f0 2d       	mov	r31, r0
     20c:	0f 73       	andi	r16, 0x3F	; 63
     20e:	11 27       	eor	r17, r17
     210:	22 27       	eor	r18, r18
     212:	33 27       	eor	r19, r19
     214:	f8 01       	movw	r30, r16
     216:	e6 5c       	subi	r30, 0xC6	; 198
     218:	fd 46       	sbci	r31, 0x6D	; 109
     21a:	40 81       	ld	r20, Z
     21c:	8b 01       	movw	r16, r22
     21e:	9c 01       	movw	r18, r24
     220:	68 94       	set
     222:	15 f8       	bld	r1, 5
     224:	36 95       	lsr	r19
     226:	27 95       	ror	r18
     228:	17 95       	ror	r17
     22a:	07 95       	ror	r16
     22c:	16 94       	lsr	r1
     22e:	d1 f7       	brne	.-12     	; 0x224 <crc6_mt6701_lookup+0x32>
     230:	0f 73       	andi	r16, 0x3F	; 63
     232:	11 27       	eor	r17, r17
     234:	22 27       	eor	r18, r18
     236:	33 27       	eor	r19, r19
     238:	04 27       	eor	r16, r20
     23a:	f8 01       	movw	r30, r16
     23c:	e6 5c       	subi	r30, 0xC6	; 198
     23e:	fd 46       	sbci	r31, 0x6D	; 109
     240:	20 81       	ld	r18, Z
     242:	dc 01       	movw	r26, r24
     244:	cb 01       	movw	r24, r22
     246:	8f 73       	andi	r24, 0x3F	; 63
     248:	99 27       	eor	r25, r25
     24a:	aa 27       	eor	r26, r26
     24c:	bb 27       	eor	r27, r27
     24e:	82 27       	eor	r24, r18
     250:	fc 01       	movw	r30, r24
     252:	e6 5c       	subi	r30, 0xC6	; 198
     254:	fd 46       	sbci	r31, 0x6D	; 109
}
     256:	80 81       	ld	r24, Z
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     25e:	cf 93       	push	r28
     260:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     262:	80 81       	ld	r24, Z
     264:	91 81       	ldd	r25, Z+1	; 0x01
     266:	a2 81       	ldd	r26, Z+2	; 0x02
     268:	b3 81       	ldd	r27, Z+3	; 0x03
     26a:	c8 2f       	mov	r28, r24
     26c:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	68 94       	set
     274:	15 f8       	bld	r1, 5
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	77 95       	ror	r23
     27c:	67 95       	ror	r22
     27e:	16 94       	lsr	r1
     280:	d1 f7       	brne	.-12     	; 0x276 <MT6701CRC+0x18>
     282:	60 83       	st	Z, r22
     284:	71 83       	std	Z+1, r23	; 0x01
     286:	82 83       	std	Z+2, r24	; 0x02
     288:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     28a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	c8 13       	cpse	r28, r24
     292:	01 c0       	rjmp	.+2      	; 0x296 <MT6701CRC+0x38>
     294:	90 e0       	ldi	r25, 0x00	; 0
}
     296:	89 2f       	mov	r24, r25
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     29c:	2f 92       	push	r2
     29e:	3f 92       	push	r3
     2a0:	4f 92       	push	r4
     2a2:	5f 92       	push	r5
     2a4:	6f 92       	push	r6
     2a6:	7f 92       	push	r7
     2a8:	8f 92       	push	r8
     2aa:	9f 92       	push	r9
     2ac:	af 92       	push	r10
     2ae:	bf 92       	push	r11
     2b0:	cf 92       	push	r12
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	2b 97       	sbiw	r28, 0x0b	; 11
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	c2 2e       	mov	r12, r18
     2cc:	b3 2e       	mov	r11, r19
     2ce:	a4 2e       	mov	r10, r20
     2d0:	95 2e       	mov	r9, r21
     2d2:	86 2e       	mov	r8, r22
     2d4:	77 2e       	mov	r7, r23
     2d6:	68 2e       	mov	r6, r24
     2d8:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2da:	f2 2e       	mov	r15, r18
     2dc:	03 2f       	mov	r16, r19
     2de:	14 2f       	mov	r17, r20
     2e0:	5a 87       	std	Y+10, r21	; 0x0a
     2e2:	69 83       	std	Y+1, r22	; 0x01
     2e4:	b7 2f       	mov	r27, r23
     2e6:	d8 2e       	mov	r13, r24
     2e8:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     2ea:	e0 e0       	ldi	r30, 0x00	; 0
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     2ee:	14 c0       	rjmp	.+40     	; 0x318 <crc8_cdma2000+0x7c>
        length++;
     2f0:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     2f2:	2f 2d       	mov	r18, r15
     2f4:	30 2f       	mov	r19, r16
     2f6:	41 2f       	mov	r20, r17
     2f8:	5a 85       	ldd	r21, Y+10	; 0x0a
     2fa:	69 81       	ldd	r22, Y+1	; 0x01
     2fc:	7b 2f       	mov	r23, r27
     2fe:	8d 2d       	mov	r24, r13
     300:	9e 2d       	mov	r25, r14
     302:	08 e0       	ldi	r16, 0x08	; 8
     304:	0e 94 7f 05 	call	0xafe	; 0xafe <__lshrdi3>
     308:	f2 2e       	mov	r15, r18
     30a:	03 2f       	mov	r16, r19
     30c:	14 2f       	mov	r17, r20
     30e:	5a 87       	std	Y+10, r21	; 0x0a
     310:	69 83       	std	Y+1, r22	; 0x01
     312:	b7 2f       	mov	r27, r23
     314:	d8 2e       	mov	r13, r24
     316:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     318:	2f 2d       	mov	r18, r15
     31a:	30 2f       	mov	r19, r16
     31c:	41 2f       	mov	r20, r17
     31e:	5a 85       	ldd	r21, Y+10	; 0x0a
     320:	69 81       	ldd	r22, Y+1	; 0x01
     322:	7b 2f       	mov	r23, r27
     324:	8d 2d       	mov	r24, r13
     326:	9e 2d       	mov	r25, r14
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	0e 94 9b 05 	call	0xb36	; 0xb36 <__cmpdi2_s8>
     32e:	01 f7       	brne	.-64     	; 0x2f0 <crc8_cdma2000+0x54>
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	8a 87       	std	Y+10, r24	; 0x0a
     334:	cb 86       	std	Y+11, r12	; 0x0b
     336:	b9 82       	std	Y+1, r11	; 0x01
     338:	4a 2c       	mov	r4, r10
     33a:	39 2c       	mov	r3, r9
     33c:	28 2c       	mov	r2, r8
     33e:	1a c0       	rjmp	.+52     	; 0x374 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     340:	8d 01       	movw	r16, r26
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	00 0f       	add	r16, r16
     348:	11 1f       	adc	r17, r17
     34a:	00 0f       	add	r16, r16
     34c:	11 1f       	adc	r17, r17
     34e:	2b 85       	ldd	r18, Y+11	; 0x0b
     350:	39 81       	ldd	r19, Y+1	; 0x01
     352:	44 2d       	mov	r20, r4
     354:	53 2d       	mov	r21, r3
     356:	62 2d       	mov	r22, r2
     358:	77 2d       	mov	r23, r7
     35a:	86 2d       	mov	r24, r6
     35c:	95 2d       	mov	r25, r5
     35e:	0e 94 7f 05 	call	0xafe	; 0xafe <__lshrdi3>
     362:	8a 84       	ldd	r8, Y+10	; 0x0a
     364:	82 26       	eor	r8, r18
     366:	91 2c       	mov	r9, r1
     368:	f4 01       	movw	r30, r8
     36a:	e6 5c       	subi	r30, 0xC6	; 198
     36c:	fe 46       	sbci	r31, 0x6E	; 110
     36e:	80 81       	ld	r24, Z
     370:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     372:	fd 01       	movw	r30, r26
     374:	df 01       	movw	r26, r30
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	ef 2b       	or	r30, r31
     37a:	11 f7       	brne	.-60     	; 0x340 <crc8_cdma2000+0xa4>
     37c:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     37e:	2b 96       	adiw	r28, 0x0b	; 11
     380:	cd bf       	out	0x3d, r28	; 61
     382:	de bf       	out	0x3e, r29	; 62
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	9f 90       	pop	r9
     39a:	8f 90       	pop	r8
     39c:	7f 90       	pop	r7
     39e:	6f 90       	pop	r6
     3a0:	5f 90       	pop	r5
     3a2:	4f 90       	pop	r4
     3a4:	3f 90       	pop	r3
     3a6:	2f 90       	pop	r2
     3a8:	08 95       	ret

000003aa <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     3aa:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f73a8>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     3ae:	e0 e2       	ldi	r30, 0x20	; 32
     3b0:	f4 e0       	ldi	r31, 0x04	; 4
     3b2:	86 e0       	ldi	r24, 0x06	; 6
     3b4:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
     3ba:	99 e0       	ldi	r25, 0x09	; 9
     3bc:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
     3be:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     3c0:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     3c2:	e0 e0       	ldi	r30, 0x00	; 0
     3c4:	f4 e0       	ldi	r31, 0x04	; 4
     3c6:	92 ec       	ldi	r25, 0xC2	; 194
     3c8:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
     3ca:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     3d0:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     3d2:	80 ec       	ldi	r24, 0xC0	; 192
     3d4:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
     3d6:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
     3d8:	95 8b       	std	Z+21, r25	; 0x15
     3da:	08 95       	ret

000003dc <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
     3dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
     3e0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     3e4:	0e 94 43 03 	call	0x686	; 0x686 <USART0_init>
	USART1_init();
     3e8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <USART1_init>
	ADC0_init();
     3ec:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     3f0:	80 e8       	ldi	r24, 0x80	; 128
     3f2:	0e 94 b6 02 	call	0x56c	; 0x56c <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     3f6:	80 e4       	ldi	r24, 0x40	; 64
     3f8:	0e 94 b6 02 	call	0x56c	; 0x56c <MT6701_SSI_Angle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fc:	8f e4       	ldi	r24, 0x4F	; 79
     3fe:	93 ec       	ldi	r25, 0xC3	; 195
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     406:	00 00       	nop
		_delay_ms(10);
		ReadSolarCells(Voltage);
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	0e 94 74 00 	call	0xe8	; 0xe8 <ReadSolarCells>
     40e:	af e4       	ldi	r26, 0x4F	; 79
     410:	b3 ec       	ldi	r27, 0xC3	; 195
     412:	11 97       	sbiw	r26, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     418:	00 00       	nop
		_delay_ms(10);
		ReadSolarCells(Current);
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	0e 94 74 00 	call	0xe8	; 0xe8 <ReadSolarCells>
		uint8_t y = YEndSwitches();
     420:	0e 94 ba 03 	call	0x774	; 0x774 <YEndSwitches>
     424:	d8 2e       	mov	r13, r24
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y;
     426:	ca e0       	ldi	r28, 0x0A	; 10
     428:	d8 e3       	ldi	r29, 0x38	; 56
     42a:	48 81       	ld	r20, Y
     42c:	59 81       	ldd	r21, Y+1	; 0x01
     42e:	24 2f       	mov	r18, r20
     430:	35 2f       	mov	r19, r21
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0c e2       	ldi	r16, 0x2C	; 44
     440:	0e 94 64 05 	call	0xac8	; 0xac8 <__ashldi3>
     444:	e2 2f       	mov	r30, r18
     446:	93 2e       	mov	r9, r19
     448:	c4 2e       	mov	r12, r20
     44a:	f5 2f       	mov	r31, r21
     44c:	a6 2e       	mov	r10, r22
     44e:	17 2f       	mov	r17, r23
     450:	78 2e       	mov	r7, r24
     452:	89 2e       	mov	r8, r25
     454:	0f 2e       	mov	r0, r31
     456:	f4 e0       	ldi	r31, 0x04	; 4
     458:	ef 2e       	mov	r14, r31
     45a:	f8 e3       	ldi	r31, 0x38	; 56
     45c:	ff 2e       	mov	r15, r31
     45e:	f0 2d       	mov	r31, r0
     460:	d7 01       	movw	r26, r14
     462:	4d 91       	ld	r20, X+
     464:	5c 91       	ld	r21, X
     466:	24 2f       	mov	r18, r20
     468:	35 2f       	mov	r19, r21
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c e1       	ldi	r16, 0x1C	; 28
     478:	0e 94 64 05 	call	0xac8	; 0xac8 <__ashldi3>
     47c:	e2 2b       	or	r30, r18
     47e:	29 2c       	mov	r2, r9
     480:	23 2a       	or	r2, r19
     482:	c4 2a       	or	r12, r20
     484:	f5 2b       	or	r31, r21
     486:	3a 2c       	mov	r3, r10
     488:	36 2a       	or	r3, r22
     48a:	17 2b       	or	r17, r23
     48c:	b7 2d       	mov	r27, r7
     48e:	b8 2b       	or	r27, r24
     490:	a8 2d       	mov	r26, r8
     492:	a9 2b       	or	r26, r25
     494:	40 90 00 38 	lds	r4, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     498:	50 90 01 38 	lds	r5, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     49c:	24 2d       	mov	r18, r4
     49e:	35 2d       	mov	r19, r5
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	00 e1       	ldi	r16, 0x10	; 16
     4ae:	0e 94 64 05 	call	0xac8	; 0xac8 <__ashldi3>
     4b2:	e2 2b       	or	r30, r18
     4b4:	92 2c       	mov	r9, r2
     4b6:	93 2a       	or	r9, r19
     4b8:	c4 2a       	or	r12, r20
     4ba:	f5 2b       	or	r31, r21
     4bc:	a3 2c       	mov	r10, r3
     4be:	a6 2a       	or	r10, r22
     4c0:	b1 2e       	mov	r11, r17
     4c2:	b7 2a       	or	r11, r23
     4c4:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <ReadCurrent>
     4c8:	10 91 03 38 	lds	r17, 0x3803	; 0x803803 <ReadCurrent+0x1>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	00 0f       	add	r16, r16
     4d2:	11 1f       	adc	r17, r17
     4d4:	22 1f       	adc	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	00 0f       	add	r16, r16
     4da:	11 1f       	adc	r17, r17
     4dc:	22 1f       	adc	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	00 0f       	add	r16, r16
     4e2:	11 1f       	adc	r17, r17
     4e4:	22 1f       	adc	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	00 0f       	add	r16, r16
     4ea:	11 1f       	adc	r17, r17
     4ec:	22 1f       	adc	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	e0 2b       	or	r30, r16
     4f2:	91 2a       	or	r9, r17
     4f4:	c2 2a       	or	r12, r18
     4f6:	53 2f       	mov	r21, r19
     4f8:	5f 2b       	or	r21, r31
     4fa:	2e 2f       	mov	r18, r30
     4fc:	2d 29       	or	r18, r13
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
		        (uint8_t)y,            ///< End switch status (1 digit)
		        (uint8_t)crc8_cdma2000(combined)); ///< CRC value (1 byte)
     4fe:	39 2d       	mov	r19, r9
     500:	4c 2d       	mov	r20, r12
     502:	6a 2d       	mov	r22, r10
     504:	7b 2d       	mov	r23, r11
     506:	8b 2b       	or	r24, r27
     508:	9a 2b       	or	r25, r26
     50a:	0e 94 4e 01 	call	0x29c	; 0x29c <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     50e:	70 91 02 38 	lds	r23, 0x3802	; 0x803802 <ReadCurrent>
     512:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <ReadCurrent+0x1>

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     516:	50 91 00 38 	lds	r21, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     51a:	60 91 01 38 	lds	r22, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     51e:	d7 01       	movw	r26, r14
     520:	3c 91       	ld	r19, X
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	4c 91       	ld	r20, X



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     526:	98 81       	ld	r25, Y
     528:	29 81       	ldd	r18, Y+1	; 0x01
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y;



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     52a:	1f 92       	push	r1
     52c:	8f 93       	push	r24
     52e:	1f 92       	push	r1
     530:	df 92       	push	r13
     532:	ef 93       	push	r30
     534:	7f 93       	push	r23
     536:	6f 93       	push	r22
     538:	5f 93       	push	r21
     53a:	4f 93       	push	r20
     53c:	3f 93       	push	r19
     53e:	2f 93       	push	r18
     540:	9f 93       	push	r25
     542:	8a e7       	ldi	r24, 0x7A	; 122
     544:	92 e9       	ldi	r25, 0x92	; 146
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 9c 03 	call	0x738	; 0x738 <USART1_printf>
     54e:	bf e7       	ldi	r27, 0x7F	; 127
     550:	2a e1       	ldi	r18, 0x1A	; 26
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	b1 50       	subi	r27, 0x01	; 1
     556:	20 40       	sbci	r18, 0x00	; 0
     558:	80 40       	sbci	r24, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55e:	00 00       	nop
     560:	ad b7       	in	r26, 0x3d	; 61
     562:	be b7       	in	r27, 0x3e	; 62
     564:	1e 96       	adiw	r26, 0x0e	; 14
     566:	ad bf       	out	0x3d, r26	; 61
     568:	be bf       	out	0x3e, r27	; 62
     56a:	42 cf       	rjmp	.-380    	; 0x3f0 <main+0x14>

0000056c <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <MT6701_SSI_Angle+0xa>
     576:	00 d0       	rcall	.+0      	; 0x578 <MT6701_SSI_Angle+0xc>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     57e:	19 82       	std	Y+1, r1	; 0x01
     580:	1a 82       	std	Y+2, r1	; 0x02
     582:	1b 82       	std	Y+3, r1	; 0x03
     584:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     586:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f71cc>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	24 c0       	rjmp	.+72     	; 0x5d6 <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     58e:	8f e6       	ldi	r24, 0x6F	; 111
     590:	0e 94 4e 03 	call	0x69c	; 0x69c <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     594:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f75ca>
     598:	86 ff       	sbrs	r24, 6
     59a:	fc cf       	rjmp	.-8      	; 0x594 <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     59c:	e0 e0       	ldi	r30, 0x00	; 0
     59e:	f8 e0       	ldi	r31, 0x08	; 8
     5a0:	84 81       	ldd	r24, Z+4	; 0x04
     5a2:	80 64       	ori	r24, 0x40	; 64
     5a4:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	ab 81       	ldd	r26, Y+3	; 0x03
     5ac:	bc 81       	ldd	r27, Y+4	; 0x04
     5ae:	ba 2f       	mov	r27, r26
     5b0:	a9 2f       	mov	r26, r25
     5b2:	98 2f       	mov	r25, r24
     5b4:	88 27       	eor	r24, r24
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	9a 83       	std	Y+2, r25	; 0x02
     5ba:	ab 83       	std	Y+3, r26	; 0x03
     5bc:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     5be:	0e 94 55 03 	call	0x6aa	; 0x6aa <USART0_readChar>
     5c2:	49 81       	ldd	r20, Y+1	; 0x01
     5c4:	5a 81       	ldd	r21, Y+2	; 0x02
     5c6:	6b 81       	ldd	r22, Y+3	; 0x03
     5c8:	7c 81       	ldd	r23, Y+4	; 0x04
     5ca:	48 2b       	or	r20, r24
     5cc:	49 83       	std	Y+1, r20	; 0x01
     5ce:	5a 83       	std	Y+2, r21	; 0x02
     5d0:	6b 83       	std	Y+3, r22	; 0x03
     5d2:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     5d4:	1f 5f       	subi	r17, 0xFF	; 255
     5d6:	13 30       	cpi	r17, 0x03	; 3
     5d8:	d0 f2       	brcs	.-76     	; 0x58e <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     5da:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f71cb>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     5de:	00 38       	cpi	r16, 0x80	; 128
     5e0:	19 f4       	brne	.+6      	; 0x5e8 <MT6701_SSI_Angle+0x7c>
     5e2:	0a e0       	ldi	r16, 0x0A	; 10
     5e4:	18 e3       	ldi	r17, 0x38	; 56
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <MT6701_SSI_Angle+0x80>
     5e8:	04 e0       	ldi	r16, 0x04	; 4
     5ea:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 2f 01 	call	0x25e	; 0x25e <MT6701CRC>
     5f4:	f8 01       	movw	r30, r16
     5f6:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	83 70       	andi	r24, 0x03	; 3
     5fc:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	ab 81       	ldd	r26, Y+3	; 0x03
     604:	bc 81       	ldd	r27, Y+4	; 0x04
     606:	b6 95       	lsr	r27
     608:	a7 95       	ror	r26
     60a:	97 95       	ror	r25
     60c:	87 95       	ror	r24
     60e:	b6 95       	lsr	r27
     610:	a7 95       	ror	r26
     612:	97 95       	ror	r25
     614:	87 95       	ror	r24
     616:	81 70       	andi	r24, 0x01	; 1
     618:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	ab 81       	ldd	r26, Y+3	; 0x03
     620:	bc 81       	ldd	r27, Y+4	; 0x04
     622:	ac 01       	movw	r20, r24
     624:	bd 01       	movw	r22, r26
     626:	68 94       	set
     628:	12 f8       	bld	r1, 2
     62a:	76 95       	lsr	r23
     62c:	67 95       	ror	r22
     62e:	57 95       	ror	r21
     630:	47 95       	ror	r20
     632:	16 94       	lsr	r1
     634:	d1 f7       	brne	.-12     	; 0x62a <MT6701_SSI_Angle+0xbe>
     636:	24 2f       	mov	r18, r20
     638:	21 70       	andi	r18, 0x01	; 1
     63a:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	68 94       	set
     642:	13 f8       	bld	r1, 3
     644:	96 95       	lsr	r25
     646:	87 95       	ror	r24
     648:	77 95       	ror	r23
     64a:	67 95       	ror	r22
     64c:	16 94       	lsr	r1
     64e:	d1 f7       	brne	.-12     	; 0x644 <MT6701_SSI_Angle+0xd8>
     650:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__floatunsisf>
     654:	23 e5       	ldi	r18, 0x53	; 83
     656:	34 e0       	ldi	r19, 0x04	; 4
     658:	49 ee       	ldi	r20, 0xE9	; 233
     65a:	5e e3       	ldi	r21, 0x3E	; 62
     65c:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 c9 03 	call	0x792	; 0x792 <__addsf3>
     66c:	0e 94 a7 04 	call	0x94e	; 0x94e <__fixunssfsi>
     670:	f8 01       	movw	r30, r16
     672:	60 83       	st	Z, r22
     674:	71 83       	std	Z+1, r23	; 0x01
     676:	24 96       	adiw	r28, 0x04	; 4
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     686:	e0 e0       	ldi	r30, 0x00	; 0
     688:	f8 e0       	ldi	r31, 0x08	; 8
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	95 e0       	ldi	r25, 0x05	; 5
     68e:	80 87       	std	Z+8, r24	; 0x08
     690:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     692:	80 ec       	ldi	r24, 0xC0	; 192
     694:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     696:	82 ec       	ldi	r24, 0xC2	; 194
     698:	87 83       	std	Z+7, r24	; 0x07
     69a:	08 95       	ret

0000069c <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     69c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f75ca>
     6a0:	95 ff       	sbrs	r25, 5
     6a2:	fc cf       	rjmp	.-8      	; 0x69c <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     6a4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f75c8>
     6a8:	08 95       	ret

000006aa <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f75ca>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	9c e9       	ldi	r25, 0x9C	; 156
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     6b8:	08 c0       	rjmp	.+16     	; 0x6ca <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	a1 09       	sbc	r26, r1
     6be:	b1 09       	sbc	r27, r1
     6c0:	21 f4       	brne	.+8      	; 0x6ca <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     6ca:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f75ca>
     6ce:	22 23       	and	r18, r18
     6d0:	a4 f7       	brge	.-24     	; 0x6ba <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     6d2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f75c6>
}
     6d6:	08 95       	ret

000006d8 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     6d8:	e0 e2       	ldi	r30, 0x20	; 32
     6da:	f8 e0       	ldi	r31, 0x08	; 8
     6dc:	80 e4       	ldi	r24, 0x40	; 64
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	80 87       	std	Z+8, r24	; 0x08
     6e2:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     6e4:	82 e4       	ldi	r24, 0x42	; 66
     6e6:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	87 83       	std	Z+7, r24	; 0x07
     6ec:	08 95       	ret

000006ee <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     6ee:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f75ea>
     6f2:	95 ff       	sbrs	r25, 5
     6f4:	fc cf       	rjmp	.-8      	; 0x6ee <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     6f6:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f75e8>
     6fa:	08 95       	ret

000006fc <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     706:	c0 e0       	ldi	r28, 0x00	; 0
     708:	d0 e0       	ldi	r29, 0x00	; 0
     70a:	07 c0       	rjmp	.+14     	; 0x71a <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     70c:	f8 01       	movw	r30, r16
     70e:	ec 0f       	add	r30, r28
     710:	fd 1f       	adc	r31, r29
     712:	80 81       	ld	r24, Z
     714:	0e 94 77 03 	call	0x6ee	; 0x6ee <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     718:	21 96       	adiw	r28, 0x01	; 1
     71a:	f8 01       	movw	r30, r16
     71c:	01 90       	ld	r0, Z+
     71e:	00 20       	and	r0, r0
     720:	e9 f7       	brne	.-6      	; 0x71c <USART1_sendString+0x20>
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	e0 1b       	sub	r30, r16
     726:	f1 0b       	sbc	r31, r17
     728:	ce 17       	cp	r28, r30
     72a:	df 07       	cpc	r29, r31
     72c:	78 f3       	brcs	.-34     	; 0x70c <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	6e 97       	sbiw	r28, 0x1e	; 30
     742:	cd bf       	out	0x3d, r28	; 61
     744:	de bf       	out	0x3e, r29	; 62
     746:	9e 01       	movw	r18, r28
     748:	2d 5d       	subi	r18, 0xDD	; 221
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	41 91       	ld	r20, Z+
     750:	51 91       	ld	r21, Z+
     752:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     754:	6e e1       	ldi	r22, 0x1E	; 30
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 7e 03 	call	0x6fc	; 0x6fc <USART1_sendString>
     768:	6e 96       	adiw	r28, 0x1e	; 30
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
     774:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f71ee>
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	89 27       	eor	r24, r25
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f71ce>
     782:	92 fd       	sbrc	r25, 2
     784:	02 c0       	rjmp	.+4      	; 0x78a <YEndSwitches+0x16>
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	01 c0       	rjmp	.+2      	; 0x78c <YEndSwitches+0x18>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	89 2b       	or	r24, r25
     78e:	08 95       	ret

00000790 <__subsf3>:
     790:	50 58       	subi	r21, 0x80	; 128

00000792 <__addsf3>:
     792:	bb 27       	eor	r27, r27
     794:	aa 27       	eor	r26, r26
     796:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__addsf3x>
     79a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
     79e:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
     7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__addsf3+0x20>
     7a4:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__addsf3+0x20>
     7aa:	39 f4       	brne	.+14     	; 0x7ba <__addsf3+0x28>
     7ac:	9f 3f       	cpi	r25, 0xFF	; 255
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <__addsf3+0x24>
     7b0:	26 f4       	brtc	.+8      	; 0x7ba <__addsf3+0x28>
     7b2:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_nan>
     7b6:	0e f4       	brtc	.+2      	; 0x7ba <__addsf3+0x28>
     7b8:	e0 95       	com	r30
     7ba:	e7 fb       	bst	r30, 7
     7bc:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_inf>

000007c0 <__addsf3x>:
     7c0:	e9 2f       	mov	r30, r25
     7c2:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
     7c6:	58 f3       	brcs	.-42     	; 0x79e <__addsf3+0xc>
     7c8:	ba 17       	cp	r27, r26
     7ca:	62 07       	cpc	r22, r18
     7cc:	73 07       	cpc	r23, r19
     7ce:	84 07       	cpc	r24, r20
     7d0:	95 07       	cpc	r25, r21
     7d2:	20 f0       	brcs	.+8      	; 0x7dc <__addsf3x+0x1c>
     7d4:	79 f4       	brne	.+30     	; 0x7f4 <__addsf3x+0x34>
     7d6:	a6 f5       	brtc	.+104    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7d8:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_zero>
     7dc:	0e f4       	brtc	.+2      	; 0x7e0 <__addsf3x+0x20>
     7de:	e0 95       	com	r30
     7e0:	0b 2e       	mov	r0, r27
     7e2:	ba 2f       	mov	r27, r26
     7e4:	a0 2d       	mov	r26, r0
     7e6:	0b 01       	movw	r0, r22
     7e8:	b9 01       	movw	r22, r18
     7ea:	90 01       	movw	r18, r0
     7ec:	0c 01       	movw	r0, r24
     7ee:	ca 01       	movw	r24, r20
     7f0:	a0 01       	movw	r20, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	ff 27       	eor	r31, r31
     7f6:	59 1b       	sub	r21, r25
     7f8:	99 f0       	breq	.+38     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7fa:	59 3f       	cpi	r21, 0xF9	; 249
     7fc:	50 f4       	brcc	.+20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7fe:	50 3e       	cpi	r21, 0xE0	; 224
     800:	68 f1       	brcs	.+90     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     802:	1a 16       	cp	r1, r26
     804:	f0 40       	sbci	r31, 0x00	; 0
     806:	a2 2f       	mov	r26, r18
     808:	23 2f       	mov	r18, r19
     80a:	34 2f       	mov	r19, r20
     80c:	44 27       	eor	r20, r20
     80e:	58 5f       	subi	r21, 0xF8	; 248
     810:	f3 cf       	rjmp	.-26     	; 0x7f8 <__addsf3x+0x38>
     812:	46 95       	lsr	r20
     814:	37 95       	ror	r19
     816:	27 95       	ror	r18
     818:	a7 95       	ror	r26
     81a:	f0 40       	sbci	r31, 0x00	; 0
     81c:	53 95       	inc	r21
     81e:	c9 f7       	brne	.-14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     820:	7e f4       	brtc	.+30     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     822:	1f 16       	cp	r1, r31
     824:	ba 0b       	sbc	r27, r26
     826:	62 0b       	sbc	r22, r18
     828:	73 0b       	sbc	r23, r19
     82a:	84 0b       	sbc	r24, r20
     82c:	ba f0       	brmi	.+46     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     82e:	91 50       	subi	r25, 0x01	; 1
     830:	a1 f0       	breq	.+40     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     832:	ff 0f       	add	r31, r31
     834:	bb 1f       	adc	r27, r27
     836:	66 1f       	adc	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	88 1f       	adc	r24, r24
     83c:	c2 f7       	brpl	.-16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     83e:	0e c0       	rjmp	.+28     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     840:	ba 0f       	add	r27, r26
     842:	62 1f       	adc	r22, r18
     844:	73 1f       	adc	r23, r19
     846:	84 1f       	adc	r24, r20
     848:	48 f4       	brcc	.+18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     84a:	87 95       	ror	r24
     84c:	77 95       	ror	r23
     84e:	67 95       	ror	r22
     850:	b7 95       	ror	r27
     852:	f7 95       	ror	r31
     854:	9e 3f       	cpi	r25, 0xFE	; 254
     856:	08 f0       	brcs	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	b0 cf       	rjmp	.-160    	; 0x7ba <__addsf3+0x28>
     85a:	93 95       	inc	r25
     85c:	88 0f       	add	r24, r24
     85e:	08 f0       	brcs	.+2      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     860:	99 27       	eor	r25, r25
     862:	ee 0f       	add	r30, r30
     864:	97 95       	ror	r25
     866:	87 95       	ror	r24
     868:	08 95       	ret

0000086a <__divsf3>:
     86a:	0e 94 49 04 	call	0x892	; 0x892 <__divsf3x>
     86e:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
     872:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
     876:	58 f0       	brcs	.+22     	; 0x88e <__divsf3+0x24>
     878:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
     87c:	40 f0       	brcs	.+16     	; 0x88e <__divsf3+0x24>
     87e:	29 f4       	brne	.+10     	; 0x88a <__divsf3+0x20>
     880:	5f 3f       	cpi	r21, 0xFF	; 255
     882:	29 f0       	breq	.+10     	; 0x88e <__divsf3+0x24>
     884:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_inf>
     888:	51 11       	cpse	r21, r1
     88a:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
     88e:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_nan>

00000892 <__divsf3x>:
     892:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
     896:	68 f3       	brcs	.-38     	; 0x872 <__divsf3+0x8>

00000898 <__divsf3_pse>:
     898:	99 23       	and	r25, r25
     89a:	b1 f3       	breq	.-20     	; 0x888 <__divsf3+0x1e>
     89c:	55 23       	and	r21, r21
     89e:	91 f3       	breq	.-28     	; 0x884 <__divsf3+0x1a>
     8a0:	95 1b       	sub	r25, r21
     8a2:	55 0b       	sbc	r21, r21
     8a4:	bb 27       	eor	r27, r27
     8a6:	aa 27       	eor	r26, r26
     8a8:	62 17       	cp	r22, r18
     8aa:	73 07       	cpc	r23, r19
     8ac:	84 07       	cpc	r24, r20
     8ae:	38 f0       	brcs	.+14     	; 0x8be <__divsf3_pse+0x26>
     8b0:	9f 5f       	subi	r25, 0xFF	; 255
     8b2:	5f 4f       	sbci	r21, 0xFF	; 255
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	44 1f       	adc	r20, r20
     8ba:	aa 1f       	adc	r26, r26
     8bc:	a9 f3       	breq	.-22     	; 0x8a8 <__divsf3_pse+0x10>
     8be:	35 d0       	rcall	.+106    	; 0x92a <__divsf3_pse+0x92>
     8c0:	0e 2e       	mov	r0, r30
     8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x3a>
     8c4:	e0 e8       	ldi	r30, 0x80	; 128
     8c6:	32 d0       	rcall	.+100    	; 0x92c <__divsf3_pse+0x94>
     8c8:	91 50       	subi	r25, 0x01	; 1
     8ca:	50 40       	sbci	r21, 0x00	; 0
     8cc:	e6 95       	lsr	r30
     8ce:	00 1c       	adc	r0, r0
     8d0:	ca f7       	brpl	.-14     	; 0x8c4 <__divsf3_pse+0x2c>
     8d2:	2b d0       	rcall	.+86     	; 0x92a <__divsf3_pse+0x92>
     8d4:	fe 2f       	mov	r31, r30
     8d6:	29 d0       	rcall	.+82     	; 0x92a <__divsf3_pse+0x92>
     8d8:	66 0f       	add	r22, r22
     8da:	77 1f       	adc	r23, r23
     8dc:	88 1f       	adc	r24, r24
     8de:	bb 1f       	adc	r27, r27
     8e0:	26 17       	cp	r18, r22
     8e2:	37 07       	cpc	r19, r23
     8e4:	48 07       	cpc	r20, r24
     8e6:	ab 07       	cpc	r26, r27
     8e8:	b0 e8       	ldi	r27, 0x80	; 128
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__divsf3_pse+0x56>
     8ec:	bb 0b       	sbc	r27, r27
     8ee:	80 2d       	mov	r24, r0
     8f0:	bf 01       	movw	r22, r30
     8f2:	ff 27       	eor	r31, r31
     8f4:	93 58       	subi	r25, 0x83	; 131
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	3a f0       	brmi	.+14     	; 0x908 <__divsf3_pse+0x70>
     8fa:	9e 3f       	cpi	r25, 0xFE	; 254
     8fc:	51 05       	cpc	r21, r1
     8fe:	78 f0       	brcs	.+30     	; 0x91e <__divsf3_pse+0x86>
     900:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_inf>
     904:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
     908:	5f 3f       	cpi	r21, 0xFF	; 255
     90a:	e4 f3       	brlt	.-8      	; 0x904 <__divsf3_pse+0x6c>
     90c:	98 3e       	cpi	r25, 0xE8	; 232
     90e:	d4 f3       	brlt	.-12     	; 0x904 <__divsf3_pse+0x6c>
     910:	86 95       	lsr	r24
     912:	77 95       	ror	r23
     914:	67 95       	ror	r22
     916:	b7 95       	ror	r27
     918:	f7 95       	ror	r31
     91a:	9f 5f       	subi	r25, 0xFF	; 255
     91c:	c9 f7       	brne	.-14     	; 0x910 <__divsf3_pse+0x78>
     91e:	88 0f       	add	r24, r24
     920:	91 1d       	adc	r25, r1
     922:	96 95       	lsr	r25
     924:	87 95       	ror	r24
     926:	97 f9       	bld	r25, 7
     928:	08 95       	ret
     92a:	e1 e0       	ldi	r30, 0x01	; 1
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	88 1f       	adc	r24, r24
     932:	bb 1f       	adc	r27, r27
     934:	62 17       	cp	r22, r18
     936:	73 07       	cpc	r23, r19
     938:	84 07       	cpc	r24, r20
     93a:	ba 07       	cpc	r27, r26
     93c:	20 f0       	brcs	.+8      	; 0x946 <__divsf3_pse+0xae>
     93e:	62 1b       	sub	r22, r18
     940:	73 0b       	sbc	r23, r19
     942:	84 0b       	sbc	r24, r20
     944:	ba 0b       	sbc	r27, r26
     946:	ee 1f       	adc	r30, r30
     948:	88 f7       	brcc	.-30     	; 0x92c <__divsf3_pse+0x94>
     94a:	e0 95       	com	r30
     94c:	08 95       	ret

0000094e <__fixunssfsi>:
     94e:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_splitA>
     952:	88 f0       	brcs	.+34     	; 0x976 <__fixunssfsi+0x28>
     954:	9f 57       	subi	r25, 0x7F	; 127
     956:	98 f0       	brcs	.+38     	; 0x97e <__fixunssfsi+0x30>
     958:	b9 2f       	mov	r27, r25
     95a:	99 27       	eor	r25, r25
     95c:	b7 51       	subi	r27, 0x17	; 23
     95e:	b0 f0       	brcs	.+44     	; 0x98c <__fixunssfsi+0x3e>
     960:	e1 f0       	breq	.+56     	; 0x99a <__fixunssfsi+0x4c>
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	88 1f       	adc	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	1a f0       	brmi	.+6      	; 0x972 <__fixunssfsi+0x24>
     96c:	ba 95       	dec	r27
     96e:	c9 f7       	brne	.-14     	; 0x962 <__fixunssfsi+0x14>
     970:	14 c0       	rjmp	.+40     	; 0x99a <__fixunssfsi+0x4c>
     972:	b1 30       	cpi	r27, 0x01	; 1
     974:	91 f0       	breq	.+36     	; 0x99a <__fixunssfsi+0x4c>
     976:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_zero>
     97a:	b1 e0       	ldi	r27, 0x01	; 1
     97c:	08 95       	ret
     97e:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_zero>
     982:	67 2f       	mov	r22, r23
     984:	78 2f       	mov	r23, r24
     986:	88 27       	eor	r24, r24
     988:	b8 5f       	subi	r27, 0xF8	; 248
     98a:	39 f0       	breq	.+14     	; 0x99a <__fixunssfsi+0x4c>
     98c:	b9 3f       	cpi	r27, 0xF9	; 249
     98e:	cc f3       	brlt	.-14     	; 0x982 <__fixunssfsi+0x34>
     990:	86 95       	lsr	r24
     992:	77 95       	ror	r23
     994:	67 95       	ror	r22
     996:	b3 95       	inc	r27
     998:	d9 f7       	brne	.-10     	; 0x990 <__fixunssfsi+0x42>
     99a:	3e f4       	brtc	.+14     	; 0x9aa <__fixunssfsi+0x5c>
     99c:	90 95       	com	r25
     99e:	80 95       	com	r24
     9a0:	70 95       	com	r23
     9a2:	61 95       	neg	r22
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	8f 4f       	sbci	r24, 0xFF	; 255
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	08 95       	ret

000009ac <__floatunsisf>:
     9ac:	e8 94       	clt
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__floatsisf+0x12>

000009b0 <__floatsisf>:
     9b0:	97 fb       	bst	r25, 7
     9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__floatsisf+0x12>
     9b4:	90 95       	com	r25
     9b6:	80 95       	com	r24
     9b8:	70 95       	com	r23
     9ba:	61 95       	neg	r22
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	99 23       	and	r25, r25
     9c4:	a9 f0       	breq	.+42     	; 0x9f0 <__floatsisf+0x40>
     9c6:	f9 2f       	mov	r31, r25
     9c8:	96 e9       	ldi	r25, 0x96	; 150
     9ca:	bb 27       	eor	r27, r27
     9cc:	93 95       	inc	r25
     9ce:	f6 95       	lsr	r31
     9d0:	87 95       	ror	r24
     9d2:	77 95       	ror	r23
     9d4:	67 95       	ror	r22
     9d6:	b7 95       	ror	r27
     9d8:	f1 11       	cpse	r31, r1
     9da:	f8 cf       	rjmp	.-16     	; 0x9cc <__floatsisf+0x1c>
     9dc:	fa f4       	brpl	.+62     	; 0xa1c <__floatsisf+0x6c>
     9de:	bb 0f       	add	r27, r27
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__floatsisf+0x36>
     9e2:	60 ff       	sbrs	r22, 0
     9e4:	1b c0       	rjmp	.+54     	; 0xa1c <__floatsisf+0x6c>
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	8f 4f       	sbci	r24, 0xFF	; 255
     9ec:	9f 4f       	sbci	r25, 0xFF	; 255
     9ee:	16 c0       	rjmp	.+44     	; 0xa1c <__floatsisf+0x6c>
     9f0:	88 23       	and	r24, r24
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <__floatsisf+0x48>
     9f4:	96 e9       	ldi	r25, 0x96	; 150
     9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__floatsisf+0x6a>
     9f8:	77 23       	and	r23, r23
     9fa:	21 f0       	breq	.+8      	; 0xa04 <__floatsisf+0x54>
     9fc:	9e e8       	ldi	r25, 0x8E	; 142
     9fe:	87 2f       	mov	r24, r23
     a00:	76 2f       	mov	r23, r22
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <__floatsisf+0x5e>
     a04:	66 23       	and	r22, r22
     a06:	71 f0       	breq	.+28     	; 0xa24 <__floatsisf+0x74>
     a08:	96 e8       	ldi	r25, 0x86	; 134
     a0a:	86 2f       	mov	r24, r22
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	2a f0       	brmi	.+10     	; 0xa1c <__floatsisf+0x6c>
     a12:	9a 95       	dec	r25
     a14:	66 0f       	add	r22, r22
     a16:	77 1f       	adc	r23, r23
     a18:	88 1f       	adc	r24, r24
     a1a:	da f7       	brpl	.-10     	; 0xa12 <__floatsisf+0x62>
     a1c:	88 0f       	add	r24, r24
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	97 f9       	bld	r25, 7
     a24:	08 95       	ret

00000a26 <__fp_inf>:
     a26:	97 f9       	bld	r25, 7
     a28:	9f 67       	ori	r25, 0x7F	; 127
     a2a:	80 e8       	ldi	r24, 0x80	; 128
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	08 95       	ret

00000a32 <__fp_nan>:
     a32:	9f ef       	ldi	r25, 0xFF	; 255
     a34:	80 ec       	ldi	r24, 0xC0	; 192
     a36:	08 95       	ret

00000a38 <__fp_pscA>:
     a38:	00 24       	eor	r0, r0
     a3a:	0a 94       	dec	r0
     a3c:	16 16       	cp	r1, r22
     a3e:	17 06       	cpc	r1, r23
     a40:	18 06       	cpc	r1, r24
     a42:	09 06       	cpc	r0, r25
     a44:	08 95       	ret

00000a46 <__fp_pscB>:
     a46:	00 24       	eor	r0, r0
     a48:	0a 94       	dec	r0
     a4a:	12 16       	cp	r1, r18
     a4c:	13 06       	cpc	r1, r19
     a4e:	14 06       	cpc	r1, r20
     a50:	05 06       	cpc	r0, r21
     a52:	08 95       	ret

00000a54 <__fp_round>:
     a54:	09 2e       	mov	r0, r25
     a56:	03 94       	inc	r0
     a58:	00 0c       	add	r0, r0
     a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0xc>
     a5c:	88 23       	and	r24, r24
     a5e:	52 f0       	brmi	.+20     	; 0xa74 <__fp_round+0x20>
     a60:	bb 0f       	add	r27, r27
     a62:	40 f4       	brcc	.+16     	; 0xa74 <__fp_round+0x20>
     a64:	bf 2b       	or	r27, r31
     a66:	11 f4       	brne	.+4      	; 0xa6c <__fp_round+0x18>
     a68:	60 ff       	sbrs	r22, 0
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__fp_round+0x20>
     a6c:	6f 5f       	subi	r22, 0xFF	; 255
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	8f 4f       	sbci	r24, 0xFF	; 255
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	08 95       	ret

00000a76 <__fp_split3>:
     a76:	57 fd       	sbrc	r21, 7
     a78:	90 58       	subi	r25, 0x80	; 128
     a7a:	44 0f       	add	r20, r20
     a7c:	55 1f       	adc	r21, r21
     a7e:	59 f0       	breq	.+22     	; 0xa96 <__fp_splitA+0x10>
     a80:	5f 3f       	cpi	r21, 0xFF	; 255
     a82:	71 f0       	breq	.+28     	; 0xaa0 <__fp_splitA+0x1a>
     a84:	47 95       	ror	r20

00000a86 <__fp_splitA>:
     a86:	88 0f       	add	r24, r24
     a88:	97 fb       	bst	r25, 7
     a8a:	99 1f       	adc	r25, r25
     a8c:	61 f0       	breq	.+24     	; 0xaa6 <__fp_splitA+0x20>
     a8e:	9f 3f       	cpi	r25, 0xFF	; 255
     a90:	79 f0       	breq	.+30     	; 0xab0 <__fp_splitA+0x2a>
     a92:	87 95       	ror	r24
     a94:	08 95       	ret
     a96:	12 16       	cp	r1, r18
     a98:	13 06       	cpc	r1, r19
     a9a:	14 06       	cpc	r1, r20
     a9c:	55 1f       	adc	r21, r21
     a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <__fp_split3+0xe>
     aa0:	46 95       	lsr	r20
     aa2:	f1 df       	rcall	.-30     	; 0xa86 <__fp_splitA>
     aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__fp_splitA+0x30>
     aa6:	16 16       	cp	r1, r22
     aa8:	17 06       	cpc	r1, r23
     aaa:	18 06       	cpc	r1, r24
     aac:	99 1f       	adc	r25, r25
     aae:	f1 cf       	rjmp	.-30     	; 0xa92 <__fp_splitA+0xc>
     ab0:	86 95       	lsr	r24
     ab2:	71 05       	cpc	r23, r1
     ab4:	61 05       	cpc	r22, r1
     ab6:	08 94       	sec
     ab8:	08 95       	ret

00000aba <__fp_zero>:
     aba:	e8 94       	clt

00000abc <__fp_szero>:
     abc:	bb 27       	eor	r27, r27
     abe:	66 27       	eor	r22, r22
     ac0:	77 27       	eor	r23, r23
     ac2:	cb 01       	movw	r24, r22
     ac4:	97 f9       	bld	r25, 7
     ac6:	08 95       	ret

00000ac8 <__ashldi3>:
     ac8:	0f 93       	push	r16
     aca:	08 30       	cpi	r16, 0x08	; 8
     acc:	90 f0       	brcs	.+36     	; 0xaf2 <__ashldi3+0x2a>
     ace:	98 2f       	mov	r25, r24
     ad0:	87 2f       	mov	r24, r23
     ad2:	76 2f       	mov	r23, r22
     ad4:	65 2f       	mov	r22, r21
     ad6:	54 2f       	mov	r21, r20
     ad8:	43 2f       	mov	r20, r19
     ada:	32 2f       	mov	r19, r18
     adc:	22 27       	eor	r18, r18
     ade:	08 50       	subi	r16, 0x08	; 8
     ae0:	f4 cf       	rjmp	.-24     	; 0xaca <__ashldi3+0x2>
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	44 1f       	adc	r20, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	66 1f       	adc	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	0a 95       	dec	r16
     af4:	b2 f7       	brpl	.-20     	; 0xae2 <__ashldi3+0x1a>
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <__ashrdi3>:
     afa:	97 fb       	bst	r25, 7
     afc:	10 f8       	bld	r1, 0

00000afe <__lshrdi3>:
     afe:	16 94       	lsr	r1
     b00:	00 08       	sbc	r0, r0
     b02:	0f 93       	push	r16
     b04:	08 30       	cpi	r16, 0x08	; 8
     b06:	98 f0       	brcs	.+38     	; 0xb2e <__lshrdi3+0x30>
     b08:	08 50       	subi	r16, 0x08	; 8
     b0a:	23 2f       	mov	r18, r19
     b0c:	34 2f       	mov	r19, r20
     b0e:	45 2f       	mov	r20, r21
     b10:	56 2f       	mov	r21, r22
     b12:	67 2f       	mov	r22, r23
     b14:	78 2f       	mov	r23, r24
     b16:	89 2f       	mov	r24, r25
     b18:	90 2d       	mov	r25, r0
     b1a:	f4 cf       	rjmp	.-24     	; 0xb04 <__lshrdi3+0x6>
     b1c:	05 94       	asr	r0
     b1e:	97 95       	ror	r25
     b20:	87 95       	ror	r24
     b22:	77 95       	ror	r23
     b24:	67 95       	ror	r22
     b26:	57 95       	ror	r21
     b28:	47 95       	ror	r20
     b2a:	37 95       	ror	r19
     b2c:	27 95       	ror	r18
     b2e:	0a 95       	dec	r16
     b30:	aa f7       	brpl	.-22     	; 0xb1c <__lshrdi3+0x1e>
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <__cmpdi2_s8>:
     b36:	00 24       	eor	r0, r0
     b38:	a7 fd       	sbrc	r26, 7
     b3a:	00 94       	com	r0
     b3c:	2a 17       	cp	r18, r26
     b3e:	30 05       	cpc	r19, r0
     b40:	40 05       	cpc	r20, r0
     b42:	50 05       	cpc	r21, r0
     b44:	60 05       	cpc	r22, r0
     b46:	70 05       	cpc	r23, r0
     b48:	80 05       	cpc	r24, r0
     b4a:	90 05       	cpc	r25, r0
     b4c:	08 95       	ret

00000b4e <vsnprintf>:
     b4e:	ae e0       	ldi	r26, 0x0E	; 14
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ed ea       	ldi	r30, 0xAD	; 173
     b54:	f5 e0       	ldi	r31, 0x05	; 5
     b56:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__prologue_saves__+0x1c>
     b5a:	8c 01       	movw	r16, r24
     b5c:	fa 01       	movw	r30, r20
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	8c 83       	std	Y+4, r24	; 0x04
     b62:	09 83       	std	Y+1, r16	; 0x01
     b64:	1a 83       	std	Y+2, r17	; 0x02
     b66:	77 ff       	sbrs	r23, 7
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <vsnprintf+0x20>
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e8       	ldi	r23, 0x80	; 128
     b6e:	cb 01       	movw	r24, r22
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	8d 83       	std	Y+5, r24	; 0x05
     b74:	9e 83       	std	Y+6, r25	; 0x06
     b76:	a9 01       	movw	r20, r18
     b78:	bf 01       	movw	r22, r30
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 d3 05 	call	0xba6	; 0xba6 <vfprintf>
     b82:	4d 81       	ldd	r20, Y+5	; 0x05
     b84:	5e 81       	ldd	r21, Y+6	; 0x06
     b86:	57 fd       	sbrc	r21, 7
     b88:	0a c0       	rjmp	.+20     	; 0xb9e <vsnprintf+0x50>
     b8a:	2f 81       	ldd	r18, Y+7	; 0x07
     b8c:	38 85       	ldd	r19, Y+8	; 0x08
     b8e:	42 17       	cp	r20, r18
     b90:	53 07       	cpc	r21, r19
     b92:	0c f4       	brge	.+2      	; 0xb96 <vsnprintf+0x48>
     b94:	9a 01       	movw	r18, r20
     b96:	f8 01       	movw	r30, r16
     b98:	e2 0f       	add	r30, r18
     b9a:	f3 1f       	adc	r31, r19
     b9c:	10 82       	st	Z, r1
     b9e:	2e 96       	adiw	r28, 0x0e	; 14
     ba0:	e4 e0       	ldi	r30, 0x04	; 4
     ba2:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__epilogue_restores__+0x1c>

00000ba6 <vfprintf>:
     ba6:	ab e0       	ldi	r26, 0x0B	; 11
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 ed       	ldi	r30, 0xD9	; 217
     bac:	f5 e0       	ldi	r31, 0x05	; 5
     bae:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__prologue_saves__>
     bb2:	6c 01       	movw	r12, r24
     bb4:	7b 01       	movw	r14, r22
     bb6:	8a 01       	movw	r16, r20
     bb8:	fc 01       	movw	r30, r24
     bba:	16 82       	std	Z+6, r1	; 0x06
     bbc:	17 82       	std	Z+7, r1	; 0x07
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	81 ff       	sbrs	r24, 1
     bc2:	cc c1       	rjmp	.+920    	; 0xf5c <vfprintf+0x3b6>
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	3c 01       	movw	r6, r24
     bca:	f6 01       	movw	r30, r12
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	f7 01       	movw	r30, r14
     bd0:	93 fd       	sbrc	r25, 3
     bd2:	85 91       	lpm	r24, Z+
     bd4:	93 ff       	sbrs	r25, 3
     bd6:	81 91       	ld	r24, Z+
     bd8:	7f 01       	movw	r14, r30
     bda:	88 23       	and	r24, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <vfprintf+0x3a>
     bde:	ba c1       	rjmp	.+884    	; 0xf54 <vfprintf+0x3ae>
     be0:	85 32       	cpi	r24, 0x25	; 37
     be2:	39 f4       	brne	.+14     	; 0xbf2 <vfprintf+0x4c>
     be4:	93 fd       	sbrc	r25, 3
     be6:	85 91       	lpm	r24, Z+
     be8:	93 ff       	sbrs	r25, 3
     bea:	81 91       	ld	r24, Z+
     bec:	7f 01       	movw	r14, r30
     bee:	85 32       	cpi	r24, 0x25	; 37
     bf0:	29 f4       	brne	.+10     	; 0xbfc <vfprintf+0x56>
     bf2:	b6 01       	movw	r22, r12
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     bfa:	e7 cf       	rjmp	.-50     	; 0xbca <vfprintf+0x24>
     bfc:	91 2c       	mov	r9, r1
     bfe:	21 2c       	mov	r2, r1
     c00:	31 2c       	mov	r3, r1
     c02:	ff e1       	ldi	r31, 0x1F	; 31
     c04:	f3 15       	cp	r31, r3
     c06:	d8 f0       	brcs	.+54     	; 0xc3e <vfprintf+0x98>
     c08:	8b 32       	cpi	r24, 0x2B	; 43
     c0a:	79 f0       	breq	.+30     	; 0xc2a <vfprintf+0x84>
     c0c:	38 f4       	brcc	.+14     	; 0xc1c <vfprintf+0x76>
     c0e:	80 32       	cpi	r24, 0x20	; 32
     c10:	79 f0       	breq	.+30     	; 0xc30 <vfprintf+0x8a>
     c12:	83 32       	cpi	r24, 0x23	; 35
     c14:	a1 f4       	brne	.+40     	; 0xc3e <vfprintf+0x98>
     c16:	23 2d       	mov	r18, r3
     c18:	20 61       	ori	r18, 0x10	; 16
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <vfprintf+0xb0>
     c1c:	8d 32       	cpi	r24, 0x2D	; 45
     c1e:	61 f0       	breq	.+24     	; 0xc38 <vfprintf+0x92>
     c20:	80 33       	cpi	r24, 0x30	; 48
     c22:	69 f4       	brne	.+26     	; 0xc3e <vfprintf+0x98>
     c24:	23 2d       	mov	r18, r3
     c26:	21 60       	ori	r18, 0x01	; 1
     c28:	16 c0       	rjmp	.+44     	; 0xc56 <vfprintf+0xb0>
     c2a:	83 2d       	mov	r24, r3
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	38 2e       	mov	r3, r24
     c30:	e3 2d       	mov	r30, r3
     c32:	e4 60       	ori	r30, 0x04	; 4
     c34:	3e 2e       	mov	r3, r30
     c36:	2a c0       	rjmp	.+84     	; 0xc8c <vfprintf+0xe6>
     c38:	f3 2d       	mov	r31, r3
     c3a:	f8 60       	ori	r31, 0x08	; 8
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <vfprintf+0xd2>
     c3e:	37 fc       	sbrc	r3, 7
     c40:	2d c0       	rjmp	.+90     	; 0xc9c <vfprintf+0xf6>
     c42:	20 ed       	ldi	r18, 0xD0	; 208
     c44:	28 0f       	add	r18, r24
     c46:	2a 30       	cpi	r18, 0x0A	; 10
     c48:	40 f0       	brcs	.+16     	; 0xc5a <vfprintf+0xb4>
     c4a:	8e 32       	cpi	r24, 0x2E	; 46
     c4c:	b9 f4       	brne	.+46     	; 0xc7c <vfprintf+0xd6>
     c4e:	36 fc       	sbrc	r3, 6
     c50:	81 c1       	rjmp	.+770    	; 0xf54 <vfprintf+0x3ae>
     c52:	23 2d       	mov	r18, r3
     c54:	20 64       	ori	r18, 0x40	; 64
     c56:	32 2e       	mov	r3, r18
     c58:	19 c0       	rjmp	.+50     	; 0xc8c <vfprintf+0xe6>
     c5a:	36 fe       	sbrs	r3, 6
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0xc4>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	98 9e       	mul	r9, r24
     c62:	20 0d       	add	r18, r0
     c64:	11 24       	eor	r1, r1
     c66:	92 2e       	mov	r9, r18
     c68:	11 c0       	rjmp	.+34     	; 0xc8c <vfprintf+0xe6>
     c6a:	ea e0       	ldi	r30, 0x0A	; 10
     c6c:	2e 9e       	mul	r2, r30
     c6e:	20 0d       	add	r18, r0
     c70:	11 24       	eor	r1, r1
     c72:	22 2e       	mov	r2, r18
     c74:	f3 2d       	mov	r31, r3
     c76:	f0 62       	ori	r31, 0x20	; 32
     c78:	3f 2e       	mov	r3, r31
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <vfprintf+0xe6>
     c7c:	8c 36       	cpi	r24, 0x6C	; 108
     c7e:	21 f4       	brne	.+8      	; 0xc88 <vfprintf+0xe2>
     c80:	83 2d       	mov	r24, r3
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	38 2e       	mov	r3, r24
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <vfprintf+0xe6>
     c88:	88 36       	cpi	r24, 0x68	; 104
     c8a:	41 f4       	brne	.+16     	; 0xc9c <vfprintf+0xf6>
     c8c:	f7 01       	movw	r30, r14
     c8e:	93 fd       	sbrc	r25, 3
     c90:	85 91       	lpm	r24, Z+
     c92:	93 ff       	sbrs	r25, 3
     c94:	81 91       	ld	r24, Z+
     c96:	7f 01       	movw	r14, r30
     c98:	81 11       	cpse	r24, r1
     c9a:	b3 cf       	rjmp	.-154    	; 0xc02 <vfprintf+0x5c>
     c9c:	98 2f       	mov	r25, r24
     c9e:	9f 7d       	andi	r25, 0xDF	; 223
     ca0:	95 54       	subi	r25, 0x45	; 69
     ca2:	93 30       	cpi	r25, 0x03	; 3
     ca4:	28 f4       	brcc	.+10     	; 0xcb0 <vfprintf+0x10a>
     ca6:	0c 5f       	subi	r16, 0xFC	; 252
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	9f e3       	ldi	r25, 0x3F	; 63
     cac:	99 83       	std	Y+1, r25	; 0x01
     cae:	0d c0       	rjmp	.+26     	; 0xcca <vfprintf+0x124>
     cb0:	83 36       	cpi	r24, 0x63	; 99
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <vfprintf+0x11a>
     cb4:	83 37       	cpi	r24, 0x73	; 115
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <vfprintf+0x12e>
     cb8:	83 35       	cpi	r24, 0x53	; 83
     cba:	09 f0       	breq	.+2      	; 0xcbe <vfprintf+0x118>
     cbc:	59 c0       	rjmp	.+178    	; 0xd70 <vfprintf+0x1ca>
     cbe:	21 c0       	rjmp	.+66     	; 0xd02 <vfprintf+0x15c>
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 81       	ld	r24, Z
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	0e 5f       	subi	r16, 0xFE	; 254
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	88 24       	eor	r8, r8
     ccc:	83 94       	inc	r8
     cce:	91 2c       	mov	r9, r1
     cd0:	53 01       	movw	r10, r6
     cd2:	13 c0       	rjmp	.+38     	; 0xcfa <vfprintf+0x154>
     cd4:	28 01       	movw	r4, r16
     cd6:	f2 e0       	ldi	r31, 0x02	; 2
     cd8:	4f 0e       	add	r4, r31
     cda:	51 1c       	adc	r5, r1
     cdc:	f8 01       	movw	r30, r16
     cde:	a0 80       	ld	r10, Z
     ce0:	b1 80       	ldd	r11, Z+1	; 0x01
     ce2:	36 fe       	sbrs	r3, 6
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <vfprintf+0x146>
     ce6:	69 2d       	mov	r22, r9
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0x14a>
     cec:	6f ef       	ldi	r22, 0xFF	; 255
     cee:	7f ef       	ldi	r23, 0xFF	; 255
     cf0:	c5 01       	movw	r24, r10
     cf2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <strnlen>
     cf6:	4c 01       	movw	r8, r24
     cf8:	82 01       	movw	r16, r4
     cfa:	f3 2d       	mov	r31, r3
     cfc:	ff 77       	andi	r31, 0x7F	; 127
     cfe:	3f 2e       	mov	r3, r31
     d00:	16 c0       	rjmp	.+44     	; 0xd2e <vfprintf+0x188>
     d02:	28 01       	movw	r4, r16
     d04:	22 e0       	ldi	r18, 0x02	; 2
     d06:	42 0e       	add	r4, r18
     d08:	51 1c       	adc	r5, r1
     d0a:	f8 01       	movw	r30, r16
     d0c:	a0 80       	ld	r10, Z
     d0e:	b1 80       	ldd	r11, Z+1	; 0x01
     d10:	36 fe       	sbrs	r3, 6
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <vfprintf+0x174>
     d14:	69 2d       	mov	r22, r9
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x178>
     d1a:	6f ef       	ldi	r22, 0xFF	; 255
     d1c:	7f ef       	ldi	r23, 0xFF	; 255
     d1e:	c5 01       	movw	r24, r10
     d20:	0e 94 b4 07 	call	0xf68	; 0xf68 <strnlen_P>
     d24:	4c 01       	movw	r8, r24
     d26:	f3 2d       	mov	r31, r3
     d28:	f0 68       	ori	r31, 0x80	; 128
     d2a:	3f 2e       	mov	r3, r31
     d2c:	82 01       	movw	r16, r4
     d2e:	33 fc       	sbrc	r3, 3
     d30:	1b c0       	rjmp	.+54     	; 0xd68 <vfprintf+0x1c2>
     d32:	82 2d       	mov	r24, r2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	88 16       	cp	r8, r24
     d38:	99 06       	cpc	r9, r25
     d3a:	b0 f4       	brcc	.+44     	; 0xd68 <vfprintf+0x1c2>
     d3c:	b6 01       	movw	r22, r12
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     d46:	2a 94       	dec	r2
     d48:	f4 cf       	rjmp	.-24     	; 0xd32 <vfprintf+0x18c>
     d4a:	f5 01       	movw	r30, r10
     d4c:	37 fc       	sbrc	r3, 7
     d4e:	85 91       	lpm	r24, Z+
     d50:	37 fe       	sbrs	r3, 7
     d52:	81 91       	ld	r24, Z+
     d54:	5f 01       	movw	r10, r30
     d56:	b6 01       	movw	r22, r12
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     d5e:	21 10       	cpse	r2, r1
     d60:	2a 94       	dec	r2
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	82 1a       	sub	r8, r18
     d66:	91 08       	sbc	r9, r1
     d68:	81 14       	cp	r8, r1
     d6a:	91 04       	cpc	r9, r1
     d6c:	71 f7       	brne	.-36     	; 0xd4a <vfprintf+0x1a4>
     d6e:	e8 c0       	rjmp	.+464    	; 0xf40 <vfprintf+0x39a>
     d70:	84 36       	cpi	r24, 0x64	; 100
     d72:	11 f0       	breq	.+4      	; 0xd78 <vfprintf+0x1d2>
     d74:	89 36       	cpi	r24, 0x69	; 105
     d76:	41 f5       	brne	.+80     	; 0xdc8 <vfprintf+0x222>
     d78:	f8 01       	movw	r30, r16
     d7a:	37 fe       	sbrs	r3, 7
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <vfprintf+0x1e6>
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	0c 5f       	subi	r16, 0xFC	; 252
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <vfprintf+0x1f6>
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	07 2e       	mov	r0, r23
     d92:	00 0c       	add	r0, r0
     d94:	88 0b       	sbc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	0e 5f       	subi	r16, 0xFE	; 254
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	f3 2d       	mov	r31, r3
     d9e:	ff 76       	andi	r31, 0x6F	; 111
     da0:	3f 2e       	mov	r3, r31
     da2:	97 ff       	sbrs	r25, 7
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <vfprintf+0x212>
     da6:	90 95       	com	r25
     da8:	80 95       	com	r24
     daa:	70 95       	com	r23
     dac:	61 95       	neg	r22
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	8f 4f       	sbci	r24, 0xFF	; 255
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	f0 68       	ori	r31, 0x80	; 128
     db6:	3f 2e       	mov	r3, r31
     db8:	2a e0       	ldi	r18, 0x0A	; 10
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	a3 01       	movw	r20, r6
     dbe:	0e 94 06 08 	call	0x100c	; 0x100c <__ultoa_invert>
     dc2:	88 2e       	mov	r8, r24
     dc4:	86 18       	sub	r8, r6
     dc6:	45 c0       	rjmp	.+138    	; 0xe52 <vfprintf+0x2ac>
     dc8:	85 37       	cpi	r24, 0x75	; 117
     dca:	31 f4       	brne	.+12     	; 0xdd8 <vfprintf+0x232>
     dcc:	23 2d       	mov	r18, r3
     dce:	2f 7e       	andi	r18, 0xEF	; 239
     dd0:	b2 2e       	mov	r11, r18
     dd2:	2a e0       	ldi	r18, 0x0A	; 10
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	25 c0       	rjmp	.+74     	; 0xe22 <vfprintf+0x27c>
     dd8:	93 2d       	mov	r25, r3
     dda:	99 7f       	andi	r25, 0xF9	; 249
     ddc:	b9 2e       	mov	r11, r25
     dde:	8f 36       	cpi	r24, 0x6F	; 111
     de0:	c1 f0       	breq	.+48     	; 0xe12 <vfprintf+0x26c>
     de2:	18 f4       	brcc	.+6      	; 0xdea <vfprintf+0x244>
     de4:	88 35       	cpi	r24, 0x58	; 88
     de6:	79 f0       	breq	.+30     	; 0xe06 <vfprintf+0x260>
     de8:	b5 c0       	rjmp	.+362    	; 0xf54 <vfprintf+0x3ae>
     dea:	80 37       	cpi	r24, 0x70	; 112
     dec:	19 f0       	breq	.+6      	; 0xdf4 <vfprintf+0x24e>
     dee:	88 37       	cpi	r24, 0x78	; 120
     df0:	21 f0       	breq	.+8      	; 0xdfa <vfprintf+0x254>
     df2:	b0 c0       	rjmp	.+352    	; 0xf54 <vfprintf+0x3ae>
     df4:	e9 2f       	mov	r30, r25
     df6:	e0 61       	ori	r30, 0x10	; 16
     df8:	be 2e       	mov	r11, r30
     dfa:	b4 fe       	sbrs	r11, 4
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <vfprintf+0x272>
     dfe:	fb 2d       	mov	r31, r11
     e00:	f4 60       	ori	r31, 0x04	; 4
     e02:	bf 2e       	mov	r11, r31
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <vfprintf+0x272>
     e06:	34 fe       	sbrs	r3, 4
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <vfprintf+0x278>
     e0a:	29 2f       	mov	r18, r25
     e0c:	26 60       	ori	r18, 0x06	; 6
     e0e:	b2 2e       	mov	r11, r18
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <vfprintf+0x278>
     e12:	28 e0       	ldi	r18, 0x08	; 8
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <vfprintf+0x27c>
     e18:	20 e1       	ldi	r18, 0x10	; 16
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x27c>
     e1e:	20 e1       	ldi	r18, 0x10	; 16
     e20:	32 e0       	ldi	r19, 0x02	; 2
     e22:	f8 01       	movw	r30, r16
     e24:	b7 fe       	sbrs	r11, 7
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <vfprintf+0x290>
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	0c 5f       	subi	r16, 0xFC	; 252
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0x29c>
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 5f       	subi	r16, 0xFE	; 254
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	a3 01       	movw	r20, r6
     e44:	0e 94 06 08 	call	0x100c	; 0x100c <__ultoa_invert>
     e48:	88 2e       	mov	r8, r24
     e4a:	86 18       	sub	r8, r6
     e4c:	fb 2d       	mov	r31, r11
     e4e:	ff 77       	andi	r31, 0x7F	; 127
     e50:	3f 2e       	mov	r3, r31
     e52:	36 fe       	sbrs	r3, 6
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <vfprintf+0x2ca>
     e56:	23 2d       	mov	r18, r3
     e58:	2e 7f       	andi	r18, 0xFE	; 254
     e5a:	a2 2e       	mov	r10, r18
     e5c:	89 14       	cp	r8, r9
     e5e:	58 f4       	brcc	.+22     	; 0xe76 <vfprintf+0x2d0>
     e60:	34 fe       	sbrs	r3, 4
     e62:	0b c0       	rjmp	.+22     	; 0xe7a <vfprintf+0x2d4>
     e64:	32 fc       	sbrc	r3, 2
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <vfprintf+0x2d4>
     e68:	83 2d       	mov	r24, r3
     e6a:	8e 7e       	andi	r24, 0xEE	; 238
     e6c:	a8 2e       	mov	r10, r24
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <vfprintf+0x2d4>
     e70:	b8 2c       	mov	r11, r8
     e72:	a3 2c       	mov	r10, r3
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x2d6>
     e76:	b8 2c       	mov	r11, r8
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x2d6>
     e7a:	b9 2c       	mov	r11, r9
     e7c:	a4 fe       	sbrs	r10, 4
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <vfprintf+0x2f8>
     e80:	fe 01       	movw	r30, r28
     e82:	e8 0d       	add	r30, r8
     e84:	f1 1d       	adc	r31, r1
     e86:	80 81       	ld	r24, Z
     e88:	80 33       	cpi	r24, 0x30	; 48
     e8a:	21 f4       	brne	.+8      	; 0xe94 <vfprintf+0x2ee>
     e8c:	9a 2d       	mov	r25, r10
     e8e:	99 7e       	andi	r25, 0xE9	; 233
     e90:	a9 2e       	mov	r10, r25
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x300>
     e94:	a2 fe       	sbrs	r10, 2
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x2fe>
     e98:	b3 94       	inc	r11
     e9a:	b3 94       	inc	r11
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <vfprintf+0x300>
     e9e:	8a 2d       	mov	r24, r10
     ea0:	86 78       	andi	r24, 0x86	; 134
     ea2:	09 f0       	breq	.+2      	; 0xea6 <vfprintf+0x300>
     ea4:	b3 94       	inc	r11
     ea6:	a3 fc       	sbrc	r10, 3
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <vfprintf+0x326>
     eaa:	a0 fe       	sbrs	r10, 0
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0x314>
     eae:	b2 14       	cp	r11, r2
     eb0:	88 f4       	brcc	.+34     	; 0xed4 <vfprintf+0x32e>
     eb2:	28 0c       	add	r2, r8
     eb4:	92 2c       	mov	r9, r2
     eb6:	9b 18       	sub	r9, r11
     eb8:	0e c0       	rjmp	.+28     	; 0xed6 <vfprintf+0x330>
     eba:	b2 14       	cp	r11, r2
     ebc:	60 f4       	brcc	.+24     	; 0xed6 <vfprintf+0x330>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e2       	ldi	r24, 0x20	; 32
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     ec8:	b3 94       	inc	r11
     eca:	f7 cf       	rjmp	.-18     	; 0xeba <vfprintf+0x314>
     ecc:	b2 14       	cp	r11, r2
     ece:	18 f4       	brcc	.+6      	; 0xed6 <vfprintf+0x330>
     ed0:	2b 18       	sub	r2, r11
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x332>
     ed4:	98 2c       	mov	r9, r8
     ed6:	21 2c       	mov	r2, r1
     ed8:	a4 fe       	sbrs	r10, 4
     eda:	10 c0       	rjmp	.+32     	; 0xefc <vfprintf+0x356>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e3       	ldi	r24, 0x30	; 48
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     ee6:	a2 fe       	sbrs	r10, 2
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <vfprintf+0x372>
     eea:	a1 fc       	sbrc	r10, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x34e>
     eee:	88 e7       	ldi	r24, 0x78	; 120
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x352>
     ef4:	88 e5       	ldi	r24, 0x58	; 88
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b6 01       	movw	r22, r12
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <vfprintf+0x36e>
     efc:	8a 2d       	mov	r24, r10
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	59 f0       	breq	.+22     	; 0xf18 <vfprintf+0x372>
     f02:	a1 fe       	sbrs	r10, 1
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x364>
     f06:	8b e2       	ldi	r24, 0x2B	; 43
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <vfprintf+0x366>
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	a7 fc       	sbrc	r10, 7
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	b6 01       	movw	r22, r12
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f18:	89 14       	cp	r8, r9
     f1a:	38 f4       	brcc	.+14     	; 0xf2a <vfprintf+0x384>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f26:	9a 94       	dec	r9
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <vfprintf+0x372>
     f2a:	8a 94       	dec	r8
     f2c:	f3 01       	movw	r30, r6
     f2e:	e8 0d       	add	r30, r8
     f30:	f1 1d       	adc	r31, r1
     f32:	80 81       	ld	r24, Z
     f34:	b6 01       	movw	r22, r12
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f3c:	81 10       	cpse	r8, r1
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <vfprintf+0x384>
     f40:	22 20       	and	r2, r2
     f42:	09 f4       	brne	.+2      	; 0xf46 <vfprintf+0x3a0>
     f44:	42 ce       	rjmp	.-892    	; 0xbca <vfprintf+0x24>
     f46:	b6 01       	movw	r22, r12
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f50:	2a 94       	dec	r2
     f52:	f6 cf       	rjmp	.-20     	; 0xf40 <vfprintf+0x39a>
     f54:	f6 01       	movw	r30, r12
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x3ba>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	2b 96       	adiw	r28, 0x0b	; 11
     f62:	e2 e1       	ldi	r30, 0x12	; 18
     f64:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__epilogue_restores__>

00000f68 <strnlen_P>:
     f68:	fc 01       	movw	r30, r24
     f6a:	05 90       	lpm	r0, Z+
     f6c:	61 50       	subi	r22, 0x01	; 1
     f6e:	70 40       	sbci	r23, 0x00	; 0
     f70:	01 10       	cpse	r0, r1
     f72:	d8 f7       	brcc	.-10     	; 0xf6a <strnlen_P+0x2>
     f74:	80 95       	com	r24
     f76:	90 95       	com	r25
     f78:	8e 0f       	add	r24, r30
     f7a:	9f 1f       	adc	r25, r31
     f7c:	08 95       	ret

00000f7e <strnlen>:
     f7e:	fc 01       	movw	r30, r24
     f80:	61 50       	subi	r22, 0x01	; 1
     f82:	70 40       	sbci	r23, 0x00	; 0
     f84:	01 90       	ld	r0, Z+
     f86:	01 10       	cpse	r0, r1
     f88:	d8 f7       	brcc	.-10     	; 0xf80 <strnlen+0x2>
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	8e 0f       	add	r24, r30
     f90:	9f 1f       	adc	r25, r31
     f92:	08 95       	ret

00000f94 <fputc>:
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	fb 01       	movw	r30, r22
     f9e:	23 81       	ldd	r18, Z+3	; 0x03
     fa0:	21 fd       	sbrc	r18, 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <fputc+0x16>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	2c c0       	rjmp	.+88     	; 0x1002 <fputc+0x6e>
     faa:	22 ff       	sbrs	r18, 2
     fac:	16 c0       	rjmp	.+44     	; 0xfda <fputc+0x46>
     fae:	46 81       	ldd	r20, Z+6	; 0x06
     fb0:	57 81       	ldd	r21, Z+7	; 0x07
     fb2:	24 81       	ldd	r18, Z+4	; 0x04
     fb4:	35 81       	ldd	r19, Z+5	; 0x05
     fb6:	42 17       	cp	r20, r18
     fb8:	53 07       	cpc	r21, r19
     fba:	44 f4       	brge	.+16     	; 0xfcc <fputc+0x38>
     fbc:	a0 81       	ld	r26, Z
     fbe:	b1 81       	ldd	r27, Z+1	; 0x01
     fc0:	9d 01       	movw	r18, r26
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	20 83       	st	Z, r18
     fc8:	31 83       	std	Z+1, r19	; 0x01
     fca:	8c 93       	st	X, r24
     fcc:	26 81       	ldd	r18, Z+6	; 0x06
     fce:	37 81       	ldd	r19, Z+7	; 0x07
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	26 83       	std	Z+6, r18	; 0x06
     fd6:	37 83       	std	Z+7, r19	; 0x07
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <fputc+0x6e>
     fda:	8b 01       	movw	r16, r22
     fdc:	ec 01       	movw	r28, r24
     fde:	fb 01       	movw	r30, r22
     fe0:	00 84       	ldd	r0, Z+8	; 0x08
     fe2:	f1 85       	ldd	r31, Z+9	; 0x09
     fe4:	e0 2d       	mov	r30, r0
     fe6:	09 95       	icall
     fe8:	89 2b       	or	r24, r25
     fea:	e1 f6       	brne	.-72     	; 0xfa4 <fputc+0x10>
     fec:	d8 01       	movw	r26, r16
     fee:	16 96       	adiw	r26, 0x06	; 6
     ff0:	8d 91       	ld	r24, X+
     ff2:	9c 91       	ld	r25, X
     ff4:	17 97       	sbiw	r26, 0x07	; 7
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	16 96       	adiw	r26, 0x06	; 6
     ffa:	8d 93       	st	X+, r24
     ffc:	9c 93       	st	X, r25
     ffe:	17 97       	sbiw	r26, 0x07	; 7
    1000:	ce 01       	movw	r24, r28
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	08 95       	ret

0000100c <__ultoa_invert>:
    100c:	fa 01       	movw	r30, r20
    100e:	aa 27       	eor	r26, r26
    1010:	28 30       	cpi	r18, 0x08	; 8
    1012:	51 f1       	breq	.+84     	; 0x1068 <__ultoa_invert+0x5c>
    1014:	20 31       	cpi	r18, 0x10	; 16
    1016:	81 f1       	breq	.+96     	; 0x1078 <__ultoa_invert+0x6c>
    1018:	e8 94       	clt
    101a:	6f 93       	push	r22
    101c:	6e 7f       	andi	r22, 0xFE	; 254
    101e:	6e 5f       	subi	r22, 0xFE	; 254
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	af 4f       	sbci	r26, 0xFF	; 255
    1028:	b1 e0       	ldi	r27, 0x01	; 1
    102a:	3e d0       	rcall	.+124    	; 0x10a8 <__ultoa_invert+0x9c>
    102c:	b4 e0       	ldi	r27, 0x04	; 4
    102e:	3c d0       	rcall	.+120    	; 0x10a8 <__ultoa_invert+0x9c>
    1030:	67 0f       	add	r22, r23
    1032:	78 1f       	adc	r23, r24
    1034:	89 1f       	adc	r24, r25
    1036:	9a 1f       	adc	r25, r26
    1038:	a1 1d       	adc	r26, r1
    103a:	68 0f       	add	r22, r24
    103c:	79 1f       	adc	r23, r25
    103e:	8a 1f       	adc	r24, r26
    1040:	91 1d       	adc	r25, r1
    1042:	a1 1d       	adc	r26, r1
    1044:	6a 0f       	add	r22, r26
    1046:	71 1d       	adc	r23, r1
    1048:	81 1d       	adc	r24, r1
    104a:	91 1d       	adc	r25, r1
    104c:	a1 1d       	adc	r26, r1
    104e:	20 d0       	rcall	.+64     	; 0x1090 <__ultoa_invert+0x84>
    1050:	09 f4       	brne	.+2      	; 0x1054 <__ultoa_invert+0x48>
    1052:	68 94       	set
    1054:	3f 91       	pop	r19
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	26 9f       	mul	r18, r22
    105a:	11 24       	eor	r1, r1
    105c:	30 19       	sub	r19, r0
    105e:	30 5d       	subi	r19, 0xD0	; 208
    1060:	31 93       	st	Z+, r19
    1062:	de f6       	brtc	.-74     	; 0x101a <__ultoa_invert+0xe>
    1064:	cf 01       	movw	r24, r30
    1066:	08 95       	ret
    1068:	46 2f       	mov	r20, r22
    106a:	47 70       	andi	r20, 0x07	; 7
    106c:	40 5d       	subi	r20, 0xD0	; 208
    106e:	41 93       	st	Z+, r20
    1070:	b3 e0       	ldi	r27, 0x03	; 3
    1072:	0f d0       	rcall	.+30     	; 0x1092 <__ultoa_invert+0x86>
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__ultoa_invert+0x5c>
    1076:	f6 cf       	rjmp	.-20     	; 0x1064 <__ultoa_invert+0x58>
    1078:	46 2f       	mov	r20, r22
    107a:	4f 70       	andi	r20, 0x0F	; 15
    107c:	40 5d       	subi	r20, 0xD0	; 208
    107e:	4a 33       	cpi	r20, 0x3A	; 58
    1080:	18 f0       	brcs	.+6      	; 0x1088 <__ultoa_invert+0x7c>
    1082:	49 5d       	subi	r20, 0xD9	; 217
    1084:	31 fd       	sbrc	r19, 1
    1086:	40 52       	subi	r20, 0x20	; 32
    1088:	41 93       	st	Z+, r20
    108a:	02 d0       	rcall	.+4      	; 0x1090 <__ultoa_invert+0x84>
    108c:	a9 f7       	brne	.-22     	; 0x1078 <__ultoa_invert+0x6c>
    108e:	ea cf       	rjmp	.-44     	; 0x1064 <__ultoa_invert+0x58>
    1090:	b4 e0       	ldi	r27, 0x04	; 4
    1092:	a6 95       	lsr	r26
    1094:	97 95       	ror	r25
    1096:	87 95       	ror	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	ba 95       	dec	r27
    109e:	c9 f7       	brne	.-14     	; 0x1092 <__ultoa_invert+0x86>
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 05       	cpc	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	08 95       	ret
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	0a 2e       	mov	r0, r26
    10ae:	06 94       	lsr	r0
    10b0:	57 95       	ror	r21
    10b2:	47 95       	ror	r20
    10b4:	37 95       	ror	r19
    10b6:	27 95       	ror	r18
    10b8:	ba 95       	dec	r27
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__ultoa_invert+0xa2>
    10bc:	62 0f       	add	r22, r18
    10be:	73 1f       	adc	r23, r19
    10c0:	84 1f       	adc	r24, r20
    10c2:	95 1f       	adc	r25, r21
    10c4:	a0 1d       	adc	r26, r0
    10c6:	08 95       	ret

000010c8 <ccp_write_io>:
    10c8:	dc 01       	movw	r26, r24
    10ca:	28 ed       	ldi	r18, 0xD8	; 216
    10cc:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6dfa>
    10d0:	6c 93       	st	X, r22
    10d2:	08 95       	ret

000010d4 <__prologue_saves__>:
    10d4:	2f 92       	push	r2
    10d6:	3f 92       	push	r3
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	ca 1b       	sub	r28, r26
    10fe:	db 0b       	sbc	r29, r27
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	09 94       	ijmp

00001106 <__epilogue_restores__>:
    1106:	2a 88       	ldd	r2, Y+18	; 0x12
    1108:	39 88       	ldd	r3, Y+17	; 0x11
    110a:	48 88       	ldd	r4, Y+16	; 0x10
    110c:	5f 84       	ldd	r5, Y+15	; 0x0f
    110e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1110:	7d 84       	ldd	r7, Y+13	; 0x0d
    1112:	8c 84       	ldd	r8, Y+12	; 0x0c
    1114:	9b 84       	ldd	r9, Y+11	; 0x0b
    1116:	aa 84       	ldd	r10, Y+10	; 0x0a
    1118:	b9 84       	ldd	r11, Y+9	; 0x09
    111a:	c8 84       	ldd	r12, Y+8	; 0x08
    111c:	df 80       	ldd	r13, Y+7	; 0x07
    111e:	ee 80       	ldd	r14, Y+6	; 0x06
    1120:	fd 80       	ldd	r15, Y+5	; 0x05
    1122:	0c 81       	ldd	r16, Y+4	; 0x04
    1124:	1b 81       	ldd	r17, Y+3	; 0x03
    1126:	aa 81       	ldd	r26, Y+2	; 0x02
    1128:	b9 81       	ldd	r27, Y+1	; 0x01
    112a:	ce 0f       	add	r28, r30
    112c:	d1 1d       	adc	r29, r1
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	ed 01       	movw	r28, r26
    1134:	08 95       	ret

00001136 <_exit>:
    1136:	f8 94       	cli

00001138 <__stop_program>:
    1138:	ff cf       	rjmp	.-2      	; 0x1138 <__stop_program>
