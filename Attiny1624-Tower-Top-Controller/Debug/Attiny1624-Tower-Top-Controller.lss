
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00001553  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  00009364  00001364  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000062  00803800  00803800  00001553  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  000015f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003aaf  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024ef  00000000  00000000  0000523f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010e9  00000000  00000000  0000772e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000324  00000000  00000000  00008818  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d80  00000000  00000000  00008b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000925  00000000  00000000  0000a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  0000b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a2 36       	cpi	r26, 0x62	; 98
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 4a 02 	call	0x494	; 0x494 <main>
      98:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 * - Applies timebase for proper sampling setup.
 * - Uses 1024-sample accumulation for noise reduction.
 * - Configures burst mode.
 */
void ADC0_init() {
	ADC0.CTRLA = ADC_ENABLE_bm; ///< Enable ADC
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_PRESC_DIV10_gc; ///< Set ADC clock prescaler to divide by 10
      a8:	84 e0       	ldi	r24, 0x04	; 4
      aa:	81 83       	std	Z+1, r24	; 0x01
	ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp); ///< Set ADC timebase
      ac:	80 ea       	ldi	r24, 0xA0	; 160
      ae:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLE = 0; ///< Set sampling length to 0.5 ADC cycles
      b0:	10 86       	std	Z+8, r1	; 0x08
	ADC0.CTRLF = ADC_SAMPNUM_ACC1024_gc; ///< Accumulate 1024 samples for each result
      b2:	8a e0       	ldi	r24, 0x0A	; 10
      b4:	81 87       	std	Z+9, r24	; 0x09
	ADC0.COMMAND = ADC_MODE_BURST_SCALING_gc; ///< Use burst mode for better averaging
      b6:	80 e5       	ldi	r24, 0x50	; 80
      b8:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait until ADC is ready
      ba:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f71a2>
      be:	80 fd       	sbrc	r24, 0
      c0:	fc cf       	rjmp	.-8      	; 0xba <ADC0_init+0x1a>
}
      c2:	08 95       	ret

000000c4 <ADC0_Read>:
 *
 * @param channel The ADC multiplexer positive input channel.
 * @return 16-bit averaged ADC result.
 */
uint16_t ADC0_Read(uint8_t channel) {
	ADC0.MUXPOS = channel;
      c4:	e0 e0       	ldi	r30, 0x00	; 0
      c6:	f6 e0       	ldi	r31, 0x06	; 6
      c8:	84 87       	std	Z+12, r24	; 0x0c
	ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; ///< Start conversion
      ca:	82 85       	ldd	r24, Z+10	; 0x0a
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	82 87       	std	Z+10, r24	; 0x0a
	while (ADC0.STATUS & ADC_ADCBUSY_bm); ///< Wait for ADC to become ready
      d0:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f71a2>
      d4:	80 fd       	sbrc	r24, 0
      d6:	fc cf       	rjmp	.-8      	; 0xd0 <ADC0_Read+0xc>
	while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm)); ///< Wait until the result is ready
      d8:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f71a1>
      dc:	81 ff       	sbrs	r24, 1
      de:	fc cf       	rjmp	.-8      	; 0xd8 <ADC0_Read+0x14>
	ADC0.INTFLAGS = ADC_SAMPRDY_bm; ///< Clear the sample ready flag
      e0:	e0 e0       	ldi	r30, 0x00	; 0
      e2:	f6 e0       	ldi	r31, 0x06	; 6
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	85 83       	std	Z+5, r24	; 0x05
	return ADC0.SAMPLE; ///< Return averaged result
      e8:	84 89       	ldd	r24, Z+20	; 0x14
      ea:	95 89       	ldd	r25, Z+21	; 0x15
}
      ec:	08 95       	ret

000000ee <ReadSolarCells>:

void ReadSolarCells(solarrcells_t channel) {
      ee:	8f 92       	push	r8
      f0:	9f 92       	push	r9
      f2:	af 92       	push	r10
      f4:	bf 92       	push	r11
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	c8 2f       	mov	r28, r24
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
     102:	82 30       	cpi	r24, 0x02	; 2
     104:	19 f4       	brne	.+6      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	18 e3       	ldi	r17, 0x38	; 56
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
     10c:	0b e2       	ldi	r16, 0x2B	; 43
     10e:	18 e3       	ldi	r17, 0x38	; 56

	if (channel == Current) {
     110:	cb 30       	cpi	r28, 0x0B	; 11
     112:	09 f0       	breq	.+2      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     114:	49 c0       	rjmp	.+146    	; 0x1a8 <__EEPROM_REGION_LENGTH__+0xa8>
		// Current measurement depends on MCU VDD; we need to measure VDD to calibrate range.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_1024MV_gc;
     116:	0f 2e       	mov	r0, r31
     118:	e1 2c       	mov	r14, r1
     11a:	f6 e0       	ldi	r31, 0x06	; 6
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	f7 01       	movw	r30, r14
     122:	82 81       	ldd	r24, Z+2	; 0x02
     124:	88 7f       	andi	r24, 0xF8	; 248
     126:	84 60       	ori	r24, 0x04	; 4
     128:	82 83       	std	Z+2, r24	; 0x02
		float mcuVoltage = 0.25 * ADC0_Read(ADC_MUXPOS_VDDDIV10_gc); ///< VDD = 10 × ADC result × 1.024 / 4096
     12a:	81 e3       	ldi	r24, 0x31	; 49
     12c:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     130:	bc 01       	movw	r22, r24
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e8       	ldi	r20, 0x80	; 128
     140:	5e e3       	ldi	r21, 0x3E	; 62
     142:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
		float koef = mcuVoltage / 409.6;
     146:	2d ec       	ldi	r18, 0xCD	; 205
     148:	3c ec       	ldi	r19, 0xCC	; 204
     14a:	4c ec       	ldi	r20, 0xCC	; 204
     14c:	53 e4       	ldi	r21, 0x43	; 67
     14e:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
     152:	4b 01       	movw	r8, r22
     154:	5c 01       	movw	r10, r24
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_VDD_gc;
     156:	f7 01       	movw	r30, r14
     158:	82 81       	ldd	r24, Z+2	; 0x02
     15a:	88 7f       	andi	r24, 0xF8	; 248
     15c:	82 83       	std	Z+2, r24	; 0x02
		uint16_t current = abs((ADC0_Read(channel)*koef/4)-12); //-0,125A
     15e:	8c 2f       	mov	r24, r28
     160:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     164:	bc 01       	movw	r22, r24
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     16e:	a5 01       	movw	r20, r10
     170:	94 01       	movw	r18, r8
     172:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e8       	ldi	r20, 0x80	; 128
     17c:	5e e3       	ldi	r21, 0x3E	; 62
     17e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e4       	ldi	r20, 0x40	; 64
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 1f 04 	call	0x83e	; 0x83e <__subsf3>
     18e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fixsfsi>
     192:	9b 01       	movw	r18, r22
     194:	77 23       	and	r23, r23
     196:	24 f4       	brge	.+8      	; 0x1a0 <__EEPROM_REGION_LENGTH__+0xa0>
     198:	22 27       	eor	r18, r18
     19a:	33 27       	eor	r19, r19
     19c:	26 1b       	sub	r18, r22
     19e:	37 0b       	sbc	r19, r23
		voltageORcurrent->Result = current /*> TMCS1100_ZERO_I ? current - TMCS1100_ZERO_I : current*/;
     1a0:	f8 01       	movw	r30, r16
     1a2:	20 83       	st	Z, r18
     1a4:	31 83       	std	Z+1, r19	; 0x01
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <__EEPROM_REGION_LENGTH__+0xda>
	}
	else {
		// Voltage measurement uses a fixed 2.048V reference, independent of VDD.
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_2048MV_gc;
     1a8:	e0 e0       	ldi	r30, 0x00	; 0
     1aa:	f6 e0       	ldi	r31, 0x06	; 6
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	88 7f       	andi	r24, 0xF8	; 248
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	82 83       	std	Z+2, r24	; 0x02
		voltageORcurrent->Result = AMC1311_COEF * ADC0_Read(channel);
     1b4:	8c 2f       	mov	r24, r28
     1b6:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC0_Read>
     1ba:	bc 01       	movw	r22, r24
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e4       	ldi	r20, 0x40	; 64
     1ca:	5f e3       	ldi	r21, 0x3F	; 63
     1cc:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     1d0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     1d4:	f8 01       	movw	r30, r16
     1d6:	60 83       	st	Z, r22
     1d8:	71 83       	std	Z+1, r23	; 0x01
	}
}
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	bf 90       	pop	r11
     1e6:	af 90       	pop	r10
     1e8:	9f 90       	pop	r9
     1ea:	8f 90       	pop	r8
     1ec:	08 95       	ret

000001ee <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Wait for external clock change to stable */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm)
     1ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6bff>
     1f2:	88 23       	and	r24, r24
     1f4:	e4 f3       	brlt	.-8      	; 0x1ee <CLOCK_XOSCHF_clock_init>
	{};
	/* Enable external (20 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKSEL_OSC20M_gc);
     1f6:	63 e0       	ldi	r22, 0x03	; 3
     1f8:	80 e6       	ldi	r24, 0x60	; 96
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <ccp_write_io>

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	81 e6       	ldi	r24, 0x61	; 97
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 79 09 	call	0x12f2	; 0x12f2 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     20a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6bff>
     20e:	80 fd       	sbrc	r24, 0
     210:	fc cf       	rjmp	.-8      	; 0x20a <CLOCK_XOSCHF_clock_init+0x1c>
	{};
	/* Configuration complete;*/
}
     212:	08 95       	ret

00000214 <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     218:	8b 01       	movw	r16, r22
     21a:	9c 01       	movw	r18, r24
     21c:	0f 2e       	mov	r0, r31
     21e:	fc e0       	ldi	r31, 0x0C	; 12
     220:	36 95       	lsr	r19
     222:	27 95       	ror	r18
     224:	17 95       	ror	r17
     226:	07 95       	ror	r16
     228:	fa 95       	dec	r31
     22a:	d1 f7       	brne	.-12     	; 0x220 <crc6_mt6701_lookup+0xc>
     22c:	f0 2d       	mov	r31, r0
     22e:	0f 73       	andi	r16, 0x3F	; 63
     230:	11 27       	eor	r17, r17
     232:	22 27       	eor	r18, r18
     234:	33 27       	eor	r19, r19
     236:	f8 01       	movw	r30, r16
     238:	ec 59       	subi	r30, 0x9C	; 156
     23a:	fb 46       	sbci	r31, 0x6B	; 107
     23c:	40 81       	ld	r20, Z
     23e:	8b 01       	movw	r16, r22
     240:	9c 01       	movw	r18, r24
     242:	68 94       	set
     244:	15 f8       	bld	r1, 5
     246:	36 95       	lsr	r19
     248:	27 95       	ror	r18
     24a:	17 95       	ror	r17
     24c:	07 95       	ror	r16
     24e:	16 94       	lsr	r1
     250:	d1 f7       	brne	.-12     	; 0x246 <crc6_mt6701_lookup+0x32>
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	22 27       	eor	r18, r18
     258:	33 27       	eor	r19, r19
     25a:	04 27       	eor	r16, r20
     25c:	f8 01       	movw	r30, r16
     25e:	ec 59       	subi	r30, 0x9C	; 156
     260:	fb 46       	sbci	r31, 0x6B	; 107
     262:	20 81       	ld	r18, Z
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	8f 73       	andi	r24, 0x3F	; 63
     26a:	99 27       	eor	r25, r25
     26c:	aa 27       	eor	r26, r26
     26e:	bb 27       	eor	r27, r27
     270:	82 27       	eor	r24, r18
     272:	fc 01       	movw	r30, r24
     274:	ec 59       	subi	r30, 0x9C	; 156
     276:	fb 46       	sbci	r31, 0x6B	; 107
}
     278:	80 81       	ld	r24, Z
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     280:	cf 93       	push	r28
     282:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     284:	80 81       	ld	r24, Z
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	a2 81       	ldd	r26, Z+2	; 0x02
     28a:	b3 81       	ldd	r27, Z+3	; 0x03
     28c:	c8 2f       	mov	r28, r24
     28e:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	68 94       	set
     296:	15 f8       	bld	r1, 5
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	77 95       	ror	r23
     29e:	67 95       	ror	r22
     2a0:	16 94       	lsr	r1
     2a2:	d1 f7       	brne	.-12     	; 0x298 <MT6701CRC+0x18>
     2a4:	60 83       	st	Z, r22
     2a6:	71 83       	std	Z+1, r23	; 0x01
     2a8:	82 83       	std	Z+2, r24	; 0x02
     2aa:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     2ac:	0e 94 0a 01 	call	0x214	; 0x214 <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	c8 13       	cpse	r28, r24
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <MT6701CRC+0x38>
     2b6:	90 e0       	ldi	r25, 0x00	; 0
}
     2b8:	89 2f       	mov	r24, r25
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     2be:	2f 92       	push	r2
     2c0:	3f 92       	push	r3
     2c2:	4f 92       	push	r4
     2c4:	5f 92       	push	r5
     2c6:	6f 92       	push	r6
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2b 97       	sbiw	r28, 0x0b	; 11
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	c2 2e       	mov	r12, r18
     2ee:	b3 2e       	mov	r11, r19
     2f0:	a4 2e       	mov	r10, r20
     2f2:	95 2e       	mov	r9, r21
     2f4:	86 2e       	mov	r8, r22
     2f6:	77 2e       	mov	r7, r23
     2f8:	68 2e       	mov	r6, r24
     2fa:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2fc:	f2 2e       	mov	r15, r18
     2fe:	03 2f       	mov	r16, r19
     300:	14 2f       	mov	r17, r20
     302:	5a 87       	std	Y+10, r21	; 0x0a
     304:	69 83       	std	Y+1, r22	; 0x01
     306:	b7 2f       	mov	r27, r23
     308:	d8 2e       	mov	r13, r24
     30a:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     310:	14 c0       	rjmp	.+40     	; 0x33a <crc8_cdma2000+0x7c>
        length++;
     312:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     314:	2f 2d       	mov	r18, r15
     316:	30 2f       	mov	r19, r16
     318:	41 2f       	mov	r20, r17
     31a:	5a 85       	ldd	r21, Y+10	; 0x0a
     31c:	69 81       	ldd	r22, Y+1	; 0x01
     31e:	7b 2f       	mov	r23, r27
     320:	8d 2d       	mov	r24, r13
     322:	9e 2d       	mov	r25, r14
     324:	08 e0       	ldi	r16, 0x08	; 8
     326:	0e 94 80 06 	call	0xd00	; 0xd00 <__lshrdi3>
     32a:	f2 2e       	mov	r15, r18
     32c:	03 2f       	mov	r16, r19
     32e:	14 2f       	mov	r17, r20
     330:	5a 87       	std	Y+10, r21	; 0x0a
     332:	69 83       	std	Y+1, r22	; 0x01
     334:	b7 2f       	mov	r27, r23
     336:	d8 2e       	mov	r13, r24
     338:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     33a:	2f 2d       	mov	r18, r15
     33c:	30 2f       	mov	r19, r16
     33e:	41 2f       	mov	r20, r17
     340:	5a 85       	ldd	r21, Y+10	; 0x0a
     342:	69 81       	ldd	r22, Y+1	; 0x01
     344:	7b 2f       	mov	r23, r27
     346:	8d 2d       	mov	r24, r13
     348:	9e 2d       	mov	r25, r14
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	0e 94 9c 06 	call	0xd38	; 0xd38 <__cmpdi2_s8>
     350:	01 f7       	brne	.-64     	; 0x312 <crc8_cdma2000+0x54>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	8a 87       	std	Y+10, r24	; 0x0a
     356:	cb 86       	std	Y+11, r12	; 0x0b
     358:	b9 82       	std	Y+1, r11	; 0x01
     35a:	4a 2c       	mov	r4, r10
     35c:	39 2c       	mov	r3, r9
     35e:	28 2c       	mov	r2, r8
     360:	1a c0       	rjmp	.+52     	; 0x396 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     362:	8d 01       	movw	r16, r26
     364:	00 0f       	add	r16, r16
     366:	11 1f       	adc	r17, r17
     368:	00 0f       	add	r16, r16
     36a:	11 1f       	adc	r17, r17
     36c:	00 0f       	add	r16, r16
     36e:	11 1f       	adc	r17, r17
     370:	2b 85       	ldd	r18, Y+11	; 0x0b
     372:	39 81       	ldd	r19, Y+1	; 0x01
     374:	44 2d       	mov	r20, r4
     376:	53 2d       	mov	r21, r3
     378:	62 2d       	mov	r22, r2
     37a:	77 2d       	mov	r23, r7
     37c:	86 2d       	mov	r24, r6
     37e:	95 2d       	mov	r25, r5
     380:	0e 94 80 06 	call	0xd00	; 0xd00 <__lshrdi3>
     384:	8a 84       	ldd	r8, Y+10	; 0x0a
     386:	82 26       	eor	r8, r18
     388:	91 2c       	mov	r9, r1
     38a:	f4 01       	movw	r30, r8
     38c:	ec 59       	subi	r30, 0x9C	; 156
     38e:	fc 46       	sbci	r31, 0x6C	; 108
     390:	80 81       	ld	r24, Z
     392:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     394:	fd 01       	movw	r30, r26
     396:	df 01       	movw	r26, r30
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	ef 2b       	or	r30, r31
     39c:	11 f7       	brne	.-60     	; 0x362 <crc8_cdma2000+0xa4>
     39e:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     3a0:	2b 96       	adiw	r28, 0x0b	; 11
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	6f 90       	pop	r6
     3c2:	5f 90       	pop	r5
     3c4:	4f 90       	pop	r4
     3c6:	3f 90       	pop	r3
     3c8:	2f 90       	pop	r2
     3ca:	08 95       	ret

000003cc <FIR>:
 * - The new measurement is added to a circular buffer.
 * - The filtered result is calculated as the average of all samples in the buffer.
 *
 * @param channel Specifies whether to process voltage or current (Voltage or Current).
 */
void FIR(solarrcells_t channel) {
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	c8 2f       	mov	r28, r24
	ReadSolarCells(channel); ///< Read raw measurement from the selected ADC channel
     3d2:	0e 94 77 00 	call	0xee	; 0xee <ReadSolarCells>

	// Select target ADC_VALUES structure based on the channel (voltage or current)
	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent;
     3d6:	c2 30       	cpi	r28, 0x02	; 2
     3d8:	19 f4       	brne	.+6      	; 0x3e0 <FIR+0x14>
     3da:	c0 e0       	ldi	r28, 0x00	; 0
     3dc:	d8 e3       	ldi	r29, 0x38	; 56
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <FIR+0x18>
     3e0:	cb e2       	ldi	r28, 0x2B	; 43
     3e2:	d8 e3       	ldi	r29, 0x38	; 56

	// Store the latest measurement into the filter buffer at the current index
	voltageORcurrent->Filter[voltageORcurrent->index] = voltageORcurrent->Result;
     3e4:	ea a5       	ldd	r30, Y+42	; 0x2a
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ec 0f       	add	r30, r28
     3f4:	fd 1f       	adc	r31, r29
     3f6:	80 83       	st	Z, r24
     3f8:	91 83       	std	Z+1, r25	; 0x01

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;
     3fa:	8a a5       	ldd	r24, Y+42	; 0x2a
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	64 e1       	ldi	r22, 0x14	; 20
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__divmodhi4>
     408:	8a a7       	std	Y+42, r24	; 0x2a

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     40a:	80 e0       	ldi	r24, 0x00	; 0

	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	ba 01       	movw	r22, r20
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     412:	0e c0       	rjmp	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		sum += voltageORcurrent->Filter[i];
     414:	e8 2f       	mov	r30, r24
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	31 96       	adiw	r30, 0x01	; 1
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	ec 0f       	add	r30, r28
     420:	fd 1f       	adc	r31, r29
     422:	20 81       	ld	r18, Z
     424:	31 81       	ldd	r19, Z+1	; 0x01
     426:	42 0f       	add	r20, r18
     428:	53 1f       	adc	r21, r19
     42a:	61 1d       	adc	r22, r1
     42c:	71 1d       	adc	r23, r1
	// Update the index (circular buffer behavior)
	voltageORcurrent->index = (voltageORcurrent->index + 1) % FIR_STEPS;

	// Calculate the sum of all values in the buffer
	uint32_t sum = 0; ///< uint32_t is sufficient to store sum of up to 65535 uint16_t values
	for (uint8_t i = 0; i < FIR_STEPS; i++) {
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	84 31       	cpi	r24, 0x14	; 20
     432:	80 f3       	brcs	.-32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		sum += voltageORcurrent->Filter[i];
	}

	// Store the filtered result as the average of the buffer
	voltageORcurrent->Result = sum / FIR_STEPS;
     434:	cb 01       	movw	r24, r22
     436:	ba 01       	movw	r22, r20
     438:	24 e1       	ldi	r18, 0x14	; 20
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	0e 94 43 06 	call	0xc86	; 0xc86 <__udivmodsi4>
     444:	28 83       	st	Y, r18
     446:	39 83       	std	Y+1, r19	; 0x01
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     44e:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f717e>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b4 e0       	ldi	r27, 0x04	; 4
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	11 96       	adiw	r26, 0x01	; 1
     45a:	8c 93       	st	X, r24
     45c:	11 97       	sbiw	r26, 0x01	; 1
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	52 96       	adiw	r26, 0x12	; 18
     462:	8c 93       	st	X, r24
     464:	52 97       	sbiw	r26, 0x12	; 18
    PORTB.DIRCLR =  PIN3_bm; ///< PB3 as input (USART0 RX as MISO (MT6701 DO))	
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	8c 93       	st	X, r24
     46a:	12 97       	sbiw	r26, 0x02	; 2
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     46c:	53 96       	adiw	r26, 0x13	; 19
     46e:	8c 93       	st	X, r24
     470:	53 97       	sbiw	r26, 0x13	; 19

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     472:	e0 e0       	ldi	r30, 0x00	; 0
     474:	f4 e0       	ldi	r31, 0x04	; 4
     476:	92 ec       	ldi	r25, 0xC2	; 194
     478:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_INVEN_bm; ///< Invert for PA1 (USART1 TX LED TX) to save LED life and consumed energy
     47a:	90 e8       	ldi	r25, 0x80	; 128
     47c:	91 8b       	std	Z+17, r25	; 0x11
	PORTA.DIRCLR = PIN4_bm | PIN5_bm; ///< Set PA4 as input (Y MAX), Set PB0 as input (Y MIN)
     47e:	90 e3       	ldi	r25, 0x30	; 48
     480:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     482:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA5 (Y MIN)
     484:	85 8b       	std	Z+21, r24	; 0x15
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     486:	80 ec       	ldi	r24, 0xC0	; 192
     488:	85 83       	std	Z+5, r24	; 0x05

	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PB0 (SC Current)
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	50 96       	adiw	r26, 0x10	; 16
     48e:	8c 93       	st	X, r24
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA2 (SC Voltage)
     490:	82 8b       	std	Z+18, r24	; 0x12
     492:	08 95       	ret

00000494 <main>:
 * @return int (not used, since the function never exits).
 */

int main(void)
{
	CLOCK_XOSCHF_clock_init(); ///< Initialize exteral system clock
     494:	0e 94 f7 00 	call	0x1ee	; 0x1ee <CLOCK_XOSCHF_clock_init>
    //CLOCK_INHF_clock_init(); 
    GPIO_init(); ///< Initialize GPIO pins
     498:	0e 94 27 02 	call	0x44e	; 0x44e <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     49c:	0e 94 9b 03 	call	0x736	; 0x736 <USART0_init>
	USART1_init();
     4a0:	0e 94 c0 03 	call	0x780	; 0x780 <USART1_init>
	ADC0_init();
     4a4:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
		//Test for extenal- internal clock
		//PORTA.OUTTGL = PIN1_bm;
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     4a8:	80 e8       	ldi	r24, 0x80	; 128
     4aa:	0e 94 07 03 	call	0x60e	; 0x60e <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     4ae:	80 e4       	ldi	r24, 0x40	; 64
     4b0:	0e 94 07 03 	call	0x60e	; 0x60e <MT6701_SSI_Angle>
		//ReadSolarCells(Voltage); //uncomment if filtration no needded
		//ReadSolarCells(Current); //uncomment if filtration no needded
		FIR(Voltage); //comment if using ReadSolarCells(Voltage);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <FIR>
		FIR(Current); //comment if using ReadSolarCells(Current);
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <FIR>
		uint8_t y = YEndSwitches();
     4c0:	0e 94 0e 04 	call	0x81c	; 0x81c <YEndSwitches>
     4c4:	38 2e       	mov	r3, r24

		Swap_Angle_Direction(Azimuth_Angle); // Change angle direction
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	0e 94 8b 03 	call	0x716	; 0x716 <Swap_Angle_Direction>
		Swap_Angle_Direction(Elevation_Angle); // change angle direction
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	0e 94 8b 03 	call	0x716	; 0x716 <Swap_Angle_Direction>

		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);
     4d2:	cc e5       	ldi	r28, 0x5C	; 92
     4d4:	d8 e3       	ldi	r29, 0x38	; 56
     4d6:	88 80       	ld	r8, Y
     4d8:	99 80       	ldd	r9, Y+1	; 0x01
     4da:	28 2d       	mov	r18, r8
     4dc:	39 2d       	mov	r19, r9
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0c e2       	ldi	r16, 0x2C	; 44
     4ec:	0e 94 65 06 	call	0xcca	; 0xcca <__ashldi3>
     4f0:	92 2e       	mov	r9, r18
     4f2:	a3 2e       	mov	r10, r19
     4f4:	b4 2e       	mov	r11, r20
     4f6:	15 2f       	mov	r17, r21
     4f8:	c6 2e       	mov	r12, r22
     4fa:	d7 2e       	mov	r13, r23
     4fc:	f8 2f       	mov	r31, r24
     4fe:	e9 2f       	mov	r30, r25
     500:	0f 2e       	mov	r0, r31
     502:	f6 e5       	ldi	r31, 0x56	; 86
     504:	ef 2e       	mov	r14, r31
     506:	f8 e3       	ldi	r31, 0x38	; 56
     508:	ff 2e       	mov	r15, r31
     50a:	f0 2d       	mov	r31, r0
     50c:	d7 01       	movw	r26, r14
     50e:	4d 91       	ld	r20, X+
     510:	5c 91       	ld	r21, X
     512:	24 2f       	mov	r18, r20
     514:	35 2f       	mov	r19, r21
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0c e1       	ldi	r16, 0x1C	; 28
     524:	0e 94 65 06 	call	0xcca	; 0xcca <__ashldi3>
     528:	92 2a       	or	r9, r18
     52a:	a3 2a       	or	r10, r19
     52c:	b4 2a       	or	r11, r20
     52e:	15 2b       	or	r17, r21
     530:	7c 2c       	mov	r7, r12
     532:	76 2a       	or	r7, r22
     534:	8d 2c       	mov	r8, r13
     536:	87 2a       	or	r8, r23
     538:	f8 2b       	or	r31, r24
     53a:	e9 2b       	or	r30, r25
     53c:	0f 2e       	mov	r0, r31
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	cf 2e       	mov	r12, r31
     542:	f8 e3       	ldi	r31, 0x38	; 56
     544:	df 2e       	mov	r13, r31
     546:	f0 2d       	mov	r31, r0
     548:	d6 01       	movw	r26, r12
     54a:	8d 91       	ld	r24, X+
     54c:	9c 91       	ld	r25, X
     54e:	ac 01       	movw	r20, r24
     550:	24 2f       	mov	r18, r20
     552:	35 2f       	mov	r19, r21
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	00 e1       	ldi	r16, 0x10	; 16
     562:	0e 94 65 06 	call	0xcca	; 0xcca <__ashldi3>
     566:	29 29       	or	r18, r9
     568:	3a 29       	or	r19, r10
     56a:	4b 29       	or	r20, r11
     56c:	51 2b       	or	r21, r17
     56e:	67 29       	or	r22, r7
     570:	78 29       	or	r23, r8
     572:	0b e2       	ldi	r16, 0x2B	; 43
     574:	18 e3       	ldi	r17, 0x38	; 56
     576:	d8 01       	movw	r26, r16
     578:	4d 90       	ld	r4, X+
     57a:	5c 90       	ld	r5, X
     57c:	61 2c       	mov	r6, r1
     57e:	71 2c       	mov	r7, r1
     580:	44 0c       	add	r4, r4
     582:	55 1c       	adc	r5, r5
     584:	66 1c       	adc	r6, r6
     586:	77 1c       	adc	r7, r7
     588:	44 0c       	add	r4, r4
     58a:	55 1c       	adc	r5, r5
     58c:	66 1c       	adc	r6, r6
     58e:	77 1c       	adc	r7, r7
     590:	44 0c       	add	r4, r4
     592:	55 1c       	adc	r5, r5
     594:	66 1c       	adc	r6, r6
     596:	77 1c       	adc	r7, r7
     598:	44 0c       	add	r4, r4
     59a:	55 1c       	adc	r5, r5
     59c:	66 1c       	adc	r6, r6
     59e:	77 1c       	adc	r7, r7
     5a0:	24 29       	or	r18, r4
     5a2:	35 29       	or	r19, r5
     5a4:	46 29       	or	r20, r6
     5a6:	57 29       	or	r21, r7
     5a8:	23 29       	or	r18, r3
     5aa:	8f 2b       	or	r24, r31
     5ac:	9e 2b       	or	r25, r30
     5ae:	0e 94 5f 01 	call	0x2be	; 0x2be <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits) with changed direction
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     5b2:	f8 01       	movw	r30, r16
     5b4:	70 81       	ld	r23, Z
     5b6:	e1 81       	ldd	r30, Z+1	; 0x01

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits) with changed direction
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     5b8:	d6 01       	movw	r26, r12
     5ba:	5c 91       	ld	r21, X
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	6c 91       	ld	r22, X
		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits) with changed direction
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     5c0:	d7 01       	movw	r26, r14
     5c2:	3c 91       	ld	r19, X
     5c4:	11 96       	adiw	r26, 0x01	; 1
     5c6:	4c 91       	ld	r20, X

		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits) with changed direction
     5c8:	98 81       	ld	r25, Y
     5ca:	29 81       	ldd	r18, Y+1	; 0x01
		Swap_Angle_Direction(Elevation_Angle); // change angle direction

		uint8_t crc8 = crc8_cdma2000(((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y);

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     5cc:	1f 92       	push	r1
     5ce:	8f 93       	push	r24
     5d0:	1f 92       	push	r1
     5d2:	3f 92       	push	r3
     5d4:	ef 93       	push	r30
     5d6:	7f 93       	push	r23
     5d8:	6f 93       	push	r22
     5da:	5f 93       	push	r21
     5dc:	4f 93       	push	r20
     5de:	3f 93       	push	r19
     5e0:	2f 93       	push	r18
     5e2:	9f 93       	push	r25
     5e4:	84 ea       	ldi	r24, 0xA4	; 164
     5e6:	94 e9       	ldi	r25, 0x94	; 148
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	bf e7       	ldi	r27, 0x7F	; 127
     5f2:	ea e1       	ldi	r30, 0x1A	; 26
     5f4:	f6 e0       	ldi	r31, 0x06	; 6
     5f6:	b1 50       	subi	r27, 0x01	; 1
     5f8:	e0 40       	sbci	r30, 0x00	; 0
     5fa:	f0 40       	sbci	r31, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x162>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x16c>
     600:	00 00       	nop
     602:	8d b7       	in	r24, 0x3d	; 61
     604:	9e b7       	in	r25, 0x3e	; 62
     606:	0e 96       	adiw	r24, 0x0e	; 14
     608:	8d bf       	out	0x3d, r24	; 61
     60a:	9e bf       	out	0x3e, r25	; 62
     60c:	4d cf       	rjmp	.-358    	; 0x4a8 <main+0x14>

0000060e <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <MT6701_SSI_Angle+0xa>
     618:	00 d0       	rcall	.+0      	; 0x61a <MT6701_SSI_Angle+0xc>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	1a 82       	std	Y+2, r1	; 0x02
     624:	1b 82       	std	Y+3, r1	; 0x03
     626:	1c 82       	std	Y+4, r1	; 0x04
    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     628:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f6fa2>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	1b c0       	rjmp	.+54     	; 0x666 <MT6701_SSI_Angle+0x58>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     630:	8f e6       	ldi	r24, 0x6F	; 111
     632:	0e 94 a6 03 	call	0x74c	; 0x74c <USART0_sendChar>
        received_data <<= 8; ///< Shift previous data left by 8 bits
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	ab 81       	ldd	r26, Y+3	; 0x03
     63c:	bc 81       	ldd	r27, Y+4	; 0x04
     63e:	ba 2f       	mov	r27, r26
     640:	a9 2f       	mov	r26, r25
     642:	98 2f       	mov	r25, r24
     644:	88 27       	eor	r24, r24
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	ab 83       	std	Y+3, r26	; 0x03
     64c:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     64e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART0_readChar>
     652:	49 81       	ldd	r20, Y+1	; 0x01
     654:	5a 81       	ldd	r21, Y+2	; 0x02
     656:	6b 81       	ldd	r22, Y+3	; 0x03
     658:	7c 81       	ldd	r23, Y+4	; 0x04
     65a:	48 2b       	or	r20, r24
     65c:	49 83       	std	Y+1, r20	; 0x01
     65e:	5a 83       	std	Y+2, r21	; 0x02
     660:	6b 83       	std	Y+3, r22	; 0x03
     662:	7c 83       	std	Y+4, r23	; 0x04
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;
    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     664:	1f 5f       	subi	r17, 0xFF	; 255
     666:	13 30       	cpi	r17, 0x03	; 3
     668:	18 f3       	brcs	.-58     	; 0x630 <MT6701_SSI_Angle+0x22>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     66a:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f6fa1>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     66e:	00 38       	cpi	r16, 0x80	; 128
     670:	19 f4       	brne	.+6      	; 0x678 <MT6701_SSI_Angle+0x6a>
     672:	0c e5       	ldi	r16, 0x5C	; 92
     674:	18 e3       	ldi	r17, 0x38	; 56
     676:	02 c0       	rjmp	.+4      	; 0x67c <MT6701_SSI_Angle+0x6e>
     678:	06 e5       	ldi	r16, 0x56	; 86
     67a:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 40 01 	call	0x280	; 0x280 <MT6701CRC>
     684:	f8 01       	movw	r30, r16
     686:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	83 70       	andi	r24, 0x03	; 3
     68c:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	ab 81       	ldd	r26, Y+3	; 0x03
     694:	bc 81       	ldd	r27, Y+4	; 0x04
     696:	b6 95       	lsr	r27
     698:	a7 95       	ror	r26
     69a:	97 95       	ror	r25
     69c:	87 95       	ror	r24
     69e:	b6 95       	lsr	r27
     6a0:	a7 95       	ror	r26
     6a2:	97 95       	ror	r25
     6a4:	87 95       	ror	r24
     6a6:	81 70       	andi	r24, 0x01	; 1
     6a8:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	ab 81       	ldd	r26, Y+3	; 0x03
     6b0:	bc 81       	ldd	r27, Y+4	; 0x04
     6b2:	ac 01       	movw	r20, r24
     6b4:	bd 01       	movw	r22, r26
     6b6:	68 94       	set
     6b8:	12 f8       	bld	r1, 2
     6ba:	76 95       	lsr	r23
     6bc:	67 95       	ror	r22
     6be:	57 95       	ror	r21
     6c0:	47 95       	ror	r20
     6c2:	16 94       	lsr	r1
     6c4:	d1 f7       	brne	.-12     	; 0x6ba <MT6701_SSI_Angle+0xac>
     6c6:	24 2f       	mov	r18, r20
     6c8:	21 70       	andi	r18, 0x01	; 1
     6ca:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     6cc:	bc 01       	movw	r22, r24
     6ce:	cd 01       	movw	r24, r26
     6d0:	68 94       	set
     6d2:	13 f8       	bld	r1, 3
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	77 95       	ror	r23
     6da:	67 95       	ror	r22
     6dc:	16 94       	lsr	r1
     6de:	d1 f7       	brne	.-12     	; 0x6d4 <MT6701_SSI_Angle+0xc6>
     6e0:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     6e4:	23 e5       	ldi	r18, 0x53	; 83
     6e6:	34 e0       	ldi	r19, 0x04	; 4
     6e8:	49 ee       	ldi	r20, 0xE9	; 233
     6ea:	5e e3       	ldi	r21, 0x3E	; 62
     6ec:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	5f e3       	ldi	r21, 0x3F	; 63
     6f8:	0e 94 20 04 	call	0x840	; 0x840 <__addsf3>
     6fc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     700:	f8 01       	movw	r30, r16
     702:	60 83       	st	Z, r22
     704:	71 83       	std	Z+1, r23	; 0x01
}
     706:	24 96       	adiw	r28, 0x04	; 4
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	08 95       	ret

00000716 <Swap_Angle_Direction>:

void Swap_Angle_Direction (angleChannel_t channel){
	AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     716:	80 38       	cpi	r24, 0x80	; 128
     718:	19 f4       	brne	.+6      	; 0x720 <Swap_Angle_Direction+0xa>
     71a:	ec e5       	ldi	r30, 0x5C	; 92
     71c:	f8 e3       	ldi	r31, 0x38	; 56
     71e:	02 c0       	rjmp	.+4      	; 0x724 <Swap_Angle_Direction+0xe>
     720:	e6 e5       	ldi	r30, 0x56	; 86
     722:	f8 e3       	ldi	r31, 0x38	; 56
	sensor->Angle = 36000-sensor->Angle;
     724:	20 81       	ld	r18, Z
     726:	31 81       	ldd	r19, Z+1	; 0x01
     728:	80 ea       	ldi	r24, 0xA0	; 160
     72a:	9c e8       	ldi	r25, 0x8C	; 140
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	80 83       	st	Z, r24
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	08 95       	ret

00000736 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     736:	e0 e0       	ldi	r30, 0x00	; 0
     738:	f8 e0       	ldi	r31, 0x08	; 8
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	95 e0       	ldi	r25, 0x05	; 5
     73e:	80 87       	std	Z+8, r24	; 0x08
     740:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     742:	80 ec       	ldi	r24, 0xC0	; 192
     744:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     746:	82 ec       	ldi	r24, 0xC2	; 194
     748:	87 83       	std	Z+7, r24	; 0x07
     74a:	08 95       	ret

0000074c <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     74c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f73a0>
     750:	95 ff       	sbrs	r25, 5
     752:	fc cf       	rjmp	.-8      	; 0x74c <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     754:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f739e>
     758:	08 95       	ret

0000075a <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     75a:	80 e8       	ldi	r24, 0x80	; 128
     75c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f73a0>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	9c e9       	ldi	r25, 0x9C	; 156
     764:	a0 e0       	ldi	r26, 0x00	; 0
     766:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     768:	04 c0       	rjmp	.+8      	; 0x772 <USART0_readChar+0x18>
        if (--timeout_counter == 0) { // Timeout condition
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	a1 09       	sbc	r26, r1
     76e:	b1 09       	sbc	r27, r1
     770:	21 f0       	breq	.+8      	; 0x77a <USART0_readChar+0x20>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     772:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f73a0>
     776:	22 23       	and	r18, r18
     778:	c4 f7       	brge	.-16     	; 0x76a <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
           // Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     77a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f739c>
}
     77e:	08 95       	ret

00000780 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(460800); // Set baud rate to 0.4608M
     780:	e0 e2       	ldi	r30, 0x20	; 32
     782:	f8 e0       	ldi	r31, 0x08	; 8
     784:	8b e5       	ldi	r24, 0x5B	; 91
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	80 87       	std	Z+8, r24	; 0x08
     78a:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     78c:	82 e4       	ldi	r24, 0x42	; 66
     78e:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	87 83       	std	Z+7, r24	; 0x07
     794:	08 95       	ret

00000796 <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     796:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f73c0>
     79a:	95 ff       	sbrs	r25, 5
     79c:	fc cf       	rjmp	.-8      	; 0x796 <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     79e:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f73be>
     7a2:	08 95       	ret

000007a4 <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
     7b0:	d0 e0       	ldi	r29, 0x00	; 0
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     7b4:	f8 01       	movw	r30, r16
     7b6:	ec 0f       	add	r30, r28
     7b8:	fd 1f       	adc	r31, r29
     7ba:	80 81       	ld	r24, Z
     7bc:	0e 94 cb 03 	call	0x796	; 0x796 <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     7c0:	21 96       	adiw	r28, 0x01	; 1
     7c2:	f8 01       	movw	r30, r16
     7c4:	01 90       	ld	r0, Z+
     7c6:	00 20       	and	r0, r0
     7c8:	e9 f7       	brne	.-6      	; 0x7c4 <USART1_sendString+0x20>
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	e0 1b       	sub	r30, r16
     7ce:	f1 0b       	sbc	r31, r17
     7d0:	ce 17       	cp	r28, r30
     7d2:	df 07       	cpc	r29, r31
     7d4:	78 f3       	brcs	.-34     	; 0x7b4 <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	6e 97       	sbiw	r28, 0x1e	; 30
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	9e 01       	movw	r18, r28
     7f0:	2d 5d       	subi	r18, 0xDD	; 221
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	f9 01       	movw	r30, r18
     7f6:	41 91       	ld	r20, Z+
     7f8:	51 91       	ld	r21, Z+
     7fa:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     7fc:	6e e1       	ldi	r22, 0x1E	; 30
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	0e 94 bc 06 	call	0xd78	; 0xd78 <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <USART1_sendString>
     810:	6e 96       	adiw	r28, 0x1e	; 30
     812:	cd bf       	out	0x3d, r28	; 61
     814:	de bf       	out	0x3e, r29	; 62
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTA.IN & PIN5_bm)) | ((!(PORTA.IN & PIN4_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values) and it will be 0,1,2,3
     81c:	e0 e0       	ldi	r30, 0x00	; 0
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	80 85       	ldd	r24, Z+8	; 0x08
     822:	82 95       	swap	r24
     824:	86 95       	lsr	r24
     826:	87 70       	andi	r24, 0x07	; 7
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	89 27       	eor	r24, r25
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	90 85       	ldd	r25, Z+8	; 0x08
     830:	94 fd       	sbrc	r25, 4
     832:	02 c0       	rjmp	.+4      	; 0x838 <YEndSwitches+0x1c>
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	01 c0       	rjmp	.+2      	; 0x83a <YEndSwitches+0x1e>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	08 95       	ret

0000083e <__subsf3>:
     83e:	50 58       	subi	r21, 0x80	; 128

00000840 <__addsf3>:
     840:	bb 27       	eor	r27, r27
     842:	aa 27       	eor	r26, r26
     844:	0e 94 37 04 	call	0x86e	; 0x86e <__addsf3x>
     848:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
     84c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
     850:	38 f0       	brcs	.+14     	; 0x860 <__addsf3+0x20>
     852:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
     856:	20 f0       	brcs	.+8      	; 0x860 <__addsf3+0x20>
     858:	39 f4       	brne	.+14     	; 0x868 <__addsf3+0x28>
     85a:	9f 3f       	cpi	r25, 0xFF	; 255
     85c:	19 f4       	brne	.+6      	; 0x864 <__addsf3+0x24>
     85e:	26 f4       	brtc	.+8      	; 0x868 <__addsf3+0x28>
     860:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
     864:	0e f4       	brtc	.+2      	; 0x868 <__addsf3+0x28>
     866:	e0 95       	com	r30
     868:	e7 fb       	bst	r30, 7
     86a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>

0000086e <__addsf3x>:
     86e:	e9 2f       	mov	r30, r25
     870:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
     874:	58 f3       	brcs	.-42     	; 0x84c <__addsf3+0xc>
     876:	ba 17       	cp	r27, r26
     878:	62 07       	cpc	r22, r18
     87a:	73 07       	cpc	r23, r19
     87c:	84 07       	cpc	r24, r20
     87e:	95 07       	cpc	r25, r21
     880:	20 f0       	brcs	.+8      	; 0x88a <__addsf3x+0x1c>
     882:	79 f4       	brne	.+30     	; 0x8a2 <__addsf3x+0x34>
     884:	a6 f5       	brtc	.+104    	; 0x8ee <__addsf3x+0x80>
     886:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_zero>
     88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3x+0x20>
     88c:	e0 95       	com	r30
     88e:	0b 2e       	mov	r0, r27
     890:	ba 2f       	mov	r27, r26
     892:	a0 2d       	mov	r26, r0
     894:	0b 01       	movw	r0, r22
     896:	b9 01       	movw	r22, r18
     898:	90 01       	movw	r18, r0
     89a:	0c 01       	movw	r0, r24
     89c:	ca 01       	movw	r24, r20
     89e:	a0 01       	movw	r20, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	ff 27       	eor	r31, r31
     8a4:	59 1b       	sub	r21, r25
     8a6:	99 f0       	breq	.+38     	; 0x8ce <__addsf3x+0x60>
     8a8:	59 3f       	cpi	r21, 0xF9	; 249
     8aa:	50 f4       	brcc	.+20     	; 0x8c0 <__addsf3x+0x52>
     8ac:	50 3e       	cpi	r21, 0xE0	; 224
     8ae:	68 f1       	brcs	.+90     	; 0x90a <__addsf3x+0x9c>
     8b0:	1a 16       	cp	r1, r26
     8b2:	f0 40       	sbci	r31, 0x00	; 0
     8b4:	a2 2f       	mov	r26, r18
     8b6:	23 2f       	mov	r18, r19
     8b8:	34 2f       	mov	r19, r20
     8ba:	44 27       	eor	r20, r20
     8bc:	58 5f       	subi	r21, 0xF8	; 248
     8be:	f3 cf       	rjmp	.-26     	; 0x8a6 <__addsf3x+0x38>
     8c0:	46 95       	lsr	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	a7 95       	ror	r26
     8c8:	f0 40       	sbci	r31, 0x00	; 0
     8ca:	53 95       	inc	r21
     8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__addsf3x+0x52>
     8ce:	7e f4       	brtc	.+30     	; 0x8ee <__addsf3x+0x80>
     8d0:	1f 16       	cp	r1, r31
     8d2:	ba 0b       	sbc	r27, r26
     8d4:	62 0b       	sbc	r22, r18
     8d6:	73 0b       	sbc	r23, r19
     8d8:	84 0b       	sbc	r24, r20
     8da:	ba f0       	brmi	.+46     	; 0x90a <__addsf3x+0x9c>
     8dc:	91 50       	subi	r25, 0x01	; 1
     8de:	a1 f0       	breq	.+40     	; 0x908 <__addsf3x+0x9a>
     8e0:	ff 0f       	add	r31, r31
     8e2:	bb 1f       	adc	r27, r27
     8e4:	66 1f       	adc	r22, r22
     8e6:	77 1f       	adc	r23, r23
     8e8:	88 1f       	adc	r24, r24
     8ea:	c2 f7       	brpl	.-16     	; 0x8dc <__addsf3x+0x6e>
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__addsf3x+0x9c>
     8ee:	ba 0f       	add	r27, r26
     8f0:	62 1f       	adc	r22, r18
     8f2:	73 1f       	adc	r23, r19
     8f4:	84 1f       	adc	r24, r20
     8f6:	48 f4       	brcc	.+18     	; 0x90a <__addsf3x+0x9c>
     8f8:	87 95       	ror	r24
     8fa:	77 95       	ror	r23
     8fc:	67 95       	ror	r22
     8fe:	b7 95       	ror	r27
     900:	f7 95       	ror	r31
     902:	9e 3f       	cpi	r25, 0xFE	; 254
     904:	08 f0       	brcs	.+2      	; 0x908 <__addsf3x+0x9a>
     906:	b0 cf       	rjmp	.-160    	; 0x868 <__addsf3+0x28>
     908:	93 95       	inc	r25
     90a:	88 0f       	add	r24, r24
     90c:	08 f0       	brcs	.+2      	; 0x910 <__addsf3x+0xa2>
     90e:	99 27       	eor	r25, r25
     910:	ee 0f       	add	r30, r30
     912:	97 95       	ror	r25
     914:	87 95       	ror	r24
     916:	08 95       	ret

00000918 <__divsf3>:
     918:	0e 94 a0 04 	call	0x940	; 0x940 <__divsf3x>
     91c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
     920:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
     924:	58 f0       	brcs	.+22     	; 0x93c <__divsf3+0x24>
     926:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
     92a:	40 f0       	brcs	.+16     	; 0x93c <__divsf3+0x24>
     92c:	29 f4       	brne	.+10     	; 0x938 <__divsf3+0x20>
     92e:	5f 3f       	cpi	r21, 0xFF	; 255
     930:	29 f0       	breq	.+10     	; 0x93c <__divsf3+0x24>
     932:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
     936:	51 11       	cpse	r21, r1
     938:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
     93c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>

00000940 <__divsf3x>:
     940:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
     944:	68 f3       	brcs	.-38     	; 0x920 <__divsf3+0x8>

00000946 <__divsf3_pse>:
     946:	99 23       	and	r25, r25
     948:	b1 f3       	breq	.-20     	; 0x936 <__divsf3+0x1e>
     94a:	55 23       	and	r21, r21
     94c:	91 f3       	breq	.-28     	; 0x932 <__divsf3+0x1a>
     94e:	95 1b       	sub	r25, r21
     950:	55 0b       	sbc	r21, r21
     952:	bb 27       	eor	r27, r27
     954:	aa 27       	eor	r26, r26
     956:	62 17       	cp	r22, r18
     958:	73 07       	cpc	r23, r19
     95a:	84 07       	cpc	r24, r20
     95c:	38 f0       	brcs	.+14     	; 0x96c <__divsf3_pse+0x26>
     95e:	9f 5f       	subi	r25, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	22 0f       	add	r18, r18
     964:	33 1f       	adc	r19, r19
     966:	44 1f       	adc	r20, r20
     968:	aa 1f       	adc	r26, r26
     96a:	a9 f3       	breq	.-22     	; 0x956 <__divsf3_pse+0x10>
     96c:	35 d0       	rcall	.+106    	; 0x9d8 <__divsf3_pse+0x92>
     96e:	0e 2e       	mov	r0, r30
     970:	3a f0       	brmi	.+14     	; 0x980 <__divsf3_pse+0x3a>
     972:	e0 e8       	ldi	r30, 0x80	; 128
     974:	32 d0       	rcall	.+100    	; 0x9da <__divsf3_pse+0x94>
     976:	91 50       	subi	r25, 0x01	; 1
     978:	50 40       	sbci	r21, 0x00	; 0
     97a:	e6 95       	lsr	r30
     97c:	00 1c       	adc	r0, r0
     97e:	ca f7       	brpl	.-14     	; 0x972 <__divsf3_pse+0x2c>
     980:	2b d0       	rcall	.+86     	; 0x9d8 <__divsf3_pse+0x92>
     982:	fe 2f       	mov	r31, r30
     984:	29 d0       	rcall	.+82     	; 0x9d8 <__divsf3_pse+0x92>
     986:	66 0f       	add	r22, r22
     988:	77 1f       	adc	r23, r23
     98a:	88 1f       	adc	r24, r24
     98c:	bb 1f       	adc	r27, r27
     98e:	26 17       	cp	r18, r22
     990:	37 07       	cpc	r19, r23
     992:	48 07       	cpc	r20, r24
     994:	ab 07       	cpc	r26, r27
     996:	b0 e8       	ldi	r27, 0x80	; 128
     998:	09 f0       	breq	.+2      	; 0x99c <__divsf3_pse+0x56>
     99a:	bb 0b       	sbc	r27, r27
     99c:	80 2d       	mov	r24, r0
     99e:	bf 01       	movw	r22, r30
     9a0:	ff 27       	eor	r31, r31
     9a2:	93 58       	subi	r25, 0x83	; 131
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	3a f0       	brmi	.+14     	; 0x9b6 <__divsf3_pse+0x70>
     9a8:	9e 3f       	cpi	r25, 0xFE	; 254
     9aa:	51 05       	cpc	r21, r1
     9ac:	78 f0       	brcs	.+30     	; 0x9cc <__divsf3_pse+0x86>
     9ae:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
     9b2:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
     9b6:	5f 3f       	cpi	r21, 0xFF	; 255
     9b8:	e4 f3       	brlt	.-8      	; 0x9b2 <__divsf3_pse+0x6c>
     9ba:	98 3e       	cpi	r25, 0xE8	; 232
     9bc:	d4 f3       	brlt	.-12     	; 0x9b2 <__divsf3_pse+0x6c>
     9be:	86 95       	lsr	r24
     9c0:	77 95       	ror	r23
     9c2:	67 95       	ror	r22
     9c4:	b7 95       	ror	r27
     9c6:	f7 95       	ror	r31
     9c8:	9f 5f       	subi	r25, 0xFF	; 255
     9ca:	c9 f7       	brne	.-14     	; 0x9be <__divsf3_pse+0x78>
     9cc:	88 0f       	add	r24, r24
     9ce:	91 1d       	adc	r25, r1
     9d0:	96 95       	lsr	r25
     9d2:	87 95       	ror	r24
     9d4:	97 f9       	bld	r25, 7
     9d6:	08 95       	ret
     9d8:	e1 e0       	ldi	r30, 0x01	; 1
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	bb 1f       	adc	r27, r27
     9e2:	62 17       	cp	r22, r18
     9e4:	73 07       	cpc	r23, r19
     9e6:	84 07       	cpc	r24, r20
     9e8:	ba 07       	cpc	r27, r26
     9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__divsf3_pse+0xae>
     9ec:	62 1b       	sub	r22, r18
     9ee:	73 0b       	sbc	r23, r19
     9f0:	84 0b       	sbc	r24, r20
     9f2:	ba 0b       	sbc	r27, r26
     9f4:	ee 1f       	adc	r30, r30
     9f6:	88 f7       	brcc	.-30     	; 0x9da <__divsf3_pse+0x94>
     9f8:	e0 95       	com	r30
     9fa:	08 95       	ret

000009fc <__fixsfsi>:
     9fc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
     a00:	68 94       	set
     a02:	b1 11       	cpse	r27, r1
     a04:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
     a08:	08 95       	ret

00000a0a <__fixunssfsi>:
     a0a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_splitA>
     a0e:	88 f0       	brcs	.+34     	; 0xa32 <__fixunssfsi+0x28>
     a10:	9f 57       	subi	r25, 0x7F	; 127
     a12:	98 f0       	brcs	.+38     	; 0xa3a <__fixunssfsi+0x30>
     a14:	b9 2f       	mov	r27, r25
     a16:	99 27       	eor	r25, r25
     a18:	b7 51       	subi	r27, 0x17	; 23
     a1a:	b0 f0       	brcs	.+44     	; 0xa48 <__fixunssfsi+0x3e>
     a1c:	e1 f0       	breq	.+56     	; 0xa56 <__fixunssfsi+0x4c>
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	1a f0       	brmi	.+6      	; 0xa2e <__fixunssfsi+0x24>
     a28:	ba 95       	dec	r27
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <__fixunssfsi+0x14>
     a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fixunssfsi+0x4c>
     a2e:	b1 30       	cpi	r27, 0x01	; 1
     a30:	91 f0       	breq	.+36     	; 0xa56 <__fixunssfsi+0x4c>
     a32:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_zero>
     a36:	b1 e0       	ldi	r27, 0x01	; 1
     a38:	08 95       	ret
     a3a:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_zero>
     a3e:	67 2f       	mov	r22, r23
     a40:	78 2f       	mov	r23, r24
     a42:	88 27       	eor	r24, r24
     a44:	b8 5f       	subi	r27, 0xF8	; 248
     a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x4c>
     a48:	b9 3f       	cpi	r27, 0xF9	; 249
     a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x34>
     a4c:	86 95       	lsr	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b3 95       	inc	r27
     a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x42>
     a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x5c>
     a58:	90 95       	com	r25
     a5a:	80 95       	com	r24
     a5c:	70 95       	com	r23
     a5e:	61 95       	neg	r22
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	08 95       	ret

00000a68 <__floatunsisf>:
     a68:	e8 94       	clt
     a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
     a6c:	97 fb       	bst	r25, 7
     a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
     a70:	90 95       	com	r25
     a72:	80 95       	com	r24
     a74:	70 95       	com	r23
     a76:	61 95       	neg	r22
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	99 23       	and	r25, r25
     a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
     a82:	f9 2f       	mov	r31, r25
     a84:	96 e9       	ldi	r25, 0x96	; 150
     a86:	bb 27       	eor	r27, r27
     a88:	93 95       	inc	r25
     a8a:	f6 95       	lsr	r31
     a8c:	87 95       	ror	r24
     a8e:	77 95       	ror	r23
     a90:	67 95       	ror	r22
     a92:	b7 95       	ror	r27
     a94:	f1 11       	cpse	r31, r1
     a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
     a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
     a9a:	bb 0f       	add	r27, r27
     a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
     a9e:	60 ff       	sbrs	r22, 0
     aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f 4f       	sbci	r24, 0xFF	; 255
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
     ab0:	96 e9       	ldi	r25, 0x96	; 150
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
     ab4:	77 23       	and	r23, r23
     ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
     ab8:	9e e8       	ldi	r25, 0x8E	; 142
     aba:	87 2f       	mov	r24, r23
     abc:	76 2f       	mov	r23, r22
     abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
     ac0:	66 23       	and	r22, r22
     ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
     ac4:	96 e8       	ldi	r25, 0x86	; 134
     ac6:	86 2f       	mov	r24, r22
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
     ace:	9a 95       	dec	r25
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	88 1f       	adc	r24, r24
     ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
     ad8:	88 0f       	add	r24, r24
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	97 f9       	bld	r25, 7
     ae0:	08 95       	ret

00000ae2 <__fp_inf>:
     ae2:	97 f9       	bld	r25, 7
     ae4:	9f 67       	ori	r25, 0x7F	; 127
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	08 95       	ret

00000aee <__fp_nan>:
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	80 ec       	ldi	r24, 0xC0	; 192
     af2:	08 95       	ret

00000af4 <__fp_pscA>:
     af4:	00 24       	eor	r0, r0
     af6:	0a 94       	dec	r0
     af8:	16 16       	cp	r1, r22
     afa:	17 06       	cpc	r1, r23
     afc:	18 06       	cpc	r1, r24
     afe:	09 06       	cpc	r0, r25
     b00:	08 95       	ret

00000b02 <__fp_pscB>:
     b02:	00 24       	eor	r0, r0
     b04:	0a 94       	dec	r0
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	14 06       	cpc	r1, r20
     b0c:	05 06       	cpc	r0, r21
     b0e:	08 95       	ret

00000b10 <__fp_round>:
     b10:	09 2e       	mov	r0, r25
     b12:	03 94       	inc	r0
     b14:	00 0c       	add	r0, r0
     b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0xc>
     b18:	88 23       	and	r24, r24
     b1a:	52 f0       	brmi	.+20     	; 0xb30 <__fp_round+0x20>
     b1c:	bb 0f       	add	r27, r27
     b1e:	40 f4       	brcc	.+16     	; 0xb30 <__fp_round+0x20>
     b20:	bf 2b       	or	r27, r31
     b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0x18>
     b24:	60 ff       	sbrs	r22, 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__fp_round+0x20>
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <__fp_split3>:
     b32:	57 fd       	sbrc	r21, 7
     b34:	90 58       	subi	r25, 0x80	; 128
     b36:	44 0f       	add	r20, r20
     b38:	55 1f       	adc	r21, r21
     b3a:	59 f0       	breq	.+22     	; 0xb52 <__fp_splitA+0x10>
     b3c:	5f 3f       	cpi	r21, 0xFF	; 255
     b3e:	71 f0       	breq	.+28     	; 0xb5c <__fp_splitA+0x1a>
     b40:	47 95       	ror	r20

00000b42 <__fp_splitA>:
     b42:	88 0f       	add	r24, r24
     b44:	97 fb       	bst	r25, 7
     b46:	99 1f       	adc	r25, r25
     b48:	61 f0       	breq	.+24     	; 0xb62 <__fp_splitA+0x20>
     b4a:	9f 3f       	cpi	r25, 0xFF	; 255
     b4c:	79 f0       	breq	.+30     	; 0xb6c <__fp_splitA+0x2a>
     b4e:	87 95       	ror	r24
     b50:	08 95       	ret
     b52:	12 16       	cp	r1, r18
     b54:	13 06       	cpc	r1, r19
     b56:	14 06       	cpc	r1, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <__fp_split3+0xe>
     b5c:	46 95       	lsr	r20
     b5e:	f1 df       	rcall	.-30     	; 0xb42 <__fp_splitA>
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <__fp_splitA+0x30>
     b62:	16 16       	cp	r1, r22
     b64:	17 06       	cpc	r1, r23
     b66:	18 06       	cpc	r1, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	f1 cf       	rjmp	.-30     	; 0xb4e <__fp_splitA+0xc>
     b6c:	86 95       	lsr	r24
     b6e:	71 05       	cpc	r23, r1
     b70:	61 05       	cpc	r22, r1
     b72:	08 94       	sec
     b74:	08 95       	ret

00000b76 <__fp_zero>:
     b76:	e8 94       	clt

00000b78 <__fp_szero>:
     b78:	bb 27       	eor	r27, r27
     b7a:	66 27       	eor	r22, r22
     b7c:	77 27       	eor	r23, r23
     b7e:	cb 01       	movw	r24, r22
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__mulsf3>:
     b84:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__mulsf3x>
     b88:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_round>
     b8c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
     b90:	38 f0       	brcs	.+14     	; 0xba0 <__mulsf3+0x1c>
     b92:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
     b96:	20 f0       	brcs	.+8      	; 0xba0 <__mulsf3+0x1c>
     b98:	95 23       	and	r25, r21
     b9a:	11 f0       	breq	.+4      	; 0xba0 <__mulsf3+0x1c>
     b9c:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
     ba0:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
     ba4:	11 24       	eor	r1, r1
     ba6:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>

00000baa <__mulsf3x>:
     baa:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_split3>
     bae:	70 f3       	brcs	.-36     	; 0xb8c <__mulsf3+0x8>

00000bb0 <__mulsf3_pse>:
     bb0:	95 9f       	mul	r25, r21
     bb2:	c1 f3       	breq	.-16     	; 0xba4 <__mulsf3+0x20>
     bb4:	95 0f       	add	r25, r21
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	55 1f       	adc	r21, r21
     bba:	62 9f       	mul	r22, r18
     bbc:	f0 01       	movw	r30, r0
     bbe:	72 9f       	mul	r23, r18
     bc0:	bb 27       	eor	r27, r27
     bc2:	f0 0d       	add	r31, r0
     bc4:	b1 1d       	adc	r27, r1
     bc6:	63 9f       	mul	r22, r19
     bc8:	aa 27       	eor	r26, r26
     bca:	f0 0d       	add	r31, r0
     bcc:	b1 1d       	adc	r27, r1
     bce:	aa 1f       	adc	r26, r26
     bd0:	64 9f       	mul	r22, r20
     bd2:	66 27       	eor	r22, r22
     bd4:	b0 0d       	add	r27, r0
     bd6:	a1 1d       	adc	r26, r1
     bd8:	66 1f       	adc	r22, r22
     bda:	82 9f       	mul	r24, r18
     bdc:	22 27       	eor	r18, r18
     bde:	b0 0d       	add	r27, r0
     be0:	a1 1d       	adc	r26, r1
     be2:	62 1f       	adc	r22, r18
     be4:	73 9f       	mul	r23, r19
     be6:	b0 0d       	add	r27, r0
     be8:	a1 1d       	adc	r26, r1
     bea:	62 1f       	adc	r22, r18
     bec:	83 9f       	mul	r24, r19
     bee:	a0 0d       	add	r26, r0
     bf0:	61 1d       	adc	r22, r1
     bf2:	22 1f       	adc	r18, r18
     bf4:	74 9f       	mul	r23, r20
     bf6:	33 27       	eor	r19, r19
     bf8:	a0 0d       	add	r26, r0
     bfa:	61 1d       	adc	r22, r1
     bfc:	23 1f       	adc	r18, r19
     bfe:	84 9f       	mul	r24, r20
     c00:	60 0d       	add	r22, r0
     c02:	21 1d       	adc	r18, r1
     c04:	82 2f       	mov	r24, r18
     c06:	76 2f       	mov	r23, r22
     c08:	6a 2f       	mov	r22, r26
     c0a:	11 24       	eor	r1, r1
     c0c:	9f 57       	subi	r25, 0x7F	; 127
     c0e:	50 40       	sbci	r21, 0x00	; 0
     c10:	9a f0       	brmi	.+38     	; 0xc38 <__mulsf3_pse+0x88>
     c12:	f1 f0       	breq	.+60     	; 0xc50 <__mulsf3_pse+0xa0>
     c14:	88 23       	and	r24, r24
     c16:	4a f0       	brmi	.+18     	; 0xc2a <__mulsf3_pse+0x7a>
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	bb 1f       	adc	r27, r27
     c1e:	66 1f       	adc	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	88 1f       	adc	r24, r24
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	50 40       	sbci	r21, 0x00	; 0
     c28:	a9 f7       	brne	.-22     	; 0xc14 <__mulsf3_pse+0x64>
     c2a:	9e 3f       	cpi	r25, 0xFE	; 254
     c2c:	51 05       	cpc	r21, r1
     c2e:	80 f0       	brcs	.+32     	; 0xc50 <__mulsf3_pse+0xa0>
     c30:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
     c34:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_szero>
     c38:	5f 3f       	cpi	r21, 0xFF	; 255
     c3a:	e4 f3       	brlt	.-8      	; 0xc34 <__mulsf3_pse+0x84>
     c3c:	98 3e       	cpi	r25, 0xE8	; 232
     c3e:	d4 f3       	brlt	.-12     	; 0xc34 <__mulsf3_pse+0x84>
     c40:	86 95       	lsr	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	b7 95       	ror	r27
     c48:	f7 95       	ror	r31
     c4a:	e7 95       	ror	r30
     c4c:	9f 5f       	subi	r25, 0xFF	; 255
     c4e:	c1 f7       	brne	.-16     	; 0xc40 <__mulsf3_pse+0x90>
     c50:	fe 2b       	or	r31, r30
     c52:	88 0f       	add	r24, r24
     c54:	91 1d       	adc	r25, r1
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	97 f9       	bld	r25, 7
     c5c:	08 95       	ret

00000c5e <__divmodhi4>:
     c5e:	97 fb       	bst	r25, 7
     c60:	07 2e       	mov	r0, r23
     c62:	16 f4       	brtc	.+4      	; 0xc68 <__divmodhi4+0xa>
     c64:	00 94       	com	r0
     c66:	07 d0       	rcall	.+14     	; 0xc76 <__divmodhi4_neg1>
     c68:	77 fd       	sbrc	r23, 7
     c6a:	09 d0       	rcall	.+18     	; 0xc7e <__divmodhi4_neg2>
     c6c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__udivmodhi4>
     c70:	07 fc       	sbrc	r0, 7
     c72:	05 d0       	rcall	.+10     	; 0xc7e <__divmodhi4_neg2>
     c74:	3e f4       	brtc	.+14     	; 0xc84 <__divmodhi4_exit>

00000c76 <__divmodhi4_neg1>:
     c76:	90 95       	com	r25
     c78:	81 95       	neg	r24
     c7a:	9f 4f       	sbci	r25, 0xFF	; 255
     c7c:	08 95       	ret

00000c7e <__divmodhi4_neg2>:
     c7e:	70 95       	com	r23
     c80:	61 95       	neg	r22
     c82:	7f 4f       	sbci	r23, 0xFF	; 255

00000c84 <__divmodhi4_exit>:
     c84:	08 95       	ret

00000c86 <__udivmodsi4>:
     c86:	a1 e2       	ldi	r26, 0x21	; 33
     c88:	1a 2e       	mov	r1, r26
     c8a:	aa 1b       	sub	r26, r26
     c8c:	bb 1b       	sub	r27, r27
     c8e:	fd 01       	movw	r30, r26
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__udivmodsi4_ep>

00000c92 <__udivmodsi4_loop>:
     c92:	aa 1f       	adc	r26, r26
     c94:	bb 1f       	adc	r27, r27
     c96:	ee 1f       	adc	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	a2 17       	cp	r26, r18
     c9c:	b3 07       	cpc	r27, r19
     c9e:	e4 07       	cpc	r30, r20
     ca0:	f5 07       	cpc	r31, r21
     ca2:	20 f0       	brcs	.+8      	; 0xcac <__udivmodsi4_ep>
     ca4:	a2 1b       	sub	r26, r18
     ca6:	b3 0b       	sbc	r27, r19
     ca8:	e4 0b       	sbc	r30, r20
     caa:	f5 0b       	sbc	r31, r21

00000cac <__udivmodsi4_ep>:
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	1a 94       	dec	r1
     cb6:	69 f7       	brne	.-38     	; 0xc92 <__udivmodsi4_loop>
     cb8:	60 95       	com	r22
     cba:	70 95       	com	r23
     cbc:	80 95       	com	r24
     cbe:	90 95       	com	r25
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	bd 01       	movw	r22, r26
     cc6:	cf 01       	movw	r24, r30
     cc8:	08 95       	ret

00000cca <__ashldi3>:
     cca:	0f 93       	push	r16
     ccc:	08 30       	cpi	r16, 0x08	; 8
     cce:	90 f0       	brcs	.+36     	; 0xcf4 <__ashldi3+0x2a>
     cd0:	98 2f       	mov	r25, r24
     cd2:	87 2f       	mov	r24, r23
     cd4:	76 2f       	mov	r23, r22
     cd6:	65 2f       	mov	r22, r21
     cd8:	54 2f       	mov	r21, r20
     cda:	43 2f       	mov	r20, r19
     cdc:	32 2f       	mov	r19, r18
     cde:	22 27       	eor	r18, r18
     ce0:	08 50       	subi	r16, 0x08	; 8
     ce2:	f4 cf       	rjmp	.-24     	; 0xccc <__ashldi3+0x2>
     ce4:	22 0f       	add	r18, r18
     ce6:	33 1f       	adc	r19, r19
     ce8:	44 1f       	adc	r20, r20
     cea:	55 1f       	adc	r21, r21
     cec:	66 1f       	adc	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 95       	dec	r16
     cf6:	b2 f7       	brpl	.-20     	; 0xce4 <__ashldi3+0x1a>
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <__ashrdi3>:
     cfc:	97 fb       	bst	r25, 7
     cfe:	10 f8       	bld	r1, 0

00000d00 <__lshrdi3>:
     d00:	16 94       	lsr	r1
     d02:	00 08       	sbc	r0, r0
     d04:	0f 93       	push	r16
     d06:	08 30       	cpi	r16, 0x08	; 8
     d08:	98 f0       	brcs	.+38     	; 0xd30 <__lshrdi3+0x30>
     d0a:	08 50       	subi	r16, 0x08	; 8
     d0c:	23 2f       	mov	r18, r19
     d0e:	34 2f       	mov	r19, r20
     d10:	45 2f       	mov	r20, r21
     d12:	56 2f       	mov	r21, r22
     d14:	67 2f       	mov	r22, r23
     d16:	78 2f       	mov	r23, r24
     d18:	89 2f       	mov	r24, r25
     d1a:	90 2d       	mov	r25, r0
     d1c:	f4 cf       	rjmp	.-24     	; 0xd06 <__lshrdi3+0x6>
     d1e:	05 94       	asr	r0
     d20:	97 95       	ror	r25
     d22:	87 95       	ror	r24
     d24:	77 95       	ror	r23
     d26:	67 95       	ror	r22
     d28:	57 95       	ror	r21
     d2a:	47 95       	ror	r20
     d2c:	37 95       	ror	r19
     d2e:	27 95       	ror	r18
     d30:	0a 95       	dec	r16
     d32:	aa f7       	brpl	.-22     	; 0xd1e <__lshrdi3+0x1e>
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <__cmpdi2_s8>:
     d38:	00 24       	eor	r0, r0
     d3a:	a7 fd       	sbrc	r26, 7
     d3c:	00 94       	com	r0
     d3e:	2a 17       	cp	r18, r26
     d40:	30 05       	cpc	r19, r0
     d42:	40 05       	cpc	r20, r0
     d44:	50 05       	cpc	r21, r0
     d46:	60 05       	cpc	r22, r0
     d48:	70 05       	cpc	r23, r0
     d4a:	80 05       	cpc	r24, r0
     d4c:	90 05       	cpc	r25, r0
     d4e:	08 95       	ret

00000d50 <__udivmodhi4>:
     d50:	aa 1b       	sub	r26, r26
     d52:	bb 1b       	sub	r27, r27
     d54:	51 e1       	ldi	r21, 0x11	; 17
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <__udivmodhi4_ep>

00000d58 <__udivmodhi4_loop>:
     d58:	aa 1f       	adc	r26, r26
     d5a:	bb 1f       	adc	r27, r27
     d5c:	a6 17       	cp	r26, r22
     d5e:	b7 07       	cpc	r27, r23
     d60:	10 f0       	brcs	.+4      	; 0xd66 <__udivmodhi4_ep>
     d62:	a6 1b       	sub	r26, r22
     d64:	b7 0b       	sbc	r27, r23

00000d66 <__udivmodhi4_ep>:
     d66:	88 1f       	adc	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	5a 95       	dec	r21
     d6c:	a9 f7       	brne	.-22     	; 0xd58 <__udivmodhi4_loop>
     d6e:	80 95       	com	r24
     d70:	90 95       	com	r25
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	08 95       	ret

00000d78 <vsnprintf>:
     d78:	ae e0       	ldi	r26, 0x0E	; 14
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e2 ec       	ldi	r30, 0xC2	; 194
     d7e:	f6 e0       	ldi	r31, 0x06	; 6
     d80:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__prologue_saves__+0x1c>
     d84:	8c 01       	movw	r16, r24
     d86:	fa 01       	movw	r30, r20
     d88:	86 e0       	ldi	r24, 0x06	; 6
     d8a:	8c 83       	std	Y+4, r24	; 0x04
     d8c:	09 83       	std	Y+1, r16	; 0x01
     d8e:	1a 83       	std	Y+2, r17	; 0x02
     d90:	77 ff       	sbrs	r23, 7
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vsnprintf+0x20>
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e8       	ldi	r23, 0x80	; 128
     d98:	cb 01       	movw	r24, r22
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	a9 01       	movw	r20, r18
     da2:	bf 01       	movw	r22, r30
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <vfprintf>
     dac:	4d 81       	ldd	r20, Y+5	; 0x05
     dae:	5e 81       	ldd	r21, Y+6	; 0x06
     db0:	57 fd       	sbrc	r21, 7
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <vsnprintf+0x50>
     db4:	2f 81       	ldd	r18, Y+7	; 0x07
     db6:	38 85       	ldd	r19, Y+8	; 0x08
     db8:	42 17       	cp	r20, r18
     dba:	53 07       	cpc	r21, r19
     dbc:	0c f4       	brge	.+2      	; 0xdc0 <vsnprintf+0x48>
     dbe:	9a 01       	movw	r18, r20
     dc0:	f8 01       	movw	r30, r16
     dc2:	e2 0f       	add	r30, r18
     dc4:	f3 1f       	adc	r31, r19
     dc6:	10 82       	st	Z, r1
     dc8:	2e 96       	adiw	r28, 0x0e	; 14
     dca:	e4 e0       	ldi	r30, 0x04	; 4
     dcc:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x1c>

00000dd0 <vfprintf>:
     dd0:	ab e0       	ldi	r26, 0x0B	; 11
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ee ee       	ldi	r30, 0xEE	; 238
     dd6:	f6 e0       	ldi	r31, 0x06	; 6
     dd8:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__prologue_saves__>
     ddc:	6c 01       	movw	r12, r24
     dde:	7b 01       	movw	r14, r22
     de0:	8a 01       	movw	r16, r20
     de2:	fc 01       	movw	r30, r24
     de4:	16 82       	std	Z+6, r1	; 0x06
     de6:	17 82       	std	Z+7, r1	; 0x07
     de8:	83 81       	ldd	r24, Z+3	; 0x03
     dea:	81 ff       	sbrs	r24, 1
     dec:	cc c1       	rjmp	.+920    	; 0x1186 <vfprintf+0x3b6>
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	3c 01       	movw	r6, r24
     df4:	f6 01       	movw	r30, r12
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	f7 01       	movw	r30, r14
     dfa:	93 fd       	sbrc	r25, 3
     dfc:	85 91       	lpm	r24, Z+
     dfe:	93 ff       	sbrs	r25, 3
     e00:	81 91       	ld	r24, Z+
     e02:	7f 01       	movw	r14, r30
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <vfprintf+0x3a>
     e08:	ba c1       	rjmp	.+884    	; 0x117e <vfprintf+0x3ae>
     e0a:	85 32       	cpi	r24, 0x25	; 37
     e0c:	39 f4       	brne	.+14     	; 0xe1c <vfprintf+0x4c>
     e0e:	93 fd       	sbrc	r25, 3
     e10:	85 91       	lpm	r24, Z+
     e12:	93 ff       	sbrs	r25, 3
     e14:	81 91       	ld	r24, Z+
     e16:	7f 01       	movw	r14, r30
     e18:	85 32       	cpi	r24, 0x25	; 37
     e1a:	29 f4       	brne	.+10     	; 0xe26 <vfprintf+0x56>
     e1c:	b6 01       	movw	r22, r12
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
     e24:	e7 cf       	rjmp	.-50     	; 0xdf4 <vfprintf+0x24>
     e26:	91 2c       	mov	r9, r1
     e28:	21 2c       	mov	r2, r1
     e2a:	31 2c       	mov	r3, r1
     e2c:	ff e1       	ldi	r31, 0x1F	; 31
     e2e:	f3 15       	cp	r31, r3
     e30:	d8 f0       	brcs	.+54     	; 0xe68 <vfprintf+0x98>
     e32:	8b 32       	cpi	r24, 0x2B	; 43
     e34:	79 f0       	breq	.+30     	; 0xe54 <vfprintf+0x84>
     e36:	38 f4       	brcc	.+14     	; 0xe46 <vfprintf+0x76>
     e38:	80 32       	cpi	r24, 0x20	; 32
     e3a:	79 f0       	breq	.+30     	; 0xe5a <vfprintf+0x8a>
     e3c:	83 32       	cpi	r24, 0x23	; 35
     e3e:	a1 f4       	brne	.+40     	; 0xe68 <vfprintf+0x98>
     e40:	23 2d       	mov	r18, r3
     e42:	20 61       	ori	r18, 0x10	; 16
     e44:	1d c0       	rjmp	.+58     	; 0xe80 <vfprintf+0xb0>
     e46:	8d 32       	cpi	r24, 0x2D	; 45
     e48:	61 f0       	breq	.+24     	; 0xe62 <vfprintf+0x92>
     e4a:	80 33       	cpi	r24, 0x30	; 48
     e4c:	69 f4       	brne	.+26     	; 0xe68 <vfprintf+0x98>
     e4e:	23 2d       	mov	r18, r3
     e50:	21 60       	ori	r18, 0x01	; 1
     e52:	16 c0       	rjmp	.+44     	; 0xe80 <vfprintf+0xb0>
     e54:	83 2d       	mov	r24, r3
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	38 2e       	mov	r3, r24
     e5a:	e3 2d       	mov	r30, r3
     e5c:	e4 60       	ori	r30, 0x04	; 4
     e5e:	3e 2e       	mov	r3, r30
     e60:	2a c0       	rjmp	.+84     	; 0xeb6 <vfprintf+0xe6>
     e62:	f3 2d       	mov	r31, r3
     e64:	f8 60       	ori	r31, 0x08	; 8
     e66:	1d c0       	rjmp	.+58     	; 0xea2 <vfprintf+0xd2>
     e68:	37 fc       	sbrc	r3, 7
     e6a:	2d c0       	rjmp	.+90     	; 0xec6 <vfprintf+0xf6>
     e6c:	20 ed       	ldi	r18, 0xD0	; 208
     e6e:	28 0f       	add	r18, r24
     e70:	2a 30       	cpi	r18, 0x0A	; 10
     e72:	40 f0       	brcs	.+16     	; 0xe84 <vfprintf+0xb4>
     e74:	8e 32       	cpi	r24, 0x2E	; 46
     e76:	b9 f4       	brne	.+46     	; 0xea6 <vfprintf+0xd6>
     e78:	36 fc       	sbrc	r3, 6
     e7a:	81 c1       	rjmp	.+770    	; 0x117e <vfprintf+0x3ae>
     e7c:	23 2d       	mov	r18, r3
     e7e:	20 64       	ori	r18, 0x40	; 64
     e80:	32 2e       	mov	r3, r18
     e82:	19 c0       	rjmp	.+50     	; 0xeb6 <vfprintf+0xe6>
     e84:	36 fe       	sbrs	r3, 6
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0xc4>
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	98 9e       	mul	r9, r24
     e8c:	20 0d       	add	r18, r0
     e8e:	11 24       	eor	r1, r1
     e90:	92 2e       	mov	r9, r18
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <vfprintf+0xe6>
     e94:	ea e0       	ldi	r30, 0x0A	; 10
     e96:	2e 9e       	mul	r2, r30
     e98:	20 0d       	add	r18, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	22 2e       	mov	r2, r18
     e9e:	f3 2d       	mov	r31, r3
     ea0:	f0 62       	ori	r31, 0x20	; 32
     ea2:	3f 2e       	mov	r3, r31
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <vfprintf+0xe6>
     ea6:	8c 36       	cpi	r24, 0x6C	; 108
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <vfprintf+0xe2>
     eaa:	83 2d       	mov	r24, r3
     eac:	80 68       	ori	r24, 0x80	; 128
     eae:	38 2e       	mov	r3, r24
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <vfprintf+0xe6>
     eb2:	88 36       	cpi	r24, 0x68	; 104
     eb4:	41 f4       	brne	.+16     	; 0xec6 <vfprintf+0xf6>
     eb6:	f7 01       	movw	r30, r14
     eb8:	93 fd       	sbrc	r25, 3
     eba:	85 91       	lpm	r24, Z+
     ebc:	93 ff       	sbrs	r25, 3
     ebe:	81 91       	ld	r24, Z+
     ec0:	7f 01       	movw	r14, r30
     ec2:	81 11       	cpse	r24, r1
     ec4:	b3 cf       	rjmp	.-154    	; 0xe2c <vfprintf+0x5c>
     ec6:	98 2f       	mov	r25, r24
     ec8:	9f 7d       	andi	r25, 0xDF	; 223
     eca:	95 54       	subi	r25, 0x45	; 69
     ecc:	93 30       	cpi	r25, 0x03	; 3
     ece:	28 f4       	brcc	.+10     	; 0xeda <vfprintf+0x10a>
     ed0:	0c 5f       	subi	r16, 0xFC	; 252
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	9f e3       	ldi	r25, 0x3F	; 63
     ed6:	99 83       	std	Y+1, r25	; 0x01
     ed8:	0d c0       	rjmp	.+26     	; 0xef4 <vfprintf+0x124>
     eda:	83 36       	cpi	r24, 0x63	; 99
     edc:	31 f0       	breq	.+12     	; 0xeea <vfprintf+0x11a>
     ede:	83 37       	cpi	r24, 0x73	; 115
     ee0:	71 f0       	breq	.+28     	; 0xefe <vfprintf+0x12e>
     ee2:	83 35       	cpi	r24, 0x53	; 83
     ee4:	09 f0       	breq	.+2      	; 0xee8 <vfprintf+0x118>
     ee6:	59 c0       	rjmp	.+178    	; 0xf9a <vfprintf+0x1ca>
     ee8:	21 c0       	rjmp	.+66     	; 0xf2c <vfprintf+0x15c>
     eea:	f8 01       	movw	r30, r16
     eec:	80 81       	ld	r24, Z
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	0e 5f       	subi	r16, 0xFE	; 254
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	88 24       	eor	r8, r8
     ef6:	83 94       	inc	r8
     ef8:	91 2c       	mov	r9, r1
     efa:	53 01       	movw	r10, r6
     efc:	13 c0       	rjmp	.+38     	; 0xf24 <vfprintf+0x154>
     efe:	28 01       	movw	r4, r16
     f00:	f2 e0       	ldi	r31, 0x02	; 2
     f02:	4f 0e       	add	r4, r31
     f04:	51 1c       	adc	r5, r1
     f06:	f8 01       	movw	r30, r16
     f08:	a0 80       	ld	r10, Z
     f0a:	b1 80       	ldd	r11, Z+1	; 0x01
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <vfprintf+0x146>
     f10:	69 2d       	mov	r22, r9
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x14a>
     f16:	6f ef       	ldi	r22, 0xFF	; 255
     f18:	7f ef       	ldi	r23, 0xFF	; 255
     f1a:	c5 01       	movw	r24, r10
     f1c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <strnlen>
     f20:	4c 01       	movw	r8, r24
     f22:	82 01       	movw	r16, r4
     f24:	f3 2d       	mov	r31, r3
     f26:	ff 77       	andi	r31, 0x7F	; 127
     f28:	3f 2e       	mov	r3, r31
     f2a:	16 c0       	rjmp	.+44     	; 0xf58 <vfprintf+0x188>
     f2c:	28 01       	movw	r4, r16
     f2e:	22 e0       	ldi	r18, 0x02	; 2
     f30:	42 0e       	add	r4, r18
     f32:	51 1c       	adc	r5, r1
     f34:	f8 01       	movw	r30, r16
     f36:	a0 80       	ld	r10, Z
     f38:	b1 80       	ldd	r11, Z+1	; 0x01
     f3a:	36 fe       	sbrs	r3, 6
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <vfprintf+0x174>
     f3e:	69 2d       	mov	r22, r9
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x178>
     f44:	6f ef       	ldi	r22, 0xFF	; 255
     f46:	7f ef       	ldi	r23, 0xFF	; 255
     f48:	c5 01       	movw	r24, r10
     f4a:	0e 94 c9 08 	call	0x1192	; 0x1192 <strnlen_P>
     f4e:	4c 01       	movw	r8, r24
     f50:	f3 2d       	mov	r31, r3
     f52:	f0 68       	ori	r31, 0x80	; 128
     f54:	3f 2e       	mov	r3, r31
     f56:	82 01       	movw	r16, r4
     f58:	33 fc       	sbrc	r3, 3
     f5a:	1b c0       	rjmp	.+54     	; 0xf92 <vfprintf+0x1c2>
     f5c:	82 2d       	mov	r24, r2
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	88 16       	cp	r8, r24
     f62:	99 06       	cpc	r9, r25
     f64:	b0 f4       	brcc	.+44     	; 0xf92 <vfprintf+0x1c2>
     f66:	b6 01       	movw	r22, r12
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
     f70:	2a 94       	dec	r2
     f72:	f4 cf       	rjmp	.-24     	; 0xf5c <vfprintf+0x18c>
     f74:	f5 01       	movw	r30, r10
     f76:	37 fc       	sbrc	r3, 7
     f78:	85 91       	lpm	r24, Z+
     f7a:	37 fe       	sbrs	r3, 7
     f7c:	81 91       	ld	r24, Z+
     f7e:	5f 01       	movw	r10, r30
     f80:	b6 01       	movw	r22, r12
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
     f88:	21 10       	cpse	r2, r1
     f8a:	2a 94       	dec	r2
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	82 1a       	sub	r8, r18
     f90:	91 08       	sbc	r9, r1
     f92:	81 14       	cp	r8, r1
     f94:	91 04       	cpc	r9, r1
     f96:	71 f7       	brne	.-36     	; 0xf74 <vfprintf+0x1a4>
     f98:	e8 c0       	rjmp	.+464    	; 0x116a <vfprintf+0x39a>
     f9a:	84 36       	cpi	r24, 0x64	; 100
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <vfprintf+0x1d2>
     f9e:	89 36       	cpi	r24, 0x69	; 105
     fa0:	41 f5       	brne	.+80     	; 0xff2 <vfprintf+0x222>
     fa2:	f8 01       	movw	r30, r16
     fa4:	37 fe       	sbrs	r3, 7
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <vfprintf+0x1e6>
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	0c 5f       	subi	r16, 0xFC	; 252
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <vfprintf+0x1f6>
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	07 2e       	mov	r0, r23
     fbc:	00 0c       	add	r0, r0
     fbe:	88 0b       	sbc	r24, r24
     fc0:	99 0b       	sbc	r25, r25
     fc2:	0e 5f       	subi	r16, 0xFE	; 254
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	f3 2d       	mov	r31, r3
     fc8:	ff 76       	andi	r31, 0x6F	; 111
     fca:	3f 2e       	mov	r3, r31
     fcc:	97 ff       	sbrs	r25, 7
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x212>
     fd0:	90 95       	com	r25
     fd2:	80 95       	com	r24
     fd4:	70 95       	com	r23
     fd6:	61 95       	neg	r22
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	f0 68       	ori	r31, 0x80	; 128
     fe0:	3f 2e       	mov	r3, r31
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a3 01       	movw	r20, r6
     fe8:	0e 94 1b 09 	call	0x1236	; 0x1236 <__ultoa_invert>
     fec:	88 2e       	mov	r8, r24
     fee:	86 18       	sub	r8, r6
     ff0:	45 c0       	rjmp	.+138    	; 0x107c <vfprintf+0x2ac>
     ff2:	85 37       	cpi	r24, 0x75	; 117
     ff4:	31 f4       	brne	.+12     	; 0x1002 <vfprintf+0x232>
     ff6:	23 2d       	mov	r18, r3
     ff8:	2f 7e       	andi	r18, 0xEF	; 239
     ffa:	b2 2e       	mov	r11, r18
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	25 c0       	rjmp	.+74     	; 0x104c <vfprintf+0x27c>
    1002:	93 2d       	mov	r25, r3
    1004:	99 7f       	andi	r25, 0xF9	; 249
    1006:	b9 2e       	mov	r11, r25
    1008:	8f 36       	cpi	r24, 0x6F	; 111
    100a:	c1 f0       	breq	.+48     	; 0x103c <vfprintf+0x26c>
    100c:	18 f4       	brcc	.+6      	; 0x1014 <vfprintf+0x244>
    100e:	88 35       	cpi	r24, 0x58	; 88
    1010:	79 f0       	breq	.+30     	; 0x1030 <vfprintf+0x260>
    1012:	b5 c0       	rjmp	.+362    	; 0x117e <vfprintf+0x3ae>
    1014:	80 37       	cpi	r24, 0x70	; 112
    1016:	19 f0       	breq	.+6      	; 0x101e <vfprintf+0x24e>
    1018:	88 37       	cpi	r24, 0x78	; 120
    101a:	21 f0       	breq	.+8      	; 0x1024 <vfprintf+0x254>
    101c:	b0 c0       	rjmp	.+352    	; 0x117e <vfprintf+0x3ae>
    101e:	e9 2f       	mov	r30, r25
    1020:	e0 61       	ori	r30, 0x10	; 16
    1022:	be 2e       	mov	r11, r30
    1024:	b4 fe       	sbrs	r11, 4
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <vfprintf+0x272>
    1028:	fb 2d       	mov	r31, r11
    102a:	f4 60       	ori	r31, 0x04	; 4
    102c:	bf 2e       	mov	r11, r31
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <vfprintf+0x272>
    1030:	34 fe       	sbrs	r3, 4
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <vfprintf+0x278>
    1034:	29 2f       	mov	r18, r25
    1036:	26 60       	ori	r18, 0x06	; 6
    1038:	b2 2e       	mov	r11, r18
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <vfprintf+0x278>
    103c:	28 e0       	ldi	r18, 0x08	; 8
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	05 c0       	rjmp	.+10     	; 0x104c <vfprintf+0x27c>
    1042:	20 e1       	ldi	r18, 0x10	; 16
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x27c>
    1048:	20 e1       	ldi	r18, 0x10	; 16
    104a:	32 e0       	ldi	r19, 0x02	; 2
    104c:	f8 01       	movw	r30, r16
    104e:	b7 fe       	sbrs	r11, 7
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <vfprintf+0x290>
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	0c 5f       	subi	r16, 0xFC	; 252
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0x29c>
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 5f       	subi	r16, 0xFE	; 254
    106a:	1f 4f       	sbci	r17, 0xFF	; 255
    106c:	a3 01       	movw	r20, r6
    106e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__ultoa_invert>
    1072:	88 2e       	mov	r8, r24
    1074:	86 18       	sub	r8, r6
    1076:	fb 2d       	mov	r31, r11
    1078:	ff 77       	andi	r31, 0x7F	; 127
    107a:	3f 2e       	mov	r3, r31
    107c:	36 fe       	sbrs	r3, 6
    107e:	0d c0       	rjmp	.+26     	; 0x109a <vfprintf+0x2ca>
    1080:	23 2d       	mov	r18, r3
    1082:	2e 7f       	andi	r18, 0xFE	; 254
    1084:	a2 2e       	mov	r10, r18
    1086:	89 14       	cp	r8, r9
    1088:	58 f4       	brcc	.+22     	; 0x10a0 <vfprintf+0x2d0>
    108a:	34 fe       	sbrs	r3, 4
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <vfprintf+0x2d4>
    108e:	32 fc       	sbrc	r3, 2
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <vfprintf+0x2d4>
    1092:	83 2d       	mov	r24, r3
    1094:	8e 7e       	andi	r24, 0xEE	; 238
    1096:	a8 2e       	mov	r10, r24
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <vfprintf+0x2d4>
    109a:	b8 2c       	mov	r11, r8
    109c:	a3 2c       	mov	r10, r3
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <vfprintf+0x2d6>
    10a0:	b8 2c       	mov	r11, r8
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <vfprintf+0x2d6>
    10a4:	b9 2c       	mov	r11, r9
    10a6:	a4 fe       	sbrs	r10, 4
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <vfprintf+0x2f8>
    10aa:	fe 01       	movw	r30, r28
    10ac:	e8 0d       	add	r30, r8
    10ae:	f1 1d       	adc	r31, r1
    10b0:	80 81       	ld	r24, Z
    10b2:	80 33       	cpi	r24, 0x30	; 48
    10b4:	21 f4       	brne	.+8      	; 0x10be <vfprintf+0x2ee>
    10b6:	9a 2d       	mov	r25, r10
    10b8:	99 7e       	andi	r25, 0xE9	; 233
    10ba:	a9 2e       	mov	r10, r25
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <vfprintf+0x300>
    10be:	a2 fe       	sbrs	r10, 2
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <vfprintf+0x2fe>
    10c2:	b3 94       	inc	r11
    10c4:	b3 94       	inc	r11
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <vfprintf+0x300>
    10c8:	8a 2d       	mov	r24, r10
    10ca:	86 78       	andi	r24, 0x86	; 134
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <vfprintf+0x300>
    10ce:	b3 94       	inc	r11
    10d0:	a3 fc       	sbrc	r10, 3
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <vfprintf+0x326>
    10d4:	a0 fe       	sbrs	r10, 0
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0x314>
    10d8:	b2 14       	cp	r11, r2
    10da:	88 f4       	brcc	.+34     	; 0x10fe <vfprintf+0x32e>
    10dc:	28 0c       	add	r2, r8
    10de:	92 2c       	mov	r9, r2
    10e0:	9b 18       	sub	r9, r11
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <vfprintf+0x330>
    10e4:	b2 14       	cp	r11, r2
    10e6:	60 f4       	brcc	.+24     	; 0x1100 <vfprintf+0x330>
    10e8:	b6 01       	movw	r22, r12
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    10f2:	b3 94       	inc	r11
    10f4:	f7 cf       	rjmp	.-18     	; 0x10e4 <vfprintf+0x314>
    10f6:	b2 14       	cp	r11, r2
    10f8:	18 f4       	brcc	.+6      	; 0x1100 <vfprintf+0x330>
    10fa:	2b 18       	sub	r2, r11
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0x332>
    10fe:	98 2c       	mov	r9, r8
    1100:	21 2c       	mov	r2, r1
    1102:	a4 fe       	sbrs	r10, 4
    1104:	10 c0       	rjmp	.+32     	; 0x1126 <vfprintf+0x356>
    1106:	b6 01       	movw	r22, r12
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    1110:	a2 fe       	sbrs	r10, 2
    1112:	17 c0       	rjmp	.+46     	; 0x1142 <vfprintf+0x372>
    1114:	a1 fc       	sbrc	r10, 1
    1116:	03 c0       	rjmp	.+6      	; 0x111e <vfprintf+0x34e>
    1118:	88 e7       	ldi	r24, 0x78	; 120
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <vfprintf+0x352>
    111e:	88 e5       	ldi	r24, 0x58	; 88
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	b6 01       	movw	r22, r12
    1124:	0c c0       	rjmp	.+24     	; 0x113e <vfprintf+0x36e>
    1126:	8a 2d       	mov	r24, r10
    1128:	86 78       	andi	r24, 0x86	; 134
    112a:	59 f0       	breq	.+22     	; 0x1142 <vfprintf+0x372>
    112c:	a1 fe       	sbrs	r10, 1
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <vfprintf+0x364>
    1130:	8b e2       	ldi	r24, 0x2B	; 43
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <vfprintf+0x366>
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	a7 fc       	sbrc	r10, 7
    1138:	8d e2       	ldi	r24, 0x2D	; 45
    113a:	b6 01       	movw	r22, r12
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    1142:	89 14       	cp	r8, r9
    1144:	38 f4       	brcc	.+14     	; 0x1154 <vfprintf+0x384>
    1146:	b6 01       	movw	r22, r12
    1148:	80 e3       	ldi	r24, 0x30	; 48
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    1150:	9a 94       	dec	r9
    1152:	f7 cf       	rjmp	.-18     	; 0x1142 <vfprintf+0x372>
    1154:	8a 94       	dec	r8
    1156:	f3 01       	movw	r30, r6
    1158:	e8 0d       	add	r30, r8
    115a:	f1 1d       	adc	r31, r1
    115c:	80 81       	ld	r24, Z
    115e:	b6 01       	movw	r22, r12
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    1166:	81 10       	cpse	r8, r1
    1168:	f5 cf       	rjmp	.-22     	; 0x1154 <vfprintf+0x384>
    116a:	22 20       	and	r2, r2
    116c:	09 f4       	brne	.+2      	; 0x1170 <vfprintf+0x3a0>
    116e:	42 ce       	rjmp	.-892    	; 0xdf4 <vfprintf+0x24>
    1170:	b6 01       	movw	r22, r12
    1172:	80 e2       	ldi	r24, 0x20	; 32
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 df 08 	call	0x11be	; 0x11be <fputc>
    117a:	2a 94       	dec	r2
    117c:	f6 cf       	rjmp	.-20     	; 0x116a <vfprintf+0x39a>
    117e:	f6 01       	movw	r30, r12
    1180:	86 81       	ldd	r24, Z+6	; 0x06
    1182:	97 81       	ldd	r25, Z+7	; 0x07
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x3ba>
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	2b 96       	adiw	r28, 0x0b	; 11
    118c:	e2 e1       	ldi	r30, 0x12	; 18
    118e:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__epilogue_restores__>

00001192 <strnlen_P>:
    1192:	fc 01       	movw	r30, r24
    1194:	05 90       	lpm	r0, Z+
    1196:	61 50       	subi	r22, 0x01	; 1
    1198:	70 40       	sbci	r23, 0x00	; 0
    119a:	01 10       	cpse	r0, r1
    119c:	d8 f7       	brcc	.-10     	; 0x1194 <strnlen_P+0x2>
    119e:	80 95       	com	r24
    11a0:	90 95       	com	r25
    11a2:	8e 0f       	add	r24, r30
    11a4:	9f 1f       	adc	r25, r31
    11a6:	08 95       	ret

000011a8 <strnlen>:
    11a8:	fc 01       	movw	r30, r24
    11aa:	61 50       	subi	r22, 0x01	; 1
    11ac:	70 40       	sbci	r23, 0x00	; 0
    11ae:	01 90       	ld	r0, Z+
    11b0:	01 10       	cpse	r0, r1
    11b2:	d8 f7       	brcc	.-10     	; 0x11aa <strnlen+0x2>
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	8e 0f       	add	r24, r30
    11ba:	9f 1f       	adc	r25, r31
    11bc:	08 95       	ret

000011be <fputc>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	fb 01       	movw	r30, r22
    11c8:	23 81       	ldd	r18, Z+3	; 0x03
    11ca:	21 fd       	sbrc	r18, 1
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <fputc+0x16>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	2c c0       	rjmp	.+88     	; 0x122c <fputc+0x6e>
    11d4:	22 ff       	sbrs	r18, 2
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <fputc+0x46>
    11d8:	46 81       	ldd	r20, Z+6	; 0x06
    11da:	57 81       	ldd	r21, Z+7	; 0x07
    11dc:	24 81       	ldd	r18, Z+4	; 0x04
    11de:	35 81       	ldd	r19, Z+5	; 0x05
    11e0:	42 17       	cp	r20, r18
    11e2:	53 07       	cpc	r21, r19
    11e4:	44 f4       	brge	.+16     	; 0x11f6 <fputc+0x38>
    11e6:	a0 81       	ld	r26, Z
    11e8:	b1 81       	ldd	r27, Z+1	; 0x01
    11ea:	9d 01       	movw	r18, r26
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	20 83       	st	Z, r18
    11f2:	31 83       	std	Z+1, r19	; 0x01
    11f4:	8c 93       	st	X, r24
    11f6:	26 81       	ldd	r18, Z+6	; 0x06
    11f8:	37 81       	ldd	r19, Z+7	; 0x07
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	26 83       	std	Z+6, r18	; 0x06
    1200:	37 83       	std	Z+7, r19	; 0x07
    1202:	14 c0       	rjmp	.+40     	; 0x122c <fputc+0x6e>
    1204:	8b 01       	movw	r16, r22
    1206:	ec 01       	movw	r28, r24
    1208:	fb 01       	movw	r30, r22
    120a:	00 84       	ldd	r0, Z+8	; 0x08
    120c:	f1 85       	ldd	r31, Z+9	; 0x09
    120e:	e0 2d       	mov	r30, r0
    1210:	09 95       	icall
    1212:	89 2b       	or	r24, r25
    1214:	e1 f6       	brne	.-72     	; 0x11ce <fputc+0x10>
    1216:	d8 01       	movw	r26, r16
    1218:	16 96       	adiw	r26, 0x06	; 6
    121a:	8d 91       	ld	r24, X+
    121c:	9c 91       	ld	r25, X
    121e:	17 97       	sbiw	r26, 0x07	; 7
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	16 96       	adiw	r26, 0x06	; 6
    1224:	8d 93       	st	X+, r24
    1226:	9c 93       	st	X, r25
    1228:	17 97       	sbiw	r26, 0x07	; 7
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <__ultoa_invert>:
    1236:	fa 01       	movw	r30, r20
    1238:	aa 27       	eor	r26, r26
    123a:	28 30       	cpi	r18, 0x08	; 8
    123c:	51 f1       	breq	.+84     	; 0x1292 <__ultoa_invert+0x5c>
    123e:	20 31       	cpi	r18, 0x10	; 16
    1240:	81 f1       	breq	.+96     	; 0x12a2 <__ultoa_invert+0x6c>
    1242:	e8 94       	clt
    1244:	6f 93       	push	r22
    1246:	6e 7f       	andi	r22, 0xFE	; 254
    1248:	6e 5f       	subi	r22, 0xFE	; 254
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	af 4f       	sbci	r26, 0xFF	; 255
    1252:	b1 e0       	ldi	r27, 0x01	; 1
    1254:	3e d0       	rcall	.+124    	; 0x12d2 <__ultoa_invert+0x9c>
    1256:	b4 e0       	ldi	r27, 0x04	; 4
    1258:	3c d0       	rcall	.+120    	; 0x12d2 <__ultoa_invert+0x9c>
    125a:	67 0f       	add	r22, r23
    125c:	78 1f       	adc	r23, r24
    125e:	89 1f       	adc	r24, r25
    1260:	9a 1f       	adc	r25, r26
    1262:	a1 1d       	adc	r26, r1
    1264:	68 0f       	add	r22, r24
    1266:	79 1f       	adc	r23, r25
    1268:	8a 1f       	adc	r24, r26
    126a:	91 1d       	adc	r25, r1
    126c:	a1 1d       	adc	r26, r1
    126e:	6a 0f       	add	r22, r26
    1270:	71 1d       	adc	r23, r1
    1272:	81 1d       	adc	r24, r1
    1274:	91 1d       	adc	r25, r1
    1276:	a1 1d       	adc	r26, r1
    1278:	20 d0       	rcall	.+64     	; 0x12ba <__ultoa_invert+0x84>
    127a:	09 f4       	brne	.+2      	; 0x127e <__ultoa_invert+0x48>
    127c:	68 94       	set
    127e:	3f 91       	pop	r19
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	26 9f       	mul	r18, r22
    1284:	11 24       	eor	r1, r1
    1286:	30 19       	sub	r19, r0
    1288:	30 5d       	subi	r19, 0xD0	; 208
    128a:	31 93       	st	Z+, r19
    128c:	de f6       	brtc	.-74     	; 0x1244 <__ultoa_invert+0xe>
    128e:	cf 01       	movw	r24, r30
    1290:	08 95       	ret
    1292:	46 2f       	mov	r20, r22
    1294:	47 70       	andi	r20, 0x07	; 7
    1296:	40 5d       	subi	r20, 0xD0	; 208
    1298:	41 93       	st	Z+, r20
    129a:	b3 e0       	ldi	r27, 0x03	; 3
    129c:	0f d0       	rcall	.+30     	; 0x12bc <__ultoa_invert+0x86>
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__ultoa_invert+0x5c>
    12a0:	f6 cf       	rjmp	.-20     	; 0x128e <__ultoa_invert+0x58>
    12a2:	46 2f       	mov	r20, r22
    12a4:	4f 70       	andi	r20, 0x0F	; 15
    12a6:	40 5d       	subi	r20, 0xD0	; 208
    12a8:	4a 33       	cpi	r20, 0x3A	; 58
    12aa:	18 f0       	brcs	.+6      	; 0x12b2 <__ultoa_invert+0x7c>
    12ac:	49 5d       	subi	r20, 0xD9	; 217
    12ae:	31 fd       	sbrc	r19, 1
    12b0:	40 52       	subi	r20, 0x20	; 32
    12b2:	41 93       	st	Z+, r20
    12b4:	02 d0       	rcall	.+4      	; 0x12ba <__ultoa_invert+0x84>
    12b6:	a9 f7       	brne	.-22     	; 0x12a2 <__ultoa_invert+0x6c>
    12b8:	ea cf       	rjmp	.-44     	; 0x128e <__ultoa_invert+0x58>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	a6 95       	lsr	r26
    12be:	97 95       	ror	r25
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	ba 95       	dec	r27
    12c8:	c9 f7       	brne	.-14     	; 0x12bc <__ultoa_invert+0x86>
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	61 05       	cpc	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	08 95       	ret
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	0a 2e       	mov	r0, r26
    12d8:	06 94       	lsr	r0
    12da:	57 95       	ror	r21
    12dc:	47 95       	ror	r20
    12de:	37 95       	ror	r19
    12e0:	27 95       	ror	r18
    12e2:	ba 95       	dec	r27
    12e4:	c9 f7       	brne	.-14     	; 0x12d8 <__ultoa_invert+0xa2>
    12e6:	62 0f       	add	r22, r18
    12e8:	73 1f       	adc	r23, r19
    12ea:	84 1f       	adc	r24, r20
    12ec:	95 1f       	adc	r25, r21
    12ee:	a0 1d       	adc	r26, r0
    12f0:	08 95       	ret

000012f2 <ccp_write_io>:
    12f2:	dc 01       	movw	r26, r24
    12f4:	28 ed       	ldi	r18, 0xD8	; 216
    12f6:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6bd0>
    12fa:	6c 93       	st	X, r22
    12fc:	08 95       	ret

000012fe <__prologue_saves__>:
    12fe:	2f 92       	push	r2
    1300:	3f 92       	push	r3
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	ca 1b       	sub	r28, r26
    1328:	db 0b       	sbc	r29, r27
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	09 94       	ijmp

00001330 <__epilogue_restores__>:
    1330:	2a 88       	ldd	r2, Y+18	; 0x12
    1332:	39 88       	ldd	r3, Y+17	; 0x11
    1334:	48 88       	ldd	r4, Y+16	; 0x10
    1336:	5f 84       	ldd	r5, Y+15	; 0x0f
    1338:	6e 84       	ldd	r6, Y+14	; 0x0e
    133a:	7d 84       	ldd	r7, Y+13	; 0x0d
    133c:	8c 84       	ldd	r8, Y+12	; 0x0c
    133e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1340:	aa 84       	ldd	r10, Y+10	; 0x0a
    1342:	b9 84       	ldd	r11, Y+9	; 0x09
    1344:	c8 84       	ldd	r12, Y+8	; 0x08
    1346:	df 80       	ldd	r13, Y+7	; 0x07
    1348:	ee 80       	ldd	r14, Y+6	; 0x06
    134a:	fd 80       	ldd	r15, Y+5	; 0x05
    134c:	0c 81       	ldd	r16, Y+4	; 0x04
    134e:	1b 81       	ldd	r17, Y+3	; 0x03
    1350:	aa 81       	ldd	r26, Y+2	; 0x02
    1352:	b9 81       	ldd	r27, Y+1	; 0x01
    1354:	ce 0f       	add	r28, r30
    1356:	d1 1d       	adc	r29, r1
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	ed 01       	movw	r28, r26
    135e:	08 95       	ret

00001360 <_exit>:
    1360:	f8 94       	cli

00001362 <__stop_program>:
    1362:	ff cf       	rjmp	.-2      	; 0x1362 <__stop_program>
