
Attiny1624-Tower-Top-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000012eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015b  000090fc  000010fc  00001190  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000013  00803800  00803800  000012eb  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000012eb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00001388  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000398c  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023c0  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fd1  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00008220  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d3e  00000000  00000000  000084e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000744  00000000  00000000  0000a21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000a962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	df e3       	ldi	r29, 0x3F	; 63
      82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
      84:	28 e3       	ldi	r18, 0x38	; 56
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b8 e3       	ldi	r27, 0x38	; 56
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a3 31       	cpi	r26, 0x13	; 19
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
      98:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC0_init>:
 */ 
 #include "Settings.h"
 #include "ADCVar.h"

 void ADC0_init(){
	 ADC0.CTRLA = ADC_ENABLE_bm; //adc enable
      a0:	e0 e0       	ldi	r30, 0x00	; 0
      a2:	f6 e0       	ldi	r31, 0x06	; 6
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 83       	st	Z, r24
	 ADC0.CTRLB = ADC_PRESC_DIV4_gc; // 20M / 4 = 5MHz ADC clock (MAX adc clock is 6M)
      a8:	81 83       	std	Z+1, r24	; 0x01
	 ADC0.CTRLC = (TIMEBASE_VALUE << ADC_TIMEBASE_gp);
      aa:	80 ea       	ldi	r24, 0xA0	; 160
      ac:	82 83       	std	Z+2, r24	; 0x02
	 ADC0.CTRLE = 0; //How long to take a one sample (ADC clock cycles) so it will take 0+ 0.5 = half cycle
      ae:	10 86       	std	Z+8, r1	; 0x08
	 ADC0.CTRLF = ADC_SAMPNUM_NONE_gc ; //samples:
      b0:	11 86       	std	Z+9, r1	; 0x09
	 ADC0.COMMAND = ADC_MODE_SINGLE_12BIT_gc; // 1 sample
      b2:	80 e1       	ldi	r24, 0x10	; 16
      b4:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      b6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f740a>
      ba:	80 fd       	sbrc	r24, 0
      bc:	fc cf       	rjmp	.-8      	; 0xb6 <ADC0_init+0x16>

 }
      be:	08 95       	ret

000000c0 <ADC0_Read>:

 uint16_t ADC0_Read(){
	 ADC0.COMMAND |= ADC_START_IMMEDIATE_gc; //start conversion
      c0:	e0 e0       	ldi	r30, 0x00	; 0
      c2:	f6 e0       	ldi	r31, 0x06	; 6
      c4:	82 85       	ldd	r24, Z+10	; 0x0a
      c6:	81 60       	ori	r24, 0x01	; 1
      c8:	82 87       	std	Z+10, r24	; 0x0a
	 while (ADC0.STATUS & ADC_ADCBUSY_bm); // wait untill all settings will be set up
      ca:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <crc6_table+0x7f740a>
      ce:	80 fd       	sbrc	r24, 0
      d0:	fc cf       	rjmp	.-8      	; 0xca <ADC0_Read+0xa>
	 while (!(ADC0.INTFLAGS & ADC_SAMPRDY_bm));
      d2:	80 91 05 06 	lds	r24, 0x0605	; 0x800605 <crc6_table+0x7f7409>
      d6:	81 ff       	sbrs	r24, 1
      d8:	fc cf       	rjmp	.-8      	; 0xd2 <ADC0_Read+0x12>
	 ADC0.INTFLAGS = ADC_SAMPRDY_bm; //clear result ready flag
      da:	e0 e0       	ldi	r30, 0x00	; 0
      dc:	f6 e0       	ldi	r31, 0x06	; 6
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	85 83       	std	Z+5, r24	; 0x05
	 return ADC0.SAMPLE; //return average ADC value of 1024 measurements
      e2:	84 89       	ldd	r24, Z+20	; 0x14
      e4:	95 89       	ldd	r25, Z+21	; 0x15
 }
      e6:	08 95       	ret

000000e8 <ReadSolarCells>:


void ReadSolarCells(solarrcells_t channel){
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29

	ADC_VALUES *voltageORcurrent = (channel == Voltage) ? &ReadVoltage : &ReadCurrent; //selecting object where data will be saved according to selected channel (Voltage or Current)
      ec:	85 30       	cpi	r24, 0x05	; 5
      ee:	19 f4       	brne	.+6      	; 0xf6 <ReadSolarCells+0xe>
      f0:	c0 e0       	ldi	r28, 0x00	; 0
      f2:	d8 e3       	ldi	r29, 0x38	; 56
      f4:	02 c0       	rjmp	.+4      	; 0xfa <ReadSolarCells+0x12>
      f6:	c2 e0       	ldi	r28, 0x02	; 2
      f8:	d8 e3       	ldi	r29, 0x38	; 56

	ADC0.MUXPOS = channel;
      fa:	e0 e0       	ldi	r30, 0x00	; 0
      fc:	f6 e0       	ldi	r31, 0x06	; 6
      fe:	84 87       	std	Z+12, r24	; 0x0c
	
	ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_1024MV_gc;  // 1.024V 
     100:	82 81       	ldd	r24, Z+2	; 0x02
     102:	88 7f       	andi	r24, 0xF8	; 248
     104:	84 60       	ori	r24, 0x04	; 4
     106:	82 83       	std	Z+2, r24	; 0x02
	if(ADC0_Read()>= 0xff0){ //if more or equal to 4080 ADC steps
     108:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     10c:	80 3f       	cpi	r24, 0xF0	; 240
     10e:	9f 40       	sbci	r25, 0x0F	; 15
     110:	08 f4       	brcc	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	40 c0       	rjmp	.+128    	; 0x194 <__EEPROM_REGION_LENGTH__+0x94>
		ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_2048MV_gc; //2.048V
     114:	e0 e0       	ldi	r30, 0x00	; 0
     116:	f6 e0       	ldi	r31, 0x06	; 6
     118:	82 81       	ldd	r24, Z+2	; 0x02
     11a:	88 7f       	andi	r24, 0xF8	; 248
     11c:	85 60       	ori	r24, 0x05	; 5
     11e:	82 83       	std	Z+2, r24	; 0x02
		if (ADC0_Read()>= 0xff0){
     120:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     124:	80 3f       	cpi	r24, 0xF0	; 240
     126:	9f 40       	sbci	r25, 0x0F	; 15
     128:	50 f1       	brcs	.+84     	; 0x17e <__EEPROM_REGION_LENGTH__+0x7e>
			ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_4096MV_gc; //4.096V
     12a:	e0 e0       	ldi	r30, 0x00	; 0
     12c:	f6 e0       	ldi	r31, 0x06	; 6
     12e:	82 81       	ldd	r24, Z+2	; 0x02
     130:	87 60       	ori	r24, 0x07	; 7
     132:	82 83       	std	Z+2, r24	; 0x02
			if(ADC0_Read()>= 0xff0){
     134:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     138:	80 3f       	cpi	r24, 0xF0	; 240
     13a:	9f 40       	sbci	r25, 0x0F	; 15
     13c:	b8 f0       	brcs	.+46     	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
				ADC0.CTRLC = (ADC0.CTRLC & ~ADC_REFSEL_gm) | ADC_REFSEL_VDD_gc; //ref voltage is 5V (TMC1100a4 = 400mV/A min: 0.125A, max: 12A), sollar cells max is ScI 10.64A+-3% ~11A, 11 * 0.4 = 4.4V > 4.096Vref
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f6 e0       	ldi	r31, 0x06	; 6
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	88 7f       	andi	r24, 0xF8	; 248
     146:	82 83       	std	Z+2, r24	; 0x02
				voltageORcurrent->Result = (double)ADC0_Read()/3.2768; //Assume Vdd is 5.0V. 32.768 same as /327.68 * 10
     148:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     14c:	bc 01       	movw	r22, r24
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 b7 04 	call	0x96e	; 0x96e <__floatunsisf>
     156:	27 e1       	ldi	r18, 0x17	; 23
     158:	37 eb       	ldi	r19, 0xB7	; 183
     15a:	41 e5       	ldi	r20, 0x51	; 81
     15c:	50 e4       	ldi	r21, 0x40	; 64
     15e:	0e 94 16 04 	call	0x82c	; 0x82c <__divsf3>
     162:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
     166:	68 83       	st	Y, r22
     168:	79 83       	std	Y+1, r23	; 0x01
     16a:	1e c0       	rjmp	.+60     	; 0x1a8 <__EEPROM_REGION_LENGTH__+0xa8>
			}
			else
			voltageORcurrent->Result = ADC0_Read()>>2;
     16c:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     170:	96 95       	lsr	r25
     172:	87 95       	ror	r24
     174:	96 95       	lsr	r25
     176:	87 95       	ror	r24
     178:	88 83       	st	Y, r24
     17a:	99 83       	std	Y+1, r25	; 0x01
     17c:	15 c0       	rjmp	.+42     	; 0x1a8 <__EEPROM_REGION_LENGTH__+0xa8>
		}
		else
		voltageORcurrent->Result = ADC0_Read()>>3;
     17e:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     182:	96 95       	lsr	r25
     184:	87 95       	ror	r24
     186:	96 95       	lsr	r25
     188:	87 95       	ror	r24
     18a:	96 95       	lsr	r25
     18c:	87 95       	ror	r24
     18e:	88 83       	st	Y, r24
     190:	99 83       	std	Y+1, r25	; 0x01
     192:	0a c0       	rjmp	.+20     	; 0x1a8 <__EEPROM_REGION_LENGTH__+0xa8>
	}
	else
	voltageORcurrent->Result = ADC0_Read()>>4;  // Read ADC value, scale it, and round the result
     194:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC0_Read>
     198:	92 95       	swap	r25
     19a:	82 95       	swap	r24
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	89 27       	eor	r24, r25
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 27       	eor	r24, r25
     1a4:	88 83       	st	Y, r24
     1a6:	99 83       	std	Y+1, r25	; 0x01
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <CLOCK_INHF_clock_init>:
	/* Configuration complete;*/
}

void CLOCK_INHF_clock_init() {
	/* Enable the internal oscillator with a frequency of 20 MHz. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	80 e6       	ldi	r24, 0x60	; 96
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 45 08 	call	0x108a	; 0x108a <ccp_write_io>
	// For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e6       	ldi	r24, 0x61	; 97
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 45 08 	call	0x108a	; 0x108a <ccp_write_io>

	/* Wait for the oscillator change to complete. */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
     1c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc6_table+0x7f6e67>
     1c6:	80 fd       	sbrc	r24, 0
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <CLOCK_INHF_clock_init+0x14>
     1ca:	08 95       	ret

000001cc <crc6_mt6701_lookup>:
 * @brief Calculates the CRC-6 checksum using a lookup table.
 * 
 * @param data 18-bit data word (excluding CRC) from the MT6701 sensor.
 * @return Computed 6-bit CRC value.
 */
uint8_t crc6_mt6701_lookup(uint32_t data) {
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
    return crc6_table[crc6_table[crc6_table[0 ^ ((data >> 12) & 0x3F)] ^ ((data >> 6) & 0x3F)] ^ (data & 0x3F)];
     1d0:	8b 01       	movw	r16, r22
     1d2:	9c 01       	movw	r18, r24
     1d4:	0f 2e       	mov	r0, r31
     1d6:	fc e0       	ldi	r31, 0x0C	; 12
     1d8:	36 95       	lsr	r19
     1da:	27 95       	ror	r18
     1dc:	17 95       	ror	r17
     1de:	07 95       	ror	r16
     1e0:	fa 95       	dec	r31
     1e2:	d1 f7       	brne	.-12     	; 0x1d8 <crc6_mt6701_lookup+0xc>
     1e4:	f0 2d       	mov	r31, r0
     1e6:	0f 73       	andi	r16, 0x3F	; 63
     1e8:	11 27       	eor	r17, r17
     1ea:	22 27       	eor	r18, r18
     1ec:	33 27       	eor	r19, r19
     1ee:	f8 01       	movw	r30, r16
     1f0:	e4 50       	subi	r30, 0x04	; 4
     1f2:	fe 46       	sbci	r31, 0x6E	; 110
     1f4:	40 81       	ld	r20, Z
     1f6:	8b 01       	movw	r16, r22
     1f8:	9c 01       	movw	r18, r24
     1fa:	68 94       	set
     1fc:	15 f8       	bld	r1, 5
     1fe:	36 95       	lsr	r19
     200:	27 95       	ror	r18
     202:	17 95       	ror	r17
     204:	07 95       	ror	r16
     206:	16 94       	lsr	r1
     208:	d1 f7       	brne	.-12     	; 0x1fe <crc6_mt6701_lookup+0x32>
     20a:	0f 73       	andi	r16, 0x3F	; 63
     20c:	11 27       	eor	r17, r17
     20e:	22 27       	eor	r18, r18
     210:	33 27       	eor	r19, r19
     212:	04 27       	eor	r16, r20
     214:	f8 01       	movw	r30, r16
     216:	e4 50       	subi	r30, 0x04	; 4
     218:	fe 46       	sbci	r31, 0x6E	; 110
     21a:	20 81       	ld	r18, Z
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	8f 73       	andi	r24, 0x3F	; 63
     222:	99 27       	eor	r25, r25
     224:	aa 27       	eor	r26, r26
     226:	bb 27       	eor	r27, r27
     228:	82 27       	eor	r24, r18
     22a:	fc 01       	movw	r30, r24
     22c:	e4 50       	subi	r30, 0x04	; 4
     22e:	fe 46       	sbci	r31, 0x6E	; 110
}
     230:	80 81       	ld	r24, Z
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	08 95       	ret

00000238 <MT6701CRC>:
 *
 * @param[in,out] data Pointer to the 24-bit data word with CRC.
 *                     The function modifies this value by removing the last 6 bits (CRC).
 * @return 0 if the CRC is correct, 1 otherwise.
 */
uint8_t MT6701CRC(uint32_t *data) {
     238:	cf 93       	push	r28
     23a:	fc 01       	movw	r30, r24
    uint8_t received_crc = *data & 0x3F; ///< Extract the CRC (last 6 bits)
     23c:	80 81       	ld	r24, Z
     23e:	91 81       	ldd	r25, Z+1	; 0x01
     240:	a2 81       	ldd	r26, Z+2	; 0x02
     242:	b3 81       	ldd	r27, Z+3	; 0x03
     244:	c8 2f       	mov	r28, r24
     246:	cf 73       	andi	r28, 0x3F	; 63
    *data = *data >> 6; ///< Remove CRC, leaving only the actual data
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	68 94       	set
     24e:	15 f8       	bld	r1, 5
     250:	96 95       	lsr	r25
     252:	87 95       	ror	r24
     254:	77 95       	ror	r23
     256:	67 95       	ror	r22
     258:	16 94       	lsr	r1
     25a:	d1 f7       	brne	.-12     	; 0x250 <MT6701CRC+0x18>
     25c:	60 83       	st	Z, r22
     25e:	71 83       	std	Z+1, r23	; 0x01
     260:	82 83       	std	Z+2, r24	; 0x02
     262:	93 83       	std	Z+3, r25	; 0x03
    uint8_t calculated_crc = crc6_mt6701_lookup(*data); ///< Compute expected CRC
     264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <crc6_mt6701_lookup>
    return received_crc == calculated_crc ? 0 : 1; ///< Return 0 if CRC matches, otherwise 1
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	c8 13       	cpse	r28, r24
     26c:	01 c0       	rjmp	.+2      	; 0x270 <MT6701CRC+0x38>
     26e:	90 e0       	ldi	r25, 0x00	; 0
}
     270:	89 2f       	mov	r24, r25
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     276:	2f 92       	push	r2
     278:	3f 92       	push	r3
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	2b 97       	sbiw	r28, 0x0b	; 11
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	c2 2e       	mov	r12, r18
     2a6:	b3 2e       	mov	r11, r19
     2a8:	a4 2e       	mov	r10, r20
     2aa:	95 2e       	mov	r9, r21
     2ac:	86 2e       	mov	r8, r22
     2ae:	77 2e       	mov	r7, r23
     2b0:	68 2e       	mov	r6, r24
     2b2:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     2b4:	f2 2e       	mov	r15, r18
     2b6:	03 2f       	mov	r16, r19
     2b8:	14 2f       	mov	r17, r20
     2ba:	5a 87       	std	Y+10, r21	; 0x0a
     2bc:	69 83       	std	Y+1, r22	; 0x01
     2be:	b7 2f       	mov	r27, r23
     2c0:	d8 2e       	mov	r13, r24
     2c2:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     2c4:	e0 e0       	ldi	r30, 0x00	; 0
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     2c8:	14 c0       	rjmp	.+40     	; 0x2f2 <crc8_cdma2000+0x7c>
        length++;
     2ca:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     2cc:	2f 2d       	mov	r18, r15
     2ce:	30 2f       	mov	r19, r16
     2d0:	41 2f       	mov	r20, r17
     2d2:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d4:	69 81       	ldd	r22, Y+1	; 0x01
     2d6:	7b 2f       	mov	r23, r27
     2d8:	8d 2d       	mov	r24, r13
     2da:	9e 2d       	mov	r25, r14
     2dc:	08 e0       	ldi	r16, 0x08	; 8
     2de:	0e 94 60 05 	call	0xac0	; 0xac0 <__lshrdi3>
     2e2:	f2 2e       	mov	r15, r18
     2e4:	03 2f       	mov	r16, r19
     2e6:	14 2f       	mov	r17, r20
     2e8:	5a 87       	std	Y+10, r21	; 0x0a
     2ea:	69 83       	std	Y+1, r22	; 0x01
     2ec:	b7 2f       	mov	r27, r23
     2ee:	d8 2e       	mov	r13, r24
     2f0:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     2f2:	2f 2d       	mov	r18, r15
     2f4:	30 2f       	mov	r19, r16
     2f6:	41 2f       	mov	r20, r17
     2f8:	5a 85       	ldd	r21, Y+10	; 0x0a
     2fa:	69 81       	ldd	r22, Y+1	; 0x01
     2fc:	7b 2f       	mov	r23, r27
     2fe:	8d 2d       	mov	r24, r13
     300:	9e 2d       	mov	r25, r14
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__cmpdi2_s8>
     308:	01 f7       	brne	.-64     	; 0x2ca <crc8_cdma2000+0x54>
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	8a 87       	std	Y+10, r24	; 0x0a
     30e:	cb 86       	std	Y+11, r12	; 0x0b
     310:	b9 82       	std	Y+1, r11	; 0x01
     312:	4a 2c       	mov	r4, r10
     314:	39 2c       	mov	r3, r9
     316:	28 2c       	mov	r2, r8
     318:	1a c0       	rjmp	.+52     	; 0x34e <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     31a:	8d 01       	movw	r16, r26
     31c:	00 0f       	add	r16, r16
     31e:	11 1f       	adc	r17, r17
     320:	00 0f       	add	r16, r16
     322:	11 1f       	adc	r17, r17
     324:	00 0f       	add	r16, r16
     326:	11 1f       	adc	r17, r17
     328:	2b 85       	ldd	r18, Y+11	; 0x0b
     32a:	39 81       	ldd	r19, Y+1	; 0x01
     32c:	44 2d       	mov	r20, r4
     32e:	53 2d       	mov	r21, r3
     330:	62 2d       	mov	r22, r2
     332:	77 2d       	mov	r23, r7
     334:	86 2d       	mov	r24, r6
     336:	95 2d       	mov	r25, r5
     338:	0e 94 60 05 	call	0xac0	; 0xac0 <__lshrdi3>
     33c:	8a 84       	ldd	r8, Y+10	; 0x0a
     33e:	82 26       	eor	r8, r18
     340:	91 2c       	mov	r9, r1
     342:	f4 01       	movw	r30, r8
     344:	e4 50       	subi	r30, 0x04	; 4
     346:	ff 46       	sbci	r31, 0x6F	; 111
     348:	80 81       	ld	r24, Z
     34a:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     34c:	fd 01       	movw	r30, r26
     34e:	df 01       	movw	r26, r30
     350:	11 97       	sbiw	r26, 0x01	; 1
     352:	ef 2b       	or	r30, r31
     354:	11 f7       	brne	.-60     	; 0x31a <crc8_cdma2000+0xa4>
     356:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     358:	2b 96       	adiw	r28, 0x0b	; 11
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	7f 90       	pop	r7
     378:	6f 90       	pop	r6
     37a:	5f 90       	pop	r5
     37c:	4f 90       	pop	r4
     37e:	3f 90       	pop	r3
     380:	2f 90       	pop	r2
     382:	08 95       	ret

00000384 <GPIO_init>:
 */

#include "Settings.h"

void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc | PORTMUX_USART1_DEFAULT_gc; ///< Set USART0 and UASRT1 to default pins
     384:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <crc6_table+0x7f73e6>

    PORTB.DIRSET = PIN1_bm | PIN2_bm; ///< Set PB1 as XCK (MT6701 CLK) out and PB2 as TX for dummy data sending
     388:	e0 e2       	ldi	r30, 0x20	; 32
     38a:	f4 e0       	ldi	r31, 0x04	; 4
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)    
     390:	88 e0       	ldi	r24, 0x08	; 8
     392:	82 8b       	std	Z+18, r24	; 0x12
    PORTB.DIRCLR = PIN0_bm | PIN3_bm; ///< Set PB0 as input (Y MIN), PB3 as input (USART0 RX as MISO (MT6701 DO))
     394:	99 e0       	ldi	r25, 0x09	; 9
     396:	92 83       	std	Z+2, r25	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB0 (Y MIN)
     398:	80 8b       	std	Z+16, r24	; 0x10
    PORTB.PIN3CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB3 (USART0 RX)
     39a:	83 8b       	std	Z+19, r24	; 0x13

    PORTA.DIRSET = PIN1_bm | PIN6_bm | PIN7_bm; ///< Set PA1 as (USART1 LED TX), PA6 as AZSS (MT6701 CSN),  PA7 as ELSS (MT6701 CSN)
     39c:	e0 e0       	ldi	r30, 0x00	; 0
     39e:	f4 e0       	ldi	r31, 0x04	; 4
     3a0:	92 ec       	ldi	r25, 0xC2	; 194
     3a2:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PA1 (USART1 TX LED TX)
     3a4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.DIRCLR = PIN2_bm ; ///< Set PA2 as input (Y MAX)
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	92 83       	std	Z+2, r25	; 0x02
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;///< Enable pull-up for PA2 (Y MAX)
     3aa:	82 8b       	std	Z+18, r24	; 0x12
    PORTA.OUTSET = PIN6_bm | PIN7_bm; ///< Keep All SS high
     3ac:	80 ec       	ldi	r24, 0xC0	; 192
     3ae:	85 83       	std	Z+5, r24	; 0x05

	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA4 (SC Current)
     3b0:	94 8b       	std	Z+20, r25	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc; ///< Turn off digital buffer for PA5 (SC Voltage)
     3b2:	95 8b       	std	Z+21, r25	; 0x15
     3b4:	08 95       	ret

000003b6 <main>:
 */

int main(void)
{
	//CLOCK_XOSCHF_clock_init(); 
    CLOCK_INHF_clock_init(); ///< Initialize system clock
     3b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
     3ba:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
     3be:	0e 94 24 03 	call	0x648	; 0x648 <USART0_init>
	USART1_init();
     3c2:	0e 94 4d 03 	call	0x69a	; 0x69a <USART1_init>
	ADC0_init();
     3c6:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC0_init>

    while (1) 
    {
        MT6701_SSI_Angle(Elevation_Angle); ///< Read MT6701 sensor data
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	0e 94 97 02 	call	0x52e	; 0x52e <MT6701_SSI_Angle>
        MT6701_SSI_Angle(Azimuth_Angle); ///< Read MT6701 sensor data
     3d0:	80 e4       	ldi	r24, 0x40	; 64
     3d2:	0e 94 97 02 	call	0x52e	; 0x52e <MT6701_SSI_Angle>
		ReadSolarCells(Voltage);
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	0e 94 74 00 	call	0xe8	; 0xe8 <ReadSolarCells>
		ReadSolarCells(Current);
     3dc:	84 e0       	ldi	r24, 0x04	; 4
     3de:	0e 94 74 00 	call	0xe8	; 0xe8 <ReadSolarCells>
		uint8_t y = YEndSwitches();
     3e2:	0e 94 9b 03 	call	0x736	; 0x736 <YEndSwitches>
     3e6:	d8 2e       	mov	r13, r24
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y;
     3e8:	ca e0       	ldi	r28, 0x0A	; 10
     3ea:	d8 e3       	ldi	r29, 0x38	; 56
     3ec:	48 81       	ld	r20, Y
     3ee:	59 81       	ldd	r21, Y+1	; 0x01
     3f0:	24 2f       	mov	r18, r20
     3f2:	35 2f       	mov	r19, r21
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0c e2       	ldi	r16, 0x2C	; 44
     402:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ashldi3>
     406:	e2 2f       	mov	r30, r18
     408:	93 2e       	mov	r9, r19
     40a:	c4 2e       	mov	r12, r20
     40c:	f5 2f       	mov	r31, r21
     40e:	a6 2e       	mov	r10, r22
     410:	17 2f       	mov	r17, r23
     412:	78 2e       	mov	r7, r24
     414:	89 2e       	mov	r8, r25
     416:	0f 2e       	mov	r0, r31
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	ef 2e       	mov	r14, r31
     41c:	f8 e3       	ldi	r31, 0x38	; 56
     41e:	ff 2e       	mov	r15, r31
     420:	f0 2d       	mov	r31, r0
     422:	d7 01       	movw	r26, r14
     424:	4d 91       	ld	r20, X+
     426:	5c 91       	ld	r21, X
     428:	24 2f       	mov	r18, r20
     42a:	35 2f       	mov	r19, r21
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0c e1       	ldi	r16, 0x1C	; 28
     43a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ashldi3>
     43e:	e2 2b       	or	r30, r18
     440:	29 2c       	mov	r2, r9
     442:	23 2a       	or	r2, r19
     444:	c4 2a       	or	r12, r20
     446:	f5 2b       	or	r31, r21
     448:	3a 2c       	mov	r3, r10
     44a:	36 2a       	or	r3, r22
     44c:	17 2b       	or	r17, r23
     44e:	b7 2d       	mov	r27, r7
     450:	b8 2b       	or	r27, r24
     452:	a8 2d       	mov	r26, r8
     454:	a9 2b       	or	r26, r25
     456:	40 90 00 38 	lds	r4, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     45a:	50 90 01 38 	lds	r5, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
     45e:	24 2d       	mov	r18, r4
     460:	35 2d       	mov	r19, r5
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	00 e1       	ldi	r16, 0x10	; 16
     470:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ashldi3>
     474:	e2 2b       	or	r30, r18
     476:	92 2c       	mov	r9, r2
     478:	93 2a       	or	r9, r19
     47a:	c4 2a       	or	r12, r20
     47c:	f5 2b       	or	r31, r21
     47e:	a3 2c       	mov	r10, r3
     480:	a6 2a       	or	r10, r22
     482:	b1 2e       	mov	r11, r17
     484:	b7 2a       	or	r11, r23
     486:	00 91 02 38 	lds	r16, 0x3802	; 0x803802 <ReadCurrent>
     48a:	10 91 03 38 	lds	r17, 0x3803	; 0x803803 <ReadCurrent+0x1>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	00 0f       	add	r16, r16
     494:	11 1f       	adc	r17, r17
     496:	22 1f       	adc	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	00 0f       	add	r16, r16
     49c:	11 1f       	adc	r17, r17
     49e:	22 1f       	adc	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	00 0f       	add	r16, r16
     4a4:	11 1f       	adc	r17, r17
     4a6:	22 1f       	adc	r18, r18
     4a8:	33 1f       	adc	r19, r19
     4aa:	00 0f       	add	r16, r16
     4ac:	11 1f       	adc	r17, r17
     4ae:	22 1f       	adc	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	e0 2b       	or	r30, r16
     4b4:	91 2a       	or	r9, r17
     4b6:	c2 2a       	or	r12, r18
     4b8:	53 2f       	mov	r21, r19
     4ba:	5f 2b       	or	r21, r31
     4bc:	2e 2f       	mov	r18, r30
     4be:	2d 29       	or	r18, r13
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
		        (uint8_t)y,            ///< End switch status (1 digit)
		        (uint8_t)crc8_cdma2000(combined)); ///< CRC value (1 byte)
     4c0:	39 2d       	mov	r19, r9
     4c2:	4c 2d       	mov	r20, r12
     4c4:	6a 2d       	mov	r22, r10
     4c6:	7b 2d       	mov	r23, r11
     4c8:	8b 2b       	or	r24, r27
     4ca:	9a 2b       	or	r25, r26
     4cc:	0e 94 3b 01 	call	0x276	; 0x276 <crc8_cdma2000>
		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
		        (uint16_t)ReadCurrent.Result,            ///< Current (3 digits)
     4d0:	70 91 02 38 	lds	r23, 0x3802	; 0x803802 <ReadCurrent>
     4d4:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <ReadCurrent+0x1>

		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
		        (uint16_t)ReadVoltage.Result,           ///< Voltage (3 digits)
     4d8:	50 91 00 38 	lds	r21, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     4dc:	60 91 01 38 	lds	r22, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>


		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
		        (uint16_t)MT6701AZIMUTH.Angle,           ///< Azimuth angle (4 digits)
     4e0:	d7 01       	movw	r26, r14
     4e2:	3c 91       	ld	r19, X
     4e4:	11 96       	adiw	r26, 0x01	; 1
     4e6:	4c 91       	ld	r20, X



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
		        (uint16_t)MT6701ELEVATION.Angle,           ///< Elevation angle (4 digits)
     4e8:	98 81       	ld	r25, Y
     4ea:	29 81       	ldd	r18, Y+1	; 0x01
		uint64_t combined = ((uint64_t)MT6701ELEVATION.Angle << 44) | ((uint64_t)MT6701AZIMUTH.Angle << 28) | ((uint64_t)ReadVoltage.Result << 16) | ((uint32_t)ReadCurrent.Result << 4) | y;



		        // Send the combined data over USART0 in a formatted string
		        USART1_printf("<%04x%04x%03x%03x%x%02x>\r\n",
     4ec:	1f 92       	push	r1
     4ee:	8f 93       	push	r24
     4f0:	1f 92       	push	r1
     4f2:	df 92       	push	r13
     4f4:	ef 93       	push	r30
     4f6:	7f 93       	push	r23
     4f8:	6f 93       	push	r22
     4fa:	5f 93       	push	r21
     4fc:	4f 93       	push	r20
     4fe:	3f 93       	push	r19
     500:	2f 93       	push	r18
     502:	9f 93       	push	r25
     504:	8c e3       	ldi	r24, 0x3C	; 60
     506:	92 e9       	ldi	r25, 0x92	; 146
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <USART1_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     510:	bf e7       	ldi	r27, 0x7F	; 127
     512:	2a e1       	ldi	r18, 0x1A	; 26
     514:	86 e0       	ldi	r24, 0x06	; 6
     516:	b1 50       	subi	r27, 0x01	; 1
     518:	20 40       	sbci	r18, 0x00	; 0
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	e1 f7       	brne	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     520:	00 00       	nop
     522:	ad b7       	in	r26, 0x3d	; 61
     524:	be b7       	in	r27, 0x3e	; 62
     526:	1e 96       	adiw	r26, 0x0e	; 14
     528:	ad bf       	out	0x3d, r26	; 61
     52a:	be bf       	out	0x3e, r27	; 62
     52c:	4e cf       	rjmp	.-356    	; 0x3ca <main+0x14>

0000052e <MT6701_SSI_Angle>:
 * This function initiates an SSI communication session by pulling the chip select (CSN) low,
 * transmitting dummy data to generate a clock signal, and receiving the corresponding data bits.
 * The received data is then processed to extract the angle, magnetic field status, push button status,
 * and track status.
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <MT6701_SSI_Angle+0xa>
     538:	00 d0       	rcall	.+0      	; 0x53a <MT6701_SSI_Angle+0xc>
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	08 2f       	mov	r16, r24
    uint32_t received_data = 0;
     540:	19 82       	std	Y+1, r1	; 0x01
     542:	1a 82       	std	Y+2, r1	; 0x02
     544:	1b 82       	std	Y+3, r1	; 0x03
     546:	1c 82       	std	Y+4, r1	; 0x04

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
     548:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <crc6_table+0x7f720a>
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     54c:	10 e0       	ldi	r17, 0x00	; 0
     54e:	24 c0       	rjmp	.+72     	; 0x598 <MT6701_SSI_Angle+0x6a>
        USART0_sendChar('o'); ///< Send dummy data (8 bits) for clock generation
     550:	8f e6       	ldi	r24, 0x6F	; 111
     552:	0e 94 2f 03 	call	0x65e	; 0x65e <USART0_sendChar>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
     556:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <crc6_table+0x7f7608>
     55a:	86 ff       	sbrs	r24, 6
     55c:	fc cf       	rjmp	.-8      	; 0x556 <MT6701_SSI_Angle+0x28>
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
     55e:	e0 e0       	ldi	r30, 0x00	; 0
     560:	f8 e0       	ldi	r31, 0x08	; 8
     562:	84 81       	ldd	r24, Z+4	; 0x04
     564:	80 64       	ori	r24, 0x40	; 64
     566:	84 83       	std	Z+4, r24	; 0x04
        received_data <<= 8; ///< Shift previous data left by 8 bits
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	ab 81       	ldd	r26, Y+3	; 0x03
     56e:	bc 81       	ldd	r27, Y+4	; 0x04
     570:	ba 2f       	mov	r27, r26
     572:	a9 2f       	mov	r26, r25
     574:	98 2f       	mov	r25, r24
     576:	88 27       	eor	r24, r24
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	ab 83       	std	Y+3, r26	; 0x03
     57e:	bc 83       	std	Y+4, r27	; 0x04
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
     580:	0e 94 36 03 	call	0x66c	; 0x66c <USART0_readChar>
     584:	49 81       	ldd	r20, Y+1	; 0x01
     586:	5a 81       	ldd	r21, Y+2	; 0x02
     588:	6b 81       	ldd	r22, Y+3	; 0x03
     58a:	7c 81       	ldd	r23, Y+4	; 0x04
     58c:	48 2b       	or	r20, r24
     58e:	49 83       	std	Y+1, r20	; 0x01
     590:	5a 83       	std	Y+2, r21	; 0x02
     592:	6b 83       	std	Y+3, r22	; 0x03
     594:	7c 83       	std	Y+4, r23	; 0x04
 */
void MT6701_SSI_Angle(angleChannel_t channel) {
    uint32_t received_data = 0;

    PORTA.OUTCLR = channel; ///< Pull CSN low to start communication   
    for (uint8_t i = 0; i < 3; i++) { ///< 3 bytes (24 bits) of data
     596:	1f 5f       	subi	r17, 0xFF	; 255
     598:	13 30       	cpi	r17, 0x03	; 3
     59a:	d0 f2       	brcs	.-76     	; 0x550 <MT6701_SSI_Angle+0x22>
		while (!(USART0.STATUS & USART_TXCIF_bm)) {} ///< Repeat until the full frame is received
		USART0.STATUS |= USART_TXCIF_bm; ///< Clear frame flag before data collection
        received_data <<= 8; ///< Shift previous data left by 8 bits
        received_data |= USART0_readChar(); ///< Read 8 bits of received data and Append current received byte
    }
    PORTA.OUTSET = channel; ///< Pull CSN high (USART SPI mode does not have integrated SS control)
     59c:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <crc6_table+0x7f7209>
    
	    // Use a pointer to simplify the logic
	    AngleSensorStatus *sensor = (channel == Elevation_Angle) ? &MT6701ELEVATION : &MT6701AZIMUTH;
     5a0:	00 38       	cpi	r16, 0x80	; 128
     5a2:	19 f4       	brne	.+6      	; 0x5aa <MT6701_SSI_Angle+0x7c>
     5a4:	0a e0       	ldi	r16, 0x0A	; 10
     5a6:	18 e3       	ldi	r17, 0x38	; 56
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <MT6701_SSI_Angle+0x80>
     5aa:	04 e0       	ldi	r16, 0x04	; 4
     5ac:	18 e3       	ldi	r17, 0x38	; 56

	    // Update sensor data
	    sensor->CRCError = MT6701CRC(&received_data);  // Verify and remove CRC from received data
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	0e 94 1c 01 	call	0x238	; 0x238 <MT6701CRC>
     5b6:	f8 01       	movw	r30, r16
     5b8:	85 83       	std	Z+5, r24	; 0x05
	    sensor->MagneticFieldStatus = received_data & 0x3;  // Extract magnetic field status
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	83 70       	andi	r24, 0x03	; 3
     5be:	82 83       	std	Z+2, r24	; 0x02
	    sensor->PushButtonStatus = (received_data >> 2) & 0x1;  // Extract push button status
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	ab 81       	ldd	r26, Y+3	; 0x03
     5c6:	bc 81       	ldd	r27, Y+4	; 0x04
     5c8:	b6 95       	lsr	r27
     5ca:	a7 95       	ror	r26
     5cc:	97 95       	ror	r25
     5ce:	87 95       	ror	r24
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	81 70       	andi	r24, 0x01	; 1
     5da:	83 83       	std	Z+3, r24	; 0x03
	    sensor->TrackStatus = (received_data >> 3) & 0x1;  // Extract track status
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	ab 81       	ldd	r26, Y+3	; 0x03
     5e2:	bc 81       	ldd	r27, Y+4	; 0x04
     5e4:	ac 01       	movw	r20, r24
     5e6:	bd 01       	movw	r22, r26
     5e8:	68 94       	set
     5ea:	12 f8       	bld	r1, 2
     5ec:	76 95       	lsr	r23
     5ee:	67 95       	ror	r22
     5f0:	57 95       	ror	r21
     5f2:	47 95       	ror	r20
     5f4:	16 94       	lsr	r1
     5f6:	d1 f7       	brne	.-12     	; 0x5ec <MT6701_SSI_Angle+0xbe>
     5f8:	24 2f       	mov	r18, r20
     5fa:	21 70       	andi	r18, 0x01	; 1
     5fc:	24 83       	std	Z+4, r18	; 0x04
	    sensor->Angle = ((double)(received_data >> 4) / 0.4551111111)+0.5;  // Compute angle in degrees
     5fe:	bc 01       	movw	r22, r24
     600:	cd 01       	movw	r24, r26
     602:	68 94       	set
     604:	13 f8       	bld	r1, 3
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	77 95       	ror	r23
     60c:	67 95       	ror	r22
     60e:	16 94       	lsr	r1
     610:	d1 f7       	brne	.-12     	; 0x606 <MT6701_SSI_Angle+0xd8>
     612:	0e 94 b7 04 	call	0x96e	; 0x96e <__floatunsisf>
     616:	23 e5       	ldi	r18, 0x53	; 83
     618:	34 e0       	ldi	r19, 0x04	; 4
     61a:	49 ee       	ldi	r20, 0xE9	; 233
     61c:	5e e3       	ldi	r21, 0x3E	; 62
     61e:	0e 94 16 04 	call	0x82c	; 0x82c <__divsf3>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	5f e3       	ldi	r21, 0x3F	; 63
     62a:	0e 94 aa 03 	call	0x754	; 0x754 <__addsf3>
     62e:	0e 94 88 04 	call	0x910	; 0x910 <__fixunssfsi>
     632:	f8 01       	movw	r30, r16
     634:	60 83       	st	Z, r22
     636:	71 83       	std	Z+1, r23	; 0x01
     638:	24 96       	adiw	r28, 0x04	; 4
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <USART0_init>:
 * This function configures USART0 to operate in SPI master mode with a baud rate of 500 kbps.
 * It enables the receiver (MISO) and transmitter (for sending dummy data), and sets
 * the SPI mode with data sampling on the trailing edge.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.5 Mbps
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f8 e0       	ldi	r31, 0x08	; 8
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	95 e0       	ldi	r25, 0x05	; 5
     650:	80 87       	std	Z+8, r24	; 0x08
     652:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm; ///< Enable RX as MISO, TX for dummy data sending
     654:	80 ec       	ldi	r24, 0xC0	; 192
     656:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_MSPI_gc | USART_UCPHA_bm; ///< Configure as Host SPI, data sampled on the trailing edge
     658:	82 ec       	ldi	r24, 0xC2	; 194
     65a:	87 83       	std	Z+7, r24	; 0x07
     65c:	08 95       	ret

0000065e <USART0_sendChar>:
 *
 * This function waits for the data register to be empty before transmitting
 * the provided character.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty
     65e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc6_table+0x7f7608>
     662:	95 ff       	sbrs	r25, 5
     664:	fc cf       	rjmp	.-8      	; 0x65e <USART0_sendChar>
    USART0.TXDATAL = c; ///< Send character
     666:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc6_table+0x7f7606>
     66a:	08 95       	ret

0000066c <USART0_readChar>:
 * period, it sets a warning flag. 
 * 
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc6_table+0x7f7608>
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	9c e9       	ldi	r25, 0x9C	; 156
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e0       	ldi	r27, 0x00	; 0
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     67a:	08 c0       	rjmp	.+16     	; 0x68c <USART0_readChar+0x20>
        if (--timeout_counter == 0) { // Timeout condition
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	a1 09       	sbc	r26, r1
     680:	b1 09       	sbc	r27, r1
     682:	21 f4       	brne	.+8      	; 0x68c <USART0_readChar+0x20>
            Status.warning = 1; // Set warning if timeout occurs
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Status+0x2>
            break;
     68a:	04 c0       	rjmp	.+8      	; 0x694 <USART0_readChar+0x28>
 * @return The received character.
 */
char USART0_readChar() {
    USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
    while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
     68c:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc6_table+0x7f7608>
     690:	22 23       	and	r18, r18
     692:	a4 f7       	brge	.-24     	; 0x67c <USART0_readChar+0x10>
        if (--timeout_counter == 0) { // Timeout condition
            Status.warning = 1; // Set warning if timeout occurs
            break;
        }
    }
    return USART0.RXDATAL; // Return received character
     694:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc6_table+0x7f7604>
}
     698:	08 95       	ret

0000069a <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 0.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(500000); // Set baud rate to 0.5 Mbps
     69a:	e0 e2       	ldi	r30, 0x20	; 32
     69c:	f8 e0       	ldi	r31, 0x08	; 8
     69e:	80 e4       	ldi	r24, 0x40	; 64
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	80 87       	std	Z+8, r24	; 0x08
     6a4:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
     6a6:	82 e4       	ldi	r24, 0x42	; 66
     6a8:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	87 83       	std	Z+7, r24	; 0x07
     6ae:	08 95       	ret

000006b0 <USART1_sendChar>:
 * This function waits until the USART1 data register is empty and then transmits a character.
 * 
 * @param c The character to send.
 */
void USART1_sendChar(char c) {
	while (!(USART1.STATUS & USART_DREIF_bm)); // Wait for data register to be empty
     6b0:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <crc6_table+0x7f7628>
     6b4:	95 ff       	sbrs	r25, 5
     6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <USART1_sendChar>
	USART1.TXDATAL = c; // Send character
     6b8:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <crc6_table+0x7f7626>
     6bc:	08 95       	ret

000006be <USART1_sendString>:
 * 
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	8c 01       	movw	r16, r24
	for (size_t i = 0; i < strlen(str); i++) {
     6c8:	c0 e0       	ldi	r28, 0x00	; 0
     6ca:	d0 e0       	ldi	r29, 0x00	; 0
     6cc:	07 c0       	rjmp	.+14     	; 0x6dc <USART1_sendString+0x1e>
		USART1_sendChar(str[i]); // Send each character
     6ce:	f8 01       	movw	r30, r16
     6d0:	ec 0f       	add	r30, r28
     6d2:	fd 1f       	adc	r31, r29
     6d4:	80 81       	ld	r24, Z
     6d6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <USART1_sendChar>
 * This function sends each character of the string one by one using the USART1_sendChar function.
 * 
 * @param str The string to send.
 */
void USART1_sendString(char *str) {
	for (size_t i = 0; i < strlen(str); i++) {
     6da:	21 96       	adiw	r28, 0x01	; 1
     6dc:	f8 01       	movw	r30, r16
     6de:	01 90       	ld	r0, Z+
     6e0:	00 20       	and	r0, r0
     6e2:	e9 f7       	brne	.-6      	; 0x6de <USART1_sendString+0x20>
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	e0 1b       	sub	r30, r16
     6e8:	f1 0b       	sbc	r31, r17
     6ea:	ce 17       	cp	r28, r30
     6ec:	df 07       	cpc	r29, r31
     6ee:	78 f3       	brcs	.-34     	; 0x6ce <USART1_sendString+0x10>
		USART1_sendChar(str[i]); // Send each character
	}
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	08 95       	ret

000006fa <USART1_printf>:
 * This function formats the input string with the provided arguments and sends it via USART1.
 * 
 * @param format The format string.
 * @param ... The arguments to be formatted into the string.
 */
void USART1_printf(const char *format, ...) {
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	6e 97       	sbiw	r28, 0x1e	; 30
     704:	cd bf       	out	0x3d, r28	; 61
     706:	de bf       	out	0x3e, r29	; 62
     708:	9e 01       	movw	r18, r28
     70a:	2d 5d       	subi	r18, 0xDD	; 221
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	41 91       	ld	r20, Z+
     712:	51 91       	ld	r21, Z+
     714:	9f 01       	movw	r18, r30
	char buffer[30]; // Temporary buffer for formatted message
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, sizeof(buffer), format, args); // Format the message into the buffer
     716:	6e e1       	ldi	r22, 0x1E	; 30
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 88 05 	call	0xb10	; 0xb10 <vsnprintf>
	va_end(args);
	USART1_sendString(buffer); // Use USART1 for sending
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 5f 03 	call	0x6be	; 0x6be <USART1_sendString>
     72a:	6e 96       	adiw	r28, 0x1e	; 30
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	de bf       	out	0x3e, r29	; 62
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <YEndSwitches>:
 *  Author: Saulius
 */ 
 #include "Settings.h"

 uint8_t YEndSwitches(){
	return (!(PORTB.IN & PIN0_bm)) | ((!(PORTA.IN & PIN2_bm)) << 1); // Checking Y min and max values (PB0 and PA2 values)
     736:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <crc6_table+0x7f722c>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	89 27       	eor	r24, r25
     73e:	81 70       	andi	r24, 0x01	; 1
     740:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <crc6_table+0x7f720c>
     744:	92 fd       	sbrc	r25, 2
     746:	02 c0       	rjmp	.+4      	; 0x74c <YEndSwitches+0x16>
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	01 c0       	rjmp	.+2      	; 0x74e <YEndSwitches+0x18>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	89 2b       	or	r24, r25
     750:	08 95       	ret

00000752 <__subsf3>:
     752:	50 58       	subi	r21, 0x80	; 128

00000754 <__addsf3>:
     754:	bb 27       	eor	r27, r27
     756:	aa 27       	eor	r26, r26
     758:	0e 94 c1 03 	call	0x782	; 0x782 <__addsf3x>
     75c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_round>
     760:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_pscA>
     764:	38 f0       	brcs	.+14     	; 0x774 <__addsf3+0x20>
     766:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_pscB>
     76a:	20 f0       	brcs	.+8      	; 0x774 <__addsf3+0x20>
     76c:	39 f4       	brne	.+14     	; 0x77c <__addsf3+0x28>
     76e:	9f 3f       	cpi	r25, 0xFF	; 255
     770:	19 f4       	brne	.+6      	; 0x778 <__addsf3+0x24>
     772:	26 f4       	brtc	.+8      	; 0x77c <__addsf3+0x28>
     774:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_nan>
     778:	0e f4       	brtc	.+2      	; 0x77c <__addsf3+0x28>
     77a:	e0 95       	com	r30
     77c:	e7 fb       	bst	r30, 7
     77e:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_inf>

00000782 <__addsf3x>:
     782:	e9 2f       	mov	r30, r25
     784:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_split3>
     788:	58 f3       	brcs	.-42     	; 0x760 <__addsf3+0xc>
     78a:	ba 17       	cp	r27, r26
     78c:	62 07       	cpc	r22, r18
     78e:	73 07       	cpc	r23, r19
     790:	84 07       	cpc	r24, r20
     792:	95 07       	cpc	r25, r21
     794:	20 f0       	brcs	.+8      	; 0x79e <__addsf3x+0x1c>
     796:	79 f4       	brne	.+30     	; 0x7b6 <__addsf3x+0x34>
     798:	a6 f5       	brtc	.+104    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     79a:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_zero>
     79e:	0e f4       	brtc	.+2      	; 0x7a2 <__addsf3x+0x20>
     7a0:	e0 95       	com	r30
     7a2:	0b 2e       	mov	r0, r27
     7a4:	ba 2f       	mov	r27, r26
     7a6:	a0 2d       	mov	r26, r0
     7a8:	0b 01       	movw	r0, r22
     7aa:	b9 01       	movw	r22, r18
     7ac:	90 01       	movw	r18, r0
     7ae:	0c 01       	movw	r0, r24
     7b0:	ca 01       	movw	r24, r20
     7b2:	a0 01       	movw	r20, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	ff 27       	eor	r31, r31
     7b8:	59 1b       	sub	r21, r25
     7ba:	99 f0       	breq	.+38     	; 0x7e2 <__addsf3x+0x60>
     7bc:	59 3f       	cpi	r21, 0xF9	; 249
     7be:	50 f4       	brcc	.+20     	; 0x7d4 <__addsf3x+0x52>
     7c0:	50 3e       	cpi	r21, 0xE0	; 224
     7c2:	68 f1       	brcs	.+90     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7c4:	1a 16       	cp	r1, r26
     7c6:	f0 40       	sbci	r31, 0x00	; 0
     7c8:	a2 2f       	mov	r26, r18
     7ca:	23 2f       	mov	r18, r19
     7cc:	34 2f       	mov	r19, r20
     7ce:	44 27       	eor	r20, r20
     7d0:	58 5f       	subi	r21, 0xF8	; 248
     7d2:	f3 cf       	rjmp	.-26     	; 0x7ba <__addsf3x+0x38>
     7d4:	46 95       	lsr	r20
     7d6:	37 95       	ror	r19
     7d8:	27 95       	ror	r18
     7da:	a7 95       	ror	r26
     7dc:	f0 40       	sbci	r31, 0x00	; 0
     7de:	53 95       	inc	r21
     7e0:	c9 f7       	brne	.-14     	; 0x7d4 <__addsf3x+0x52>
     7e2:	7e f4       	brtc	.+30     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7e4:	1f 16       	cp	r1, r31
     7e6:	ba 0b       	sbc	r27, r26
     7e8:	62 0b       	sbc	r22, r18
     7ea:	73 0b       	sbc	r23, r19
     7ec:	84 0b       	sbc	r24, r20
     7ee:	ba f0       	brmi	.+46     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7f0:	91 50       	subi	r25, 0x01	; 1
     7f2:	a1 f0       	breq	.+40     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7f4:	ff 0f       	add	r31, r31
     7f6:	bb 1f       	adc	r27, r27
     7f8:	66 1f       	adc	r22, r22
     7fa:	77 1f       	adc	r23, r23
     7fc:	88 1f       	adc	r24, r24
     7fe:	c2 f7       	brpl	.-16     	; 0x7f0 <__addsf3x+0x6e>
     800:	0e c0       	rjmp	.+28     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     802:	ba 0f       	add	r27, r26
     804:	62 1f       	adc	r22, r18
     806:	73 1f       	adc	r23, r19
     808:	84 1f       	adc	r24, r20
     80a:	48 f4       	brcc	.+18     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     80c:	87 95       	ror	r24
     80e:	77 95       	ror	r23
     810:	67 95       	ror	r22
     812:	b7 95       	ror	r27
     814:	f7 95       	ror	r31
     816:	9e 3f       	cpi	r25, 0xFE	; 254
     818:	08 f0       	brcs	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	b0 cf       	rjmp	.-160    	; 0x77c <__addsf3+0x28>
     81c:	93 95       	inc	r25
     81e:	88 0f       	add	r24, r24
     820:	08 f0       	brcs	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	99 27       	eor	r25, r25
     824:	ee 0f       	add	r30, r30
     826:	97 95       	ror	r25
     828:	87 95       	ror	r24
     82a:	08 95       	ret

0000082c <__divsf3>:
     82c:	0e 94 2a 04 	call	0x854	; 0x854 <__divsf3x>
     830:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_round>
     834:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_pscB>
     838:	58 f0       	brcs	.+22     	; 0x850 <__divsf3+0x24>
     83a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_pscA>
     83e:	40 f0       	brcs	.+16     	; 0x850 <__divsf3+0x24>
     840:	29 f4       	brne	.+10     	; 0x84c <__divsf3+0x20>
     842:	5f 3f       	cpi	r21, 0xFF	; 255
     844:	29 f0       	breq	.+10     	; 0x850 <__divsf3+0x24>
     846:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_inf>
     84a:	51 11       	cpse	r21, r1
     84c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_szero>
     850:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_nan>

00000854 <__divsf3x>:
     854:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_split3>
     858:	68 f3       	brcs	.-38     	; 0x834 <__divsf3+0x8>

0000085a <__divsf3_pse>:
     85a:	99 23       	and	r25, r25
     85c:	b1 f3       	breq	.-20     	; 0x84a <__divsf3+0x1e>
     85e:	55 23       	and	r21, r21
     860:	91 f3       	breq	.-28     	; 0x846 <__divsf3+0x1a>
     862:	95 1b       	sub	r25, r21
     864:	55 0b       	sbc	r21, r21
     866:	bb 27       	eor	r27, r27
     868:	aa 27       	eor	r26, r26
     86a:	62 17       	cp	r22, r18
     86c:	73 07       	cpc	r23, r19
     86e:	84 07       	cpc	r24, r20
     870:	38 f0       	brcs	.+14     	; 0x880 <__divsf3_pse+0x26>
     872:	9f 5f       	subi	r25, 0xFF	; 255
     874:	5f 4f       	sbci	r21, 0xFF	; 255
     876:	22 0f       	add	r18, r18
     878:	33 1f       	adc	r19, r19
     87a:	44 1f       	adc	r20, r20
     87c:	aa 1f       	adc	r26, r26
     87e:	a9 f3       	breq	.-22     	; 0x86a <__divsf3_pse+0x10>
     880:	35 d0       	rcall	.+106    	; 0x8ec <__divsf3_pse+0x92>
     882:	0e 2e       	mov	r0, r30
     884:	3a f0       	brmi	.+14     	; 0x894 <__divsf3_pse+0x3a>
     886:	e0 e8       	ldi	r30, 0x80	; 128
     888:	32 d0       	rcall	.+100    	; 0x8ee <__divsf3_pse+0x94>
     88a:	91 50       	subi	r25, 0x01	; 1
     88c:	50 40       	sbci	r21, 0x00	; 0
     88e:	e6 95       	lsr	r30
     890:	00 1c       	adc	r0, r0
     892:	ca f7       	brpl	.-14     	; 0x886 <__divsf3_pse+0x2c>
     894:	2b d0       	rcall	.+86     	; 0x8ec <__divsf3_pse+0x92>
     896:	fe 2f       	mov	r31, r30
     898:	29 d0       	rcall	.+82     	; 0x8ec <__divsf3_pse+0x92>
     89a:	66 0f       	add	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	88 1f       	adc	r24, r24
     8a0:	bb 1f       	adc	r27, r27
     8a2:	26 17       	cp	r18, r22
     8a4:	37 07       	cpc	r19, r23
     8a6:	48 07       	cpc	r20, r24
     8a8:	ab 07       	cpc	r26, r27
     8aa:	b0 e8       	ldi	r27, 0x80	; 128
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <__divsf3_pse+0x56>
     8ae:	bb 0b       	sbc	r27, r27
     8b0:	80 2d       	mov	r24, r0
     8b2:	bf 01       	movw	r22, r30
     8b4:	ff 27       	eor	r31, r31
     8b6:	93 58       	subi	r25, 0x83	; 131
     8b8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ba:	3a f0       	brmi	.+14     	; 0x8ca <__divsf3_pse+0x70>
     8bc:	9e 3f       	cpi	r25, 0xFE	; 254
     8be:	51 05       	cpc	r21, r1
     8c0:	78 f0       	brcs	.+30     	; 0x8e0 <__divsf3_pse+0x86>
     8c2:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_inf>
     8c6:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_szero>
     8ca:	5f 3f       	cpi	r21, 0xFF	; 255
     8cc:	e4 f3       	brlt	.-8      	; 0x8c6 <__divsf3_pse+0x6c>
     8ce:	98 3e       	cpi	r25, 0xE8	; 232
     8d0:	d4 f3       	brlt	.-12     	; 0x8c6 <__divsf3_pse+0x6c>
     8d2:	86 95       	lsr	r24
     8d4:	77 95       	ror	r23
     8d6:	67 95       	ror	r22
     8d8:	b7 95       	ror	r27
     8da:	f7 95       	ror	r31
     8dc:	9f 5f       	subi	r25, 0xFF	; 255
     8de:	c9 f7       	brne	.-14     	; 0x8d2 <__divsf3_pse+0x78>
     8e0:	88 0f       	add	r24, r24
     8e2:	91 1d       	adc	r25, r1
     8e4:	96 95       	lsr	r25
     8e6:	87 95       	ror	r24
     8e8:	97 f9       	bld	r25, 7
     8ea:	08 95       	ret
     8ec:	e1 e0       	ldi	r30, 0x01	; 1
     8ee:	66 0f       	add	r22, r22
     8f0:	77 1f       	adc	r23, r23
     8f2:	88 1f       	adc	r24, r24
     8f4:	bb 1f       	adc	r27, r27
     8f6:	62 17       	cp	r22, r18
     8f8:	73 07       	cpc	r23, r19
     8fa:	84 07       	cpc	r24, r20
     8fc:	ba 07       	cpc	r27, r26
     8fe:	20 f0       	brcs	.+8      	; 0x908 <__divsf3_pse+0xae>
     900:	62 1b       	sub	r22, r18
     902:	73 0b       	sbc	r23, r19
     904:	84 0b       	sbc	r24, r20
     906:	ba 0b       	sbc	r27, r26
     908:	ee 1f       	adc	r30, r30
     90a:	88 f7       	brcc	.-30     	; 0x8ee <__divsf3_pse+0x94>
     90c:	e0 95       	com	r30
     90e:	08 95       	ret

00000910 <__fixunssfsi>:
     910:	0e 94 24 05 	call	0xa48	; 0xa48 <__fp_splitA>
     914:	88 f0       	brcs	.+34     	; 0x938 <__fixunssfsi+0x28>
     916:	9f 57       	subi	r25, 0x7F	; 127
     918:	98 f0       	brcs	.+38     	; 0x940 <__fixunssfsi+0x30>
     91a:	b9 2f       	mov	r27, r25
     91c:	99 27       	eor	r25, r25
     91e:	b7 51       	subi	r27, 0x17	; 23
     920:	b0 f0       	brcs	.+44     	; 0x94e <__fixunssfsi+0x3e>
     922:	e1 f0       	breq	.+56     	; 0x95c <__fixunssfsi+0x4c>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	88 1f       	adc	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	1a f0       	brmi	.+6      	; 0x934 <__fixunssfsi+0x24>
     92e:	ba 95       	dec	r27
     930:	c9 f7       	brne	.-14     	; 0x924 <__fixunssfsi+0x14>
     932:	14 c0       	rjmp	.+40     	; 0x95c <__fixunssfsi+0x4c>
     934:	b1 30       	cpi	r27, 0x01	; 1
     936:	91 f0       	breq	.+36     	; 0x95c <__fixunssfsi+0x4c>
     938:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_zero>
     93c:	b1 e0       	ldi	r27, 0x01	; 1
     93e:	08 95       	ret
     940:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_zero>
     944:	67 2f       	mov	r22, r23
     946:	78 2f       	mov	r23, r24
     948:	88 27       	eor	r24, r24
     94a:	b8 5f       	subi	r27, 0xF8	; 248
     94c:	39 f0       	breq	.+14     	; 0x95c <__fixunssfsi+0x4c>
     94e:	b9 3f       	cpi	r27, 0xF9	; 249
     950:	cc f3       	brlt	.-14     	; 0x944 <__fixunssfsi+0x34>
     952:	86 95       	lsr	r24
     954:	77 95       	ror	r23
     956:	67 95       	ror	r22
     958:	b3 95       	inc	r27
     95a:	d9 f7       	brne	.-10     	; 0x952 <__fixunssfsi+0x42>
     95c:	3e f4       	brtc	.+14     	; 0x96c <__fixunssfsi+0x5c>
     95e:	90 95       	com	r25
     960:	80 95       	com	r24
     962:	70 95       	com	r23
     964:	61 95       	neg	r22
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	8f 4f       	sbci	r24, 0xFF	; 255
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	08 95       	ret

0000096e <__floatunsisf>:
     96e:	e8 94       	clt
     970:	09 c0       	rjmp	.+18     	; 0x984 <__floatsisf+0x12>

00000972 <__floatsisf>:
     972:	97 fb       	bst	r25, 7
     974:	3e f4       	brtc	.+14     	; 0x984 <__floatsisf+0x12>
     976:	90 95       	com	r25
     978:	80 95       	com	r24
     97a:	70 95       	com	r23
     97c:	61 95       	neg	r22
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	8f 4f       	sbci	r24, 0xFF	; 255
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	99 23       	and	r25, r25
     986:	a9 f0       	breq	.+42     	; 0x9b2 <__floatsisf+0x40>
     988:	f9 2f       	mov	r31, r25
     98a:	96 e9       	ldi	r25, 0x96	; 150
     98c:	bb 27       	eor	r27, r27
     98e:	93 95       	inc	r25
     990:	f6 95       	lsr	r31
     992:	87 95       	ror	r24
     994:	77 95       	ror	r23
     996:	67 95       	ror	r22
     998:	b7 95       	ror	r27
     99a:	f1 11       	cpse	r31, r1
     99c:	f8 cf       	rjmp	.-16     	; 0x98e <__floatsisf+0x1c>
     99e:	fa f4       	brpl	.+62     	; 0x9de <__floatsisf+0x6c>
     9a0:	bb 0f       	add	r27, r27
     9a2:	11 f4       	brne	.+4      	; 0x9a8 <__floatsisf+0x36>
     9a4:	60 ff       	sbrs	r22, 0
     9a6:	1b c0       	rjmp	.+54     	; 0x9de <__floatsisf+0x6c>
     9a8:	6f 5f       	subi	r22, 0xFF	; 255
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	8f 4f       	sbci	r24, 0xFF	; 255
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	16 c0       	rjmp	.+44     	; 0x9de <__floatsisf+0x6c>
     9b2:	88 23       	and	r24, r24
     9b4:	11 f0       	breq	.+4      	; 0x9ba <__floatsisf+0x48>
     9b6:	96 e9       	ldi	r25, 0x96	; 150
     9b8:	11 c0       	rjmp	.+34     	; 0x9dc <__floatsisf+0x6a>
     9ba:	77 23       	and	r23, r23
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <__floatsisf+0x54>
     9be:	9e e8       	ldi	r25, 0x8E	; 142
     9c0:	87 2f       	mov	r24, r23
     9c2:	76 2f       	mov	r23, r22
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <__floatsisf+0x5e>
     9c6:	66 23       	and	r22, r22
     9c8:	71 f0       	breq	.+28     	; 0x9e6 <__floatsisf+0x74>
     9ca:	96 e8       	ldi	r25, 0x86	; 134
     9cc:	86 2f       	mov	r24, r22
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	2a f0       	brmi	.+10     	; 0x9de <__floatsisf+0x6c>
     9d4:	9a 95       	dec	r25
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	88 1f       	adc	r24, r24
     9dc:	da f7       	brpl	.-10     	; 0x9d4 <__floatsisf+0x62>
     9de:	88 0f       	add	r24, r24
     9e0:	96 95       	lsr	r25
     9e2:	87 95       	ror	r24
     9e4:	97 f9       	bld	r25, 7
     9e6:	08 95       	ret

000009e8 <__fp_inf>:
     9e8:	97 f9       	bld	r25, 7
     9ea:	9f 67       	ori	r25, 0x7F	; 127
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	08 95       	ret

000009f4 <__fp_nan>:
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	08 95       	ret

000009fa <__fp_pscA>:
     9fa:	00 24       	eor	r0, r0
     9fc:	0a 94       	dec	r0
     9fe:	16 16       	cp	r1, r22
     a00:	17 06       	cpc	r1, r23
     a02:	18 06       	cpc	r1, r24
     a04:	09 06       	cpc	r0, r25
     a06:	08 95       	ret

00000a08 <__fp_pscB>:
     a08:	00 24       	eor	r0, r0
     a0a:	0a 94       	dec	r0
     a0c:	12 16       	cp	r1, r18
     a0e:	13 06       	cpc	r1, r19
     a10:	14 06       	cpc	r1, r20
     a12:	05 06       	cpc	r0, r21
     a14:	08 95       	ret

00000a16 <__fp_round>:
     a16:	09 2e       	mov	r0, r25
     a18:	03 94       	inc	r0
     a1a:	00 0c       	add	r0, r0
     a1c:	11 f4       	brne	.+4      	; 0xa22 <__fp_round+0xc>
     a1e:	88 23       	and	r24, r24
     a20:	52 f0       	brmi	.+20     	; 0xa36 <__fp_round+0x20>
     a22:	bb 0f       	add	r27, r27
     a24:	40 f4       	brcc	.+16     	; 0xa36 <__fp_round+0x20>
     a26:	bf 2b       	or	r27, r31
     a28:	11 f4       	brne	.+4      	; 0xa2e <__fp_round+0x18>
     a2a:	60 ff       	sbrs	r22, 0
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__fp_round+0x20>
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	08 95       	ret

00000a38 <__fp_split3>:
     a38:	57 fd       	sbrc	r21, 7
     a3a:	90 58       	subi	r25, 0x80	; 128
     a3c:	44 0f       	add	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	59 f0       	breq	.+22     	; 0xa58 <__fp_splitA+0x10>
     a42:	5f 3f       	cpi	r21, 0xFF	; 255
     a44:	71 f0       	breq	.+28     	; 0xa62 <__fp_splitA+0x1a>
     a46:	47 95       	ror	r20

00000a48 <__fp_splitA>:
     a48:	88 0f       	add	r24, r24
     a4a:	97 fb       	bst	r25, 7
     a4c:	99 1f       	adc	r25, r25
     a4e:	61 f0       	breq	.+24     	; 0xa68 <__fp_splitA+0x20>
     a50:	9f 3f       	cpi	r25, 0xFF	; 255
     a52:	79 f0       	breq	.+30     	; 0xa72 <__fp_splitA+0x2a>
     a54:	87 95       	ror	r24
     a56:	08 95       	ret
     a58:	12 16       	cp	r1, r18
     a5a:	13 06       	cpc	r1, r19
     a5c:	14 06       	cpc	r1, r20
     a5e:	55 1f       	adc	r21, r21
     a60:	f2 cf       	rjmp	.-28     	; 0xa46 <__fp_split3+0xe>
     a62:	46 95       	lsr	r20
     a64:	f1 df       	rcall	.-30     	; 0xa48 <__fp_splitA>
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <__fp_splitA+0x30>
     a68:	16 16       	cp	r1, r22
     a6a:	17 06       	cpc	r1, r23
     a6c:	18 06       	cpc	r1, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	f1 cf       	rjmp	.-30     	; 0xa54 <__fp_splitA+0xc>
     a72:	86 95       	lsr	r24
     a74:	71 05       	cpc	r23, r1
     a76:	61 05       	cpc	r22, r1
     a78:	08 94       	sec
     a7a:	08 95       	ret

00000a7c <__fp_zero>:
     a7c:	e8 94       	clt

00000a7e <__fp_szero>:
     a7e:	bb 27       	eor	r27, r27
     a80:	66 27       	eor	r22, r22
     a82:	77 27       	eor	r23, r23
     a84:	cb 01       	movw	r24, r22
     a86:	97 f9       	bld	r25, 7
     a88:	08 95       	ret

00000a8a <__ashldi3>:
     a8a:	0f 93       	push	r16
     a8c:	08 30       	cpi	r16, 0x08	; 8
     a8e:	90 f0       	brcs	.+36     	; 0xab4 <__ashldi3+0x2a>
     a90:	98 2f       	mov	r25, r24
     a92:	87 2f       	mov	r24, r23
     a94:	76 2f       	mov	r23, r22
     a96:	65 2f       	mov	r22, r21
     a98:	54 2f       	mov	r21, r20
     a9a:	43 2f       	mov	r20, r19
     a9c:	32 2f       	mov	r19, r18
     a9e:	22 27       	eor	r18, r18
     aa0:	08 50       	subi	r16, 0x08	; 8
     aa2:	f4 cf       	rjmp	.-24     	; 0xa8c <__ashldi3+0x2>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	66 1f       	adc	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	88 1f       	adc	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	0a 95       	dec	r16
     ab6:	b2 f7       	brpl	.-20     	; 0xaa4 <__ashldi3+0x1a>
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <__ashrdi3>:
     abc:	97 fb       	bst	r25, 7
     abe:	10 f8       	bld	r1, 0

00000ac0 <__lshrdi3>:
     ac0:	16 94       	lsr	r1
     ac2:	00 08       	sbc	r0, r0
     ac4:	0f 93       	push	r16
     ac6:	08 30       	cpi	r16, 0x08	; 8
     ac8:	98 f0       	brcs	.+38     	; 0xaf0 <__lshrdi3+0x30>
     aca:	08 50       	subi	r16, 0x08	; 8
     acc:	23 2f       	mov	r18, r19
     ace:	34 2f       	mov	r19, r20
     ad0:	45 2f       	mov	r20, r21
     ad2:	56 2f       	mov	r21, r22
     ad4:	67 2f       	mov	r22, r23
     ad6:	78 2f       	mov	r23, r24
     ad8:	89 2f       	mov	r24, r25
     ada:	90 2d       	mov	r25, r0
     adc:	f4 cf       	rjmp	.-24     	; 0xac6 <__lshrdi3+0x6>
     ade:	05 94       	asr	r0
     ae0:	97 95       	ror	r25
     ae2:	87 95       	ror	r24
     ae4:	77 95       	ror	r23
     ae6:	67 95       	ror	r22
     ae8:	57 95       	ror	r21
     aea:	47 95       	ror	r20
     aec:	37 95       	ror	r19
     aee:	27 95       	ror	r18
     af0:	0a 95       	dec	r16
     af2:	aa f7       	brpl	.-22     	; 0xade <__lshrdi3+0x1e>
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <__cmpdi2_s8>:
     af8:	00 24       	eor	r0, r0
     afa:	a7 fd       	sbrc	r26, 7
     afc:	00 94       	com	r0
     afe:	2a 17       	cp	r18, r26
     b00:	30 05       	cpc	r19, r0
     b02:	40 05       	cpc	r20, r0
     b04:	50 05       	cpc	r21, r0
     b06:	60 05       	cpc	r22, r0
     b08:	70 05       	cpc	r23, r0
     b0a:	80 05       	cpc	r24, r0
     b0c:	90 05       	cpc	r25, r0
     b0e:	08 95       	ret

00000b10 <vsnprintf>:
     b10:	ae e0       	ldi	r26, 0x0E	; 14
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ee e8       	ldi	r30, 0x8E	; 142
     b16:	f5 e0       	ldi	r31, 0x05	; 5
     b18:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__prologue_saves__+0x1c>
     b1c:	8c 01       	movw	r16, r24
     b1e:	fa 01       	movw	r30, r20
     b20:	86 e0       	ldi	r24, 0x06	; 6
     b22:	8c 83       	std	Y+4, r24	; 0x04
     b24:	09 83       	std	Y+1, r16	; 0x01
     b26:	1a 83       	std	Y+2, r17	; 0x02
     b28:	77 ff       	sbrs	r23, 7
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vsnprintf+0x20>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e8       	ldi	r23, 0x80	; 128
     b30:	cb 01       	movw	r24, r22
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	8d 83       	std	Y+5, r24	; 0x05
     b36:	9e 83       	std	Y+6, r25	; 0x06
     b38:	a9 01       	movw	r20, r18
     b3a:	bf 01       	movw	r22, r30
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 b4 05 	call	0xb68	; 0xb68 <vfprintf>
     b44:	4d 81       	ldd	r20, Y+5	; 0x05
     b46:	5e 81       	ldd	r21, Y+6	; 0x06
     b48:	57 fd       	sbrc	r21, 7
     b4a:	0a c0       	rjmp	.+20     	; 0xb60 <vsnprintf+0x50>
     b4c:	2f 81       	ldd	r18, Y+7	; 0x07
     b4e:	38 85       	ldd	r19, Y+8	; 0x08
     b50:	42 17       	cp	r20, r18
     b52:	53 07       	cpc	r21, r19
     b54:	0c f4       	brge	.+2      	; 0xb58 <vsnprintf+0x48>
     b56:	9a 01       	movw	r18, r20
     b58:	f8 01       	movw	r30, r16
     b5a:	e2 0f       	add	r30, r18
     b5c:	f3 1f       	adc	r31, r19
     b5e:	10 82       	st	Z, r1
     b60:	2e 96       	adiw	r28, 0x0e	; 14
     b62:	e4 e0       	ldi	r30, 0x04	; 4
     b64:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__epilogue_restores__+0x1c>

00000b68 <vfprintf>:
     b68:	ab e0       	ldi	r26, 0x0B	; 11
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ea eb       	ldi	r30, 0xBA	; 186
     b6e:	f5 e0       	ldi	r31, 0x05	; 5
     b70:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__prologue_saves__>
     b74:	6c 01       	movw	r12, r24
     b76:	7b 01       	movw	r14, r22
     b78:	8a 01       	movw	r16, r20
     b7a:	fc 01       	movw	r30, r24
     b7c:	16 82       	std	Z+6, r1	; 0x06
     b7e:	17 82       	std	Z+7, r1	; 0x07
     b80:	83 81       	ldd	r24, Z+3	; 0x03
     b82:	81 ff       	sbrs	r24, 1
     b84:	cc c1       	rjmp	.+920    	; 0xf1e <vfprintf+0x3b6>
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	3c 01       	movw	r6, r24
     b8c:	f6 01       	movw	r30, r12
     b8e:	93 81       	ldd	r25, Z+3	; 0x03
     b90:	f7 01       	movw	r30, r14
     b92:	93 fd       	sbrc	r25, 3
     b94:	85 91       	lpm	r24, Z+
     b96:	93 ff       	sbrs	r25, 3
     b98:	81 91       	ld	r24, Z+
     b9a:	7f 01       	movw	r14, r30
     b9c:	88 23       	and	r24, r24
     b9e:	09 f4       	brne	.+2      	; 0xba2 <vfprintf+0x3a>
     ba0:	ba c1       	rjmp	.+884    	; 0xf16 <vfprintf+0x3ae>
     ba2:	85 32       	cpi	r24, 0x25	; 37
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <vfprintf+0x4c>
     ba6:	93 fd       	sbrc	r25, 3
     ba8:	85 91       	lpm	r24, Z+
     baa:	93 ff       	sbrs	r25, 3
     bac:	81 91       	ld	r24, Z+
     bae:	7f 01       	movw	r14, r30
     bb0:	85 32       	cpi	r24, 0x25	; 37
     bb2:	29 f4       	brne	.+10     	; 0xbbe <vfprintf+0x56>
     bb4:	b6 01       	movw	r22, r12
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     bbc:	e7 cf       	rjmp	.-50     	; 0xb8c <vfprintf+0x24>
     bbe:	91 2c       	mov	r9, r1
     bc0:	21 2c       	mov	r2, r1
     bc2:	31 2c       	mov	r3, r1
     bc4:	ff e1       	ldi	r31, 0x1F	; 31
     bc6:	f3 15       	cp	r31, r3
     bc8:	d8 f0       	brcs	.+54     	; 0xc00 <vfprintf+0x98>
     bca:	8b 32       	cpi	r24, 0x2B	; 43
     bcc:	79 f0       	breq	.+30     	; 0xbec <vfprintf+0x84>
     bce:	38 f4       	brcc	.+14     	; 0xbde <vfprintf+0x76>
     bd0:	80 32       	cpi	r24, 0x20	; 32
     bd2:	79 f0       	breq	.+30     	; 0xbf2 <vfprintf+0x8a>
     bd4:	83 32       	cpi	r24, 0x23	; 35
     bd6:	a1 f4       	brne	.+40     	; 0xc00 <vfprintf+0x98>
     bd8:	23 2d       	mov	r18, r3
     bda:	20 61       	ori	r18, 0x10	; 16
     bdc:	1d c0       	rjmp	.+58     	; 0xc18 <vfprintf+0xb0>
     bde:	8d 32       	cpi	r24, 0x2D	; 45
     be0:	61 f0       	breq	.+24     	; 0xbfa <vfprintf+0x92>
     be2:	80 33       	cpi	r24, 0x30	; 48
     be4:	69 f4       	brne	.+26     	; 0xc00 <vfprintf+0x98>
     be6:	23 2d       	mov	r18, r3
     be8:	21 60       	ori	r18, 0x01	; 1
     bea:	16 c0       	rjmp	.+44     	; 0xc18 <vfprintf+0xb0>
     bec:	83 2d       	mov	r24, r3
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	38 2e       	mov	r3, r24
     bf2:	e3 2d       	mov	r30, r3
     bf4:	e4 60       	ori	r30, 0x04	; 4
     bf6:	3e 2e       	mov	r3, r30
     bf8:	2a c0       	rjmp	.+84     	; 0xc4e <vfprintf+0xe6>
     bfa:	f3 2d       	mov	r31, r3
     bfc:	f8 60       	ori	r31, 0x08	; 8
     bfe:	1d c0       	rjmp	.+58     	; 0xc3a <vfprintf+0xd2>
     c00:	37 fc       	sbrc	r3, 7
     c02:	2d c0       	rjmp	.+90     	; 0xc5e <vfprintf+0xf6>
     c04:	20 ed       	ldi	r18, 0xD0	; 208
     c06:	28 0f       	add	r18, r24
     c08:	2a 30       	cpi	r18, 0x0A	; 10
     c0a:	40 f0       	brcs	.+16     	; 0xc1c <vfprintf+0xb4>
     c0c:	8e 32       	cpi	r24, 0x2E	; 46
     c0e:	b9 f4       	brne	.+46     	; 0xc3e <vfprintf+0xd6>
     c10:	36 fc       	sbrc	r3, 6
     c12:	81 c1       	rjmp	.+770    	; 0xf16 <vfprintf+0x3ae>
     c14:	23 2d       	mov	r18, r3
     c16:	20 64       	ori	r18, 0x40	; 64
     c18:	32 2e       	mov	r3, r18
     c1a:	19 c0       	rjmp	.+50     	; 0xc4e <vfprintf+0xe6>
     c1c:	36 fe       	sbrs	r3, 6
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <vfprintf+0xc4>
     c20:	8a e0       	ldi	r24, 0x0A	; 10
     c22:	98 9e       	mul	r9, r24
     c24:	20 0d       	add	r18, r0
     c26:	11 24       	eor	r1, r1
     c28:	92 2e       	mov	r9, r18
     c2a:	11 c0       	rjmp	.+34     	; 0xc4e <vfprintf+0xe6>
     c2c:	ea e0       	ldi	r30, 0x0A	; 10
     c2e:	2e 9e       	mul	r2, r30
     c30:	20 0d       	add	r18, r0
     c32:	11 24       	eor	r1, r1
     c34:	22 2e       	mov	r2, r18
     c36:	f3 2d       	mov	r31, r3
     c38:	f0 62       	ori	r31, 0x20	; 32
     c3a:	3f 2e       	mov	r3, r31
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0xe6>
     c3e:	8c 36       	cpi	r24, 0x6C	; 108
     c40:	21 f4       	brne	.+8      	; 0xc4a <vfprintf+0xe2>
     c42:	83 2d       	mov	r24, r3
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	38 2e       	mov	r3, r24
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0xe6>
     c4a:	88 36       	cpi	r24, 0x68	; 104
     c4c:	41 f4       	brne	.+16     	; 0xc5e <vfprintf+0xf6>
     c4e:	f7 01       	movw	r30, r14
     c50:	93 fd       	sbrc	r25, 3
     c52:	85 91       	lpm	r24, Z+
     c54:	93 ff       	sbrs	r25, 3
     c56:	81 91       	ld	r24, Z+
     c58:	7f 01       	movw	r14, r30
     c5a:	81 11       	cpse	r24, r1
     c5c:	b3 cf       	rjmp	.-154    	; 0xbc4 <vfprintf+0x5c>
     c5e:	98 2f       	mov	r25, r24
     c60:	9f 7d       	andi	r25, 0xDF	; 223
     c62:	95 54       	subi	r25, 0x45	; 69
     c64:	93 30       	cpi	r25, 0x03	; 3
     c66:	28 f4       	brcc	.+10     	; 0xc72 <vfprintf+0x10a>
     c68:	0c 5f       	subi	r16, 0xFC	; 252
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	9f e3       	ldi	r25, 0x3F	; 63
     c6e:	99 83       	std	Y+1, r25	; 0x01
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <vfprintf+0x124>
     c72:	83 36       	cpi	r24, 0x63	; 99
     c74:	31 f0       	breq	.+12     	; 0xc82 <vfprintf+0x11a>
     c76:	83 37       	cpi	r24, 0x73	; 115
     c78:	71 f0       	breq	.+28     	; 0xc96 <vfprintf+0x12e>
     c7a:	83 35       	cpi	r24, 0x53	; 83
     c7c:	09 f0       	breq	.+2      	; 0xc80 <vfprintf+0x118>
     c7e:	59 c0       	rjmp	.+178    	; 0xd32 <vfprintf+0x1ca>
     c80:	21 c0       	rjmp	.+66     	; 0xcc4 <vfprintf+0x15c>
     c82:	f8 01       	movw	r30, r16
     c84:	80 81       	ld	r24, Z
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	0e 5f       	subi	r16, 0xFE	; 254
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	88 24       	eor	r8, r8
     c8e:	83 94       	inc	r8
     c90:	91 2c       	mov	r9, r1
     c92:	53 01       	movw	r10, r6
     c94:	13 c0       	rjmp	.+38     	; 0xcbc <vfprintf+0x154>
     c96:	28 01       	movw	r4, r16
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	4f 0e       	add	r4, r31
     c9c:	51 1c       	adc	r5, r1
     c9e:	f8 01       	movw	r30, r16
     ca0:	a0 80       	ld	r10, Z
     ca2:	b1 80       	ldd	r11, Z+1	; 0x01
     ca4:	36 fe       	sbrs	r3, 6
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <vfprintf+0x146>
     ca8:	69 2d       	mov	r22, r9
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x14a>
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	7f ef       	ldi	r23, 0xFF	; 255
     cb2:	c5 01       	movw	r24, r10
     cb4:	0e 94 a0 07 	call	0xf40	; 0xf40 <strnlen>
     cb8:	4c 01       	movw	r8, r24
     cba:	82 01       	movw	r16, r4
     cbc:	f3 2d       	mov	r31, r3
     cbe:	ff 77       	andi	r31, 0x7F	; 127
     cc0:	3f 2e       	mov	r3, r31
     cc2:	16 c0       	rjmp	.+44     	; 0xcf0 <vfprintf+0x188>
     cc4:	28 01       	movw	r4, r16
     cc6:	22 e0       	ldi	r18, 0x02	; 2
     cc8:	42 0e       	add	r4, r18
     cca:	51 1c       	adc	r5, r1
     ccc:	f8 01       	movw	r30, r16
     cce:	a0 80       	ld	r10, Z
     cd0:	b1 80       	ldd	r11, Z+1	; 0x01
     cd2:	36 fe       	sbrs	r3, 6
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <vfprintf+0x174>
     cd6:	69 2d       	mov	r22, r9
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <vfprintf+0x178>
     cdc:	6f ef       	ldi	r22, 0xFF	; 255
     cde:	7f ef       	ldi	r23, 0xFF	; 255
     ce0:	c5 01       	movw	r24, r10
     ce2:	0e 94 95 07 	call	0xf2a	; 0xf2a <strnlen_P>
     ce6:	4c 01       	movw	r8, r24
     ce8:	f3 2d       	mov	r31, r3
     cea:	f0 68       	ori	r31, 0x80	; 128
     cec:	3f 2e       	mov	r3, r31
     cee:	82 01       	movw	r16, r4
     cf0:	33 fc       	sbrc	r3, 3
     cf2:	1b c0       	rjmp	.+54     	; 0xd2a <vfprintf+0x1c2>
     cf4:	82 2d       	mov	r24, r2
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	88 16       	cp	r8, r24
     cfa:	99 06       	cpc	r9, r25
     cfc:	b0 f4       	brcc	.+44     	; 0xd2a <vfprintf+0x1c2>
     cfe:	b6 01       	movw	r22, r12
     d00:	80 e2       	ldi	r24, 0x20	; 32
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     d08:	2a 94       	dec	r2
     d0a:	f4 cf       	rjmp	.-24     	; 0xcf4 <vfprintf+0x18c>
     d0c:	f5 01       	movw	r30, r10
     d0e:	37 fc       	sbrc	r3, 7
     d10:	85 91       	lpm	r24, Z+
     d12:	37 fe       	sbrs	r3, 7
     d14:	81 91       	ld	r24, Z+
     d16:	5f 01       	movw	r10, r30
     d18:	b6 01       	movw	r22, r12
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     d20:	21 10       	cpse	r2, r1
     d22:	2a 94       	dec	r2
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	82 1a       	sub	r8, r18
     d28:	91 08       	sbc	r9, r1
     d2a:	81 14       	cp	r8, r1
     d2c:	91 04       	cpc	r9, r1
     d2e:	71 f7       	brne	.-36     	; 0xd0c <vfprintf+0x1a4>
     d30:	e8 c0       	rjmp	.+464    	; 0xf02 <vfprintf+0x39a>
     d32:	84 36       	cpi	r24, 0x64	; 100
     d34:	11 f0       	breq	.+4      	; 0xd3a <vfprintf+0x1d2>
     d36:	89 36       	cpi	r24, 0x69	; 105
     d38:	41 f5       	brne	.+80     	; 0xd8a <vfprintf+0x222>
     d3a:	f8 01       	movw	r30, r16
     d3c:	37 fe       	sbrs	r3, 7
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <vfprintf+0x1e6>
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	0c 5f       	subi	r16, 0xFC	; 252
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <vfprintf+0x1f6>
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	07 2e       	mov	r0, r23
     d54:	00 0c       	add	r0, r0
     d56:	88 0b       	sbc	r24, r24
     d58:	99 0b       	sbc	r25, r25
     d5a:	0e 5f       	subi	r16, 0xFE	; 254
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	f3 2d       	mov	r31, r3
     d60:	ff 76       	andi	r31, 0x6F	; 111
     d62:	3f 2e       	mov	r3, r31
     d64:	97 ff       	sbrs	r25, 7
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <vfprintf+0x212>
     d68:	90 95       	com	r25
     d6a:	80 95       	com	r24
     d6c:	70 95       	com	r23
     d6e:	61 95       	neg	r22
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	8f 4f       	sbci	r24, 0xFF	; 255
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	f0 68       	ori	r31, 0x80	; 128
     d78:	3f 2e       	mov	r3, r31
     d7a:	2a e0       	ldi	r18, 0x0A	; 10
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	a3 01       	movw	r20, r6
     d80:	0e 94 e7 07 	call	0xfce	; 0xfce <__ultoa_invert>
     d84:	88 2e       	mov	r8, r24
     d86:	86 18       	sub	r8, r6
     d88:	45 c0       	rjmp	.+138    	; 0xe14 <vfprintf+0x2ac>
     d8a:	85 37       	cpi	r24, 0x75	; 117
     d8c:	31 f4       	brne	.+12     	; 0xd9a <vfprintf+0x232>
     d8e:	23 2d       	mov	r18, r3
     d90:	2f 7e       	andi	r18, 0xEF	; 239
     d92:	b2 2e       	mov	r11, r18
     d94:	2a e0       	ldi	r18, 0x0A	; 10
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	25 c0       	rjmp	.+74     	; 0xde4 <vfprintf+0x27c>
     d9a:	93 2d       	mov	r25, r3
     d9c:	99 7f       	andi	r25, 0xF9	; 249
     d9e:	b9 2e       	mov	r11, r25
     da0:	8f 36       	cpi	r24, 0x6F	; 111
     da2:	c1 f0       	breq	.+48     	; 0xdd4 <vfprintf+0x26c>
     da4:	18 f4       	brcc	.+6      	; 0xdac <vfprintf+0x244>
     da6:	88 35       	cpi	r24, 0x58	; 88
     da8:	79 f0       	breq	.+30     	; 0xdc8 <vfprintf+0x260>
     daa:	b5 c0       	rjmp	.+362    	; 0xf16 <vfprintf+0x3ae>
     dac:	80 37       	cpi	r24, 0x70	; 112
     dae:	19 f0       	breq	.+6      	; 0xdb6 <vfprintf+0x24e>
     db0:	88 37       	cpi	r24, 0x78	; 120
     db2:	21 f0       	breq	.+8      	; 0xdbc <vfprintf+0x254>
     db4:	b0 c0       	rjmp	.+352    	; 0xf16 <vfprintf+0x3ae>
     db6:	e9 2f       	mov	r30, r25
     db8:	e0 61       	ori	r30, 0x10	; 16
     dba:	be 2e       	mov	r11, r30
     dbc:	b4 fe       	sbrs	r11, 4
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <vfprintf+0x272>
     dc0:	fb 2d       	mov	r31, r11
     dc2:	f4 60       	ori	r31, 0x04	; 4
     dc4:	bf 2e       	mov	r11, r31
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <vfprintf+0x272>
     dc8:	34 fe       	sbrs	r3, 4
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <vfprintf+0x278>
     dcc:	29 2f       	mov	r18, r25
     dce:	26 60       	ori	r18, 0x06	; 6
     dd0:	b2 2e       	mov	r11, r18
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <vfprintf+0x278>
     dd4:	28 e0       	ldi	r18, 0x08	; 8
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <vfprintf+0x27c>
     dda:	20 e1       	ldi	r18, 0x10	; 16
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x27c>
     de0:	20 e1       	ldi	r18, 0x10	; 16
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	f8 01       	movw	r30, r16
     de6:	b7 fe       	sbrs	r11, 7
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <vfprintf+0x290>
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	0c 5f       	subi	r16, 0xFC	; 252
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x29c>
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 5f       	subi	r16, 0xFE	; 254
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	a3 01       	movw	r20, r6
     e06:	0e 94 e7 07 	call	0xfce	; 0xfce <__ultoa_invert>
     e0a:	88 2e       	mov	r8, r24
     e0c:	86 18       	sub	r8, r6
     e0e:	fb 2d       	mov	r31, r11
     e10:	ff 77       	andi	r31, 0x7F	; 127
     e12:	3f 2e       	mov	r3, r31
     e14:	36 fe       	sbrs	r3, 6
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <vfprintf+0x2ca>
     e18:	23 2d       	mov	r18, r3
     e1a:	2e 7f       	andi	r18, 0xFE	; 254
     e1c:	a2 2e       	mov	r10, r18
     e1e:	89 14       	cp	r8, r9
     e20:	58 f4       	brcc	.+22     	; 0xe38 <vfprintf+0x2d0>
     e22:	34 fe       	sbrs	r3, 4
     e24:	0b c0       	rjmp	.+22     	; 0xe3c <vfprintf+0x2d4>
     e26:	32 fc       	sbrc	r3, 2
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <vfprintf+0x2d4>
     e2a:	83 2d       	mov	r24, r3
     e2c:	8e 7e       	andi	r24, 0xEE	; 238
     e2e:	a8 2e       	mov	r10, r24
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <vfprintf+0x2d4>
     e32:	b8 2c       	mov	r11, r8
     e34:	a3 2c       	mov	r10, r3
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <vfprintf+0x2d6>
     e38:	b8 2c       	mov	r11, r8
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <vfprintf+0x2d6>
     e3c:	b9 2c       	mov	r11, r9
     e3e:	a4 fe       	sbrs	r10, 4
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <vfprintf+0x2f8>
     e42:	fe 01       	movw	r30, r28
     e44:	e8 0d       	add	r30, r8
     e46:	f1 1d       	adc	r31, r1
     e48:	80 81       	ld	r24, Z
     e4a:	80 33       	cpi	r24, 0x30	; 48
     e4c:	21 f4       	brne	.+8      	; 0xe56 <vfprintf+0x2ee>
     e4e:	9a 2d       	mov	r25, r10
     e50:	99 7e       	andi	r25, 0xE9	; 233
     e52:	a9 2e       	mov	r10, r25
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <vfprintf+0x300>
     e56:	a2 fe       	sbrs	r10, 2
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0x2fe>
     e5a:	b3 94       	inc	r11
     e5c:	b3 94       	inc	r11
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <vfprintf+0x300>
     e60:	8a 2d       	mov	r24, r10
     e62:	86 78       	andi	r24, 0x86	; 134
     e64:	09 f0       	breq	.+2      	; 0xe68 <vfprintf+0x300>
     e66:	b3 94       	inc	r11
     e68:	a3 fc       	sbrc	r10, 3
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <vfprintf+0x326>
     e6c:	a0 fe       	sbrs	r10, 0
     e6e:	06 c0       	rjmp	.+12     	; 0xe7c <vfprintf+0x314>
     e70:	b2 14       	cp	r11, r2
     e72:	88 f4       	brcc	.+34     	; 0xe96 <vfprintf+0x32e>
     e74:	28 0c       	add	r2, r8
     e76:	92 2c       	mov	r9, r2
     e78:	9b 18       	sub	r9, r11
     e7a:	0e c0       	rjmp	.+28     	; 0xe98 <vfprintf+0x330>
     e7c:	b2 14       	cp	r11, r2
     e7e:	60 f4       	brcc	.+24     	; 0xe98 <vfprintf+0x330>
     e80:	b6 01       	movw	r22, r12
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     e8a:	b3 94       	inc	r11
     e8c:	f7 cf       	rjmp	.-18     	; 0xe7c <vfprintf+0x314>
     e8e:	b2 14       	cp	r11, r2
     e90:	18 f4       	brcc	.+6      	; 0xe98 <vfprintf+0x330>
     e92:	2b 18       	sub	r2, r11
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x332>
     e96:	98 2c       	mov	r9, r8
     e98:	21 2c       	mov	r2, r1
     e9a:	a4 fe       	sbrs	r10, 4
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <vfprintf+0x356>
     e9e:	b6 01       	movw	r22, r12
     ea0:	80 e3       	ldi	r24, 0x30	; 48
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     ea8:	a2 fe       	sbrs	r10, 2
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <vfprintf+0x372>
     eac:	a1 fc       	sbrc	r10, 1
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <vfprintf+0x34e>
     eb0:	88 e7       	ldi	r24, 0x78	; 120
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x352>
     eb6:	88 e5       	ldi	r24, 0x58	; 88
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b6 01       	movw	r22, r12
     ebc:	0c c0       	rjmp	.+24     	; 0xed6 <vfprintf+0x36e>
     ebe:	8a 2d       	mov	r24, r10
     ec0:	86 78       	andi	r24, 0x86	; 134
     ec2:	59 f0       	breq	.+22     	; 0xeda <vfprintf+0x372>
     ec4:	a1 fe       	sbrs	r10, 1
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <vfprintf+0x364>
     ec8:	8b e2       	ldi	r24, 0x2B	; 43
     eca:	01 c0       	rjmp	.+2      	; 0xece <vfprintf+0x366>
     ecc:	80 e2       	ldi	r24, 0x20	; 32
     ece:	a7 fc       	sbrc	r10, 7
     ed0:	8d e2       	ldi	r24, 0x2D	; 45
     ed2:	b6 01       	movw	r22, r12
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     eda:	89 14       	cp	r8, r9
     edc:	38 f4       	brcc	.+14     	; 0xeec <vfprintf+0x384>
     ede:	b6 01       	movw	r22, r12
     ee0:	80 e3       	ldi	r24, 0x30	; 48
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     ee8:	9a 94       	dec	r9
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <vfprintf+0x372>
     eec:	8a 94       	dec	r8
     eee:	f3 01       	movw	r30, r6
     ef0:	e8 0d       	add	r30, r8
     ef2:	f1 1d       	adc	r31, r1
     ef4:	80 81       	ld	r24, Z
     ef6:	b6 01       	movw	r22, r12
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     efe:	81 10       	cpse	r8, r1
     f00:	f5 cf       	rjmp	.-22     	; 0xeec <vfprintf+0x384>
     f02:	22 20       	and	r2, r2
     f04:	09 f4       	brne	.+2      	; 0xf08 <vfprintf+0x3a0>
     f06:	42 ce       	rjmp	.-892    	; 0xb8c <vfprintf+0x24>
     f08:	b6 01       	movw	r22, r12
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 ab 07 	call	0xf56	; 0xf56 <fputc>
     f12:	2a 94       	dec	r2
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <vfprintf+0x39a>
     f16:	f6 01       	movw	r30, r12
     f18:	86 81       	ldd	r24, Z+6	; 0x06
     f1a:	97 81       	ldd	r25, Z+7	; 0x07
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <vfprintf+0x3ba>
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	2b 96       	adiw	r28, 0x0b	; 11
     f24:	e2 e1       	ldi	r30, 0x12	; 18
     f26:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__epilogue_restores__>

00000f2a <strnlen_P>:
     f2a:	fc 01       	movw	r30, r24
     f2c:	05 90       	lpm	r0, Z+
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	70 40       	sbci	r23, 0x00	; 0
     f32:	01 10       	cpse	r0, r1
     f34:	d8 f7       	brcc	.-10     	; 0xf2c <strnlen_P+0x2>
     f36:	80 95       	com	r24
     f38:	90 95       	com	r25
     f3a:	8e 0f       	add	r24, r30
     f3c:	9f 1f       	adc	r25, r31
     f3e:	08 95       	ret

00000f40 <strnlen>:
     f40:	fc 01       	movw	r30, r24
     f42:	61 50       	subi	r22, 0x01	; 1
     f44:	70 40       	sbci	r23, 0x00	; 0
     f46:	01 90       	ld	r0, Z+
     f48:	01 10       	cpse	r0, r1
     f4a:	d8 f7       	brcc	.-10     	; 0xf42 <strnlen+0x2>
     f4c:	80 95       	com	r24
     f4e:	90 95       	com	r25
     f50:	8e 0f       	add	r24, r30
     f52:	9f 1f       	adc	r25, r31
     f54:	08 95       	ret

00000f56 <fputc>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	fb 01       	movw	r30, r22
     f60:	23 81       	ldd	r18, Z+3	; 0x03
     f62:	21 fd       	sbrc	r18, 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <fputc+0x16>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <fputc+0x6e>
     f6c:	22 ff       	sbrs	r18, 2
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <fputc+0x46>
     f70:	46 81       	ldd	r20, Z+6	; 0x06
     f72:	57 81       	ldd	r21, Z+7	; 0x07
     f74:	24 81       	ldd	r18, Z+4	; 0x04
     f76:	35 81       	ldd	r19, Z+5	; 0x05
     f78:	42 17       	cp	r20, r18
     f7a:	53 07       	cpc	r21, r19
     f7c:	44 f4       	brge	.+16     	; 0xf8e <fputc+0x38>
     f7e:	a0 81       	ld	r26, Z
     f80:	b1 81       	ldd	r27, Z+1	; 0x01
     f82:	9d 01       	movw	r18, r26
     f84:	2f 5f       	subi	r18, 0xFF	; 255
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	20 83       	st	Z, r18
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	8c 93       	st	X, r24
     f8e:	26 81       	ldd	r18, Z+6	; 0x06
     f90:	37 81       	ldd	r19, Z+7	; 0x07
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	26 83       	std	Z+6, r18	; 0x06
     f98:	37 83       	std	Z+7, r19	; 0x07
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <fputc+0x6e>
     f9c:	8b 01       	movw	r16, r22
     f9e:	ec 01       	movw	r28, r24
     fa0:	fb 01       	movw	r30, r22
     fa2:	00 84       	ldd	r0, Z+8	; 0x08
     fa4:	f1 85       	ldd	r31, Z+9	; 0x09
     fa6:	e0 2d       	mov	r30, r0
     fa8:	09 95       	icall
     faa:	89 2b       	or	r24, r25
     fac:	e1 f6       	brne	.-72     	; 0xf66 <fputc+0x10>
     fae:	d8 01       	movw	r26, r16
     fb0:	16 96       	adiw	r26, 0x06	; 6
     fb2:	8d 91       	ld	r24, X+
     fb4:	9c 91       	ld	r25, X
     fb6:	17 97       	sbiw	r26, 0x07	; 7
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	8d 93       	st	X+, r24
     fbe:	9c 93       	st	X, r25
     fc0:	17 97       	sbiw	r26, 0x07	; 7
     fc2:	ce 01       	movw	r24, r28
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <__ultoa_invert>:
     fce:	fa 01       	movw	r30, r20
     fd0:	aa 27       	eor	r26, r26
     fd2:	28 30       	cpi	r18, 0x08	; 8
     fd4:	51 f1       	breq	.+84     	; 0x102a <__ultoa_invert+0x5c>
     fd6:	20 31       	cpi	r18, 0x10	; 16
     fd8:	81 f1       	breq	.+96     	; 0x103a <__ultoa_invert+0x6c>
     fda:	e8 94       	clt
     fdc:	6f 93       	push	r22
     fde:	6e 7f       	andi	r22, 0xFE	; 254
     fe0:	6e 5f       	subi	r22, 0xFE	; 254
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	af 4f       	sbci	r26, 0xFF	; 255
     fea:	b1 e0       	ldi	r27, 0x01	; 1
     fec:	3e d0       	rcall	.+124    	; 0x106a <__ultoa_invert+0x9c>
     fee:	b4 e0       	ldi	r27, 0x04	; 4
     ff0:	3c d0       	rcall	.+120    	; 0x106a <__ultoa_invert+0x9c>
     ff2:	67 0f       	add	r22, r23
     ff4:	78 1f       	adc	r23, r24
     ff6:	89 1f       	adc	r24, r25
     ff8:	9a 1f       	adc	r25, r26
     ffa:	a1 1d       	adc	r26, r1
     ffc:	68 0f       	add	r22, r24
     ffe:	79 1f       	adc	r23, r25
    1000:	8a 1f       	adc	r24, r26
    1002:	91 1d       	adc	r25, r1
    1004:	a1 1d       	adc	r26, r1
    1006:	6a 0f       	add	r22, r26
    1008:	71 1d       	adc	r23, r1
    100a:	81 1d       	adc	r24, r1
    100c:	91 1d       	adc	r25, r1
    100e:	a1 1d       	adc	r26, r1
    1010:	20 d0       	rcall	.+64     	; 0x1052 <__ultoa_invert+0x84>
    1012:	09 f4       	brne	.+2      	; 0x1016 <__ultoa_invert+0x48>
    1014:	68 94       	set
    1016:	3f 91       	pop	r19
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	26 9f       	mul	r18, r22
    101c:	11 24       	eor	r1, r1
    101e:	30 19       	sub	r19, r0
    1020:	30 5d       	subi	r19, 0xD0	; 208
    1022:	31 93       	st	Z+, r19
    1024:	de f6       	brtc	.-74     	; 0xfdc <__ultoa_invert+0xe>
    1026:	cf 01       	movw	r24, r30
    1028:	08 95       	ret
    102a:	46 2f       	mov	r20, r22
    102c:	47 70       	andi	r20, 0x07	; 7
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	41 93       	st	Z+, r20
    1032:	b3 e0       	ldi	r27, 0x03	; 3
    1034:	0f d0       	rcall	.+30     	; 0x1054 <__ultoa_invert+0x86>
    1036:	c9 f7       	brne	.-14     	; 0x102a <__ultoa_invert+0x5c>
    1038:	f6 cf       	rjmp	.-20     	; 0x1026 <__ultoa_invert+0x58>
    103a:	46 2f       	mov	r20, r22
    103c:	4f 70       	andi	r20, 0x0F	; 15
    103e:	40 5d       	subi	r20, 0xD0	; 208
    1040:	4a 33       	cpi	r20, 0x3A	; 58
    1042:	18 f0       	brcs	.+6      	; 0x104a <__ultoa_invert+0x7c>
    1044:	49 5d       	subi	r20, 0xD9	; 217
    1046:	31 fd       	sbrc	r19, 1
    1048:	40 52       	subi	r20, 0x20	; 32
    104a:	41 93       	st	Z+, r20
    104c:	02 d0       	rcall	.+4      	; 0x1052 <__ultoa_invert+0x84>
    104e:	a9 f7       	brne	.-22     	; 0x103a <__ultoa_invert+0x6c>
    1050:	ea cf       	rjmp	.-44     	; 0x1026 <__ultoa_invert+0x58>
    1052:	b4 e0       	ldi	r27, 0x04	; 4
    1054:	a6 95       	lsr	r26
    1056:	97 95       	ror	r25
    1058:	87 95       	ror	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	ba 95       	dec	r27
    1060:	c9 f7       	brne	.-14     	; 0x1054 <__ultoa_invert+0x86>
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 05       	cpc	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	08 95       	ret
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	0a 2e       	mov	r0, r26
    1070:	06 94       	lsr	r0
    1072:	57 95       	ror	r21
    1074:	47 95       	ror	r20
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	ba 95       	dec	r27
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__ultoa_invert+0xa2>
    107e:	62 0f       	add	r22, r18
    1080:	73 1f       	adc	r23, r19
    1082:	84 1f       	adc	r24, r20
    1084:	95 1f       	adc	r25, r21
    1086:	a0 1d       	adc	r26, r0
    1088:	08 95       	ret

0000108a <ccp_write_io>:
    108a:	dc 01       	movw	r26, r24
    108c:	28 ed       	ldi	r18, 0xD8	; 216
    108e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc6_table+0x7f6e38>
    1092:	6c 93       	st	X, r22
    1094:	08 95       	ret

00001096 <__prologue_saves__>:
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	ca 1b       	sub	r28, r26
    10c0:	db 0b       	sbc	r29, r27
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	09 94       	ijmp

000010c8 <__epilogue_restores__>:
    10c8:	2a 88       	ldd	r2, Y+18	; 0x12
    10ca:	39 88       	ldd	r3, Y+17	; 0x11
    10cc:	48 88       	ldd	r4, Y+16	; 0x10
    10ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    10d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    10d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    10d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    10d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    10d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    10da:	b9 84       	ldd	r11, Y+9	; 0x09
    10dc:	c8 84       	ldd	r12, Y+8	; 0x08
    10de:	df 80       	ldd	r13, Y+7	; 0x07
    10e0:	ee 80       	ldd	r14, Y+6	; 0x06
    10e2:	fd 80       	ldd	r15, Y+5	; 0x05
    10e4:	0c 81       	ldd	r16, Y+4	; 0x04
    10e6:	1b 81       	ldd	r17, Y+3	; 0x03
    10e8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ea:	b9 81       	ldd	r27, Y+1	; 0x01
    10ec:	ce 0f       	add	r28, r30
    10ee:	d1 1d       	adc	r29, r1
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	ed 01       	movw	r28, r26
    10f6:	08 95       	ret

000010f8 <_exit>:
    10f8:	f8 94       	cli

000010fa <__stop_program>:
    10fa:	ff cf       	rjmp	.-2      	; 0x10fa <__stop_program>
